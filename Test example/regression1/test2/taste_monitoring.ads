-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_MONITORING with SPARK_Mode
IS


-- TASTE_Peek --------------------------------------------
SUBTYPE TASTE_Peek_base_address is adaasn1rtl.Asn1UInt range 0 .. 4294967295;

SUBTYPE TASTE_Peek_offset is adaasn1rtl.Asn1Int range -2147483648 .. 2147483647;

SUBTYPE TASTE_Peek_base_type_index_range is integer range 0..4;
TYPE TASTE_Peek_base_type IS (int_32, int_64, real_single, real_double, octet_string) with Convention => C;
for TASTE_Peek_base_type use
    (int_32 => 0, int_64 => 1, real_single => 2, real_double => 3, octet_string => 4);
SUBTYPE TASTE_Peek_nb_of_elements is adaasn1rtl.Asn1UInt range 1 .. 10;

SUBTYPE TASTE_Peek_sample_time is adaasn1rtl.Asn1UInt range 0 .. 15;


TYPE TASTE_Peek IS RECORD 
    base_address : TASTE_Peek_base_address;
    offset : TASTE_Peek_offset;
    base_type : TASTE_Peek_base_type;
    nb_of_elements : TASTE_Peek_nb_of_elements;
    sample_time : TASTE_Peek_sample_time;
END RECORD;

function TASTE_Peek_base_address_Equal(val1, val2: in TASTE_Peek_base_address) return Boolean;

function TASTE_Peek_offset_Equal(val1, val2: in TASTE_Peek_offset) return Boolean;

function TASTE_Peek_base_type_Equal(val1, val2: in TASTE_Peek_base_type) return Boolean;

function TASTE_Peek_nb_of_elements_Equal(val1, val2: in TASTE_Peek_nb_of_elements) return Boolean;

function TASTE_Peek_sample_time_Equal(val1, val2: in TASTE_Peek_sample_time) return Boolean;

function TASTE_Peek_Equal(val1, val2: in TASTE_Peek) return Boolean;

function TASTE_Peek_base_address_Init return TASTE_Peek_base_address;
function TASTE_Peek_offset_Init return TASTE_Peek_offset;
function TASTE_Peek_base_type_Init return TASTE_Peek_base_type;
function TASTE_Peek_nb_of_elements_Init return TASTE_Peek_nb_of_elements;
function TASTE_Peek_sample_time_Init return TASTE_Peek_sample_time;
function TASTE_Peek_Init return TASTE_Peek;

ERR_TASTE_PEEK_BASE_ADDRESS:CONSTANT INTEGER := 664; 
ERR_TASTE_PEEK_OFFSET:CONSTANT INTEGER := 671; 
ERR_TASTE_PEEK_BASE_TYPE:CONSTANT INTEGER := 678; 
ERR_TASTE_PEEK_NB_OF_ELEMENTS:CONSTANT INTEGER := 685; 
ERR_TASTE_PEEK_SAMPLE_TIME:CONSTANT INTEGER := 692; 
FUNCTION TASTE_Peek_IsConstraintValid(val : in TASTE_Peek) return adaasn1rtl.ASN1_RESULT;
-- TASTE_Peek_list --------------------------------------------
SUBTYPE TASTE_Peek_list_index is integer range 1..5;
TYPE TASTE_Peek_list_array IS ARRAY (TASTE_Peek_list_index) OF TASTE_Peek;
SUBTYPE TASTE_Peek_list_length_index is integer range 0..5;
TYPE TASTE_Peek_list IS  RECORD
    Length : TASTE_Peek_list_length_index;
    Data  : TASTE_Peek_list_array;
END RECORD;

function TASTE_Peek_list_Equal(val1, val2: in TASTE_Peek_list) return Boolean;

function TASTE_Peek_list_Init return TASTE_Peek_list;

ERR_TASTE_PEEK_LIST_ELM_BASE_ADDRESS:CONSTANT INTEGER := 705; 
ERR_TASTE_PEEK_LIST_ELM_OFFSET:CONSTANT INTEGER := 712; 
ERR_TASTE_PEEK_LIST_ELM_BASE_TYPE:CONSTANT INTEGER := 719; 
ERR_TASTE_PEEK_LIST_ELM_NB_OF_ELEMENTS:CONSTANT INTEGER := 726; 
ERR_TASTE_PEEK_LIST_ELM_SAMPLE_TIME:CONSTANT INTEGER := 733; 
ERR_TASTE_PEEK_LIST:CONSTANT INTEGER := 750; 
FUNCTION TASTE_Peek_list_IsConstraintValid(val : in TASTE_Peek_list) return adaasn1rtl.ASN1_RESULT;
SUBTYPE TASTE_Peek_id is adaasn1rtl.Asn1UInt range 0 .. 4294967295;


function TASTE_Peek_id_Equal(val1, val2: in TASTE_Peek_id) return Boolean;

function TASTE_Peek_id_Init return TASTE_Peek_id;

ERR_TASTE_PEEK_ID:CONSTANT INTEGER := 757; -- 
FUNCTION TASTE_Peek_id_IsConstraintValid(val : in TASTE_Peek_id) return adaasn1rtl.ASN1_RESULT;
-- TASTE_Peek_id_list --------------------------------------------
SUBTYPE TASTE_Peek_id_list_index is integer range 1..10;
TYPE TASTE_Peek_id_list_array IS ARRAY (TASTE_Peek_id_list_index) OF TASTE_Peek_id;
SUBTYPE TASTE_Peek_id_list_length_index is integer range 1..10;
TYPE TASTE_Peek_id_list IS  RECORD
    Length : TASTE_Peek_id_list_length_index;
    Data  : TASTE_Peek_id_list_array;
END RECORD;

function TASTE_Peek_id_list_Equal(val1, val2: in TASTE_Peek_id_list) return Boolean;

function TASTE_Peek_id_list_Init return TASTE_Peek_id_list;

ERR_TASTE_PEEK_ID_LIST_ELM:CONSTANT INTEGER := 764; 
ERR_TASTE_PEEK_ID_LIST:CONSTANT INTEGER := 775; 
FUNCTION TASTE_Peek_id_list_IsConstraintValid(val : in TASTE_Peek_id_list) return adaasn1rtl.ASN1_RESULT;
-- TASTE_Monitoring_value --------------------------------------------
SUBTYPE TASTE_Monitoring_value_int_32 is adaasn1rtl.Asn1Int range -2147483648 .. 2147483647;

SUBTYPE TASTE_Monitoring_value_int_64 is adaasn1rtl.Asn1Int range -9223372036854775807 .. 9223372036854775807;

SUBTYPE TASTE_Monitoring_value_octet_string_index is integer range 1..10;
SUBTYPE TASTE_Monitoring_value_octet_string_array IS adaasn1rtl.OctetBuffer(TASTE_Monitoring_value_octet_string_index);
SUBTYPE TASTE_Monitoring_value_octet_string_length_index is integer range 0..10;
TYPE TASTE_Monitoring_value_octet_string IS  RECORD
    Length : TASTE_Monitoring_value_octet_string_length_index;
    Data  : TASTE_Monitoring_value_octet_string_array;
END RECORD;

SUBTYPE TASTE_Monitoring_value_index_range is integer range 0..4;

TYPE TASTE_Monitoring_value_selection IS (int_32_PRESENT, int_64_PRESENT, real_single_PRESENT, real_double_PRESENT, octet_string_PRESENT);
for TASTE_Monitoring_value_selection use
    (int_32_PRESENT => 1, int_64_PRESENT => 2, real_single_PRESENT => 3, real_double_PRESENT => 4, octet_string_PRESENT => 5);
for TASTE_Monitoring_value_selection'Size use 32;

TYPE TASTE_Monitoring_value(kind : TASTE_Monitoring_value_selection:= int_32_PRESENT) IS 
RECORD
    case kind is
    when int_32_PRESENT =>
            int_32: TASTE_Monitoring_value_int_32;
    when int_64_PRESENT =>
            int_64: TASTE_Monitoring_value_int_64;
    when real_single_PRESENT =>
            real_single: adaasn1rtl.Asn1Real;
    when real_double_PRESENT =>
            real_double: adaasn1rtl.Asn1Real;
    when octet_string_PRESENT =>
            octet_string: TASTE_Monitoring_value_octet_string;
    end case;
END RECORD;

FOR TASTE_Monitoring_value USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

function TASTE_Monitoring_value_int_32_Equal(val1, val2: in TASTE_Monitoring_value_int_32) return Boolean;

function TASTE_Monitoring_value_int_64_Equal(val1, val2: in TASTE_Monitoring_value_int_64) return Boolean;

function TASTE_Monitoring_value_octet_string_Equal(val1, val2: in TASTE_Monitoring_value_octet_string) return Boolean;

function TASTE_Monitoring_value_Equal(val1, val2: in TASTE_Monitoring_value) return Boolean;

function TASTE_Monitoring_value_int_32_Init return TASTE_Monitoring_value_int_32;
function TASTE_Monitoring_value_int_64_Init return TASTE_Monitoring_value_int_64;
function TASTE_Monitoring_value_octet_string_Init return TASTE_Monitoring_value_octet_string;
function TASTE_Monitoring_value_Init return TASTE_Monitoring_value;

ERR_TASTE_MONITORING_VALUE:CONSTANT INTEGER := 817; 
ERR_TASTE_MONITORING_VALUE_INT_32:CONSTANT INTEGER := 782; 
ERR_TASTE_MONITORING_VALUE_INT_64:CONSTANT INTEGER := 789; 
ERR_TASTE_MONITORING_VALUE_REAL_SINGLE:CONSTANT INTEGER := 796; 
ERR_TASTE_MONITORING_VALUE_REAL_DOUBLE:CONSTANT INTEGER := 803; 
ERR_TASTE_MONITORING_VALUE_OCTET_STRING:CONSTANT INTEGER := 810; 
FUNCTION TASTE_Monitoring_value_IsConstraintValid(val : in TASTE_Monitoring_value) return adaasn1rtl.ASN1_RESULT;
-- TASTE_Monitoring --------------------------------------------
-- TASTE_Monitoring_values --------------------------------------------
SUBTYPE TASTE_Monitoring_values_index is integer range 1..10;
TYPE TASTE_Monitoring_values_array IS ARRAY (TASTE_Monitoring_values_index) OF TASTE_Monitoring_value;
SUBTYPE TASTE_Monitoring_values_length_index is integer range 1..10;
TYPE TASTE_Monitoring_values IS  RECORD
    Length : TASTE_Monitoring_values_length_index;
    Data  : TASTE_Monitoring_values_array;
END RECORD;

TYPE TASTE_Monitoring IS RECORD 
    id : TASTE_Peek_id;
    values : TASTE_Monitoring_values;
END RECORD;

function TASTE_Monitoring_values_Equal(val1, val2: in TASTE_Monitoring_values) return Boolean;

function TASTE_Monitoring_Equal(val1, val2: in TASTE_Monitoring) return Boolean;

function TASTE_Monitoring_values_Init return TASTE_Monitoring_values;
function TASTE_Monitoring_Init return TASTE_Monitoring;

ERR_TASTE_MONITORING_ID:CONSTANT INTEGER := 824; 
ERR_TASTE_MONITORING_VALUES_ELM:CONSTANT INTEGER := 870; 
ERR_TASTE_MONITORING_VALUES_ELM_INT_32:CONSTANT INTEGER := 835; 
ERR_TASTE_MONITORING_VALUES_ELM_INT_64:CONSTANT INTEGER := 842; 
ERR_TASTE_MONITORING_VALUES_ELM_REAL_SINGLE:CONSTANT INTEGER := 849; 
ERR_TASTE_MONITORING_VALUES_ELM_REAL_DOUBLE:CONSTANT INTEGER := 856; 
ERR_TASTE_MONITORING_VALUES_ELM_OCTET_STRING:CONSTANT INTEGER := 863; 
ERR_TASTE_MONITORING_VALUES:CONSTANT INTEGER := 881; 
FUNCTION TASTE_Monitoring_IsConstraintValid(val : in TASTE_Monitoring) return adaasn1rtl.ASN1_RESULT;
-- TASTE_Monitoring_list --------------------------------------------
SUBTYPE TASTE_Monitoring_list_index is integer range 1..5;
TYPE TASTE_Monitoring_list_array IS ARRAY (TASTE_Monitoring_list_index) OF TASTE_Monitoring;
SUBTYPE TASTE_Monitoring_list_length_index is integer range 0..5;
TYPE TASTE_Monitoring_list IS  RECORD
    Length : TASTE_Monitoring_list_length_index;
    Data  : TASTE_Monitoring_list_array;
END RECORD;

function TASTE_Monitoring_list_Equal(val1, val2: in TASTE_Monitoring_list) return Boolean;

function TASTE_Monitoring_list_Init return TASTE_Monitoring_list;

ERR_TASTE_MONITORING_LIST_ELM_ID:CONSTANT INTEGER := 894; 
ERR_TASTE_MONITORING_LIST_ELM_VALUES_ELM:CONSTANT INTEGER := 940; 
ERR_TASTE_MONITORING_LIST_ELM_VALUES_ELM_INT_32:CONSTANT INTEGER := 905; 
ERR_TASTE_MONITORING_LIST_ELM_VALUES_ELM_INT_64:CONSTANT INTEGER := 912; 
ERR_TASTE_MONITORING_LIST_ELM_VALUES_ELM_REAL_SINGLE:CONSTANT INTEGER := 919; 
ERR_TASTE_MONITORING_LIST_ELM_VALUES_ELM_REAL_DOUBLE:CONSTANT INTEGER := 926; 
ERR_TASTE_MONITORING_LIST_ELM_VALUES_ELM_OCTET_STRING:CONSTANT INTEGER := 933; 
ERR_TASTE_MONITORING_LIST_ELM_VALUES:CONSTANT INTEGER := 951; 
ERR_TASTE_MONITORING_LIST:CONSTANT INTEGER := 968; 
FUNCTION TASTE_Monitoring_list_IsConstraintValid(val : in TASTE_Monitoring_list) return adaasn1rtl.ASN1_RESULT;
SUBTYPE TASTE_Poke_list is TASTE_Monitoring_list;
SUBTYPE TASTE_Poke_list_index is TASTE_Monitoring_list_index;
SUBTYPE TASTE_Poke_list_array is TASTE_Monitoring_list_array;

function TASTE_Poke_list_Equal(val1, val2: in TASTE_Poke_list) return Boolean;

function TASTE_Poke_list_Init return TASTE_Poke_list;

ERR_TASTE_POKE_LIST_ELM_ID:CONSTANT INTEGER := 975; 
ERR_TASTE_POKE_LIST_ELM_VALUES_ELM:CONSTANT INTEGER := 1021; 
ERR_TASTE_POKE_LIST_ELM_VALUES_ELM_INT_32:CONSTANT INTEGER := 986; 
ERR_TASTE_POKE_LIST_ELM_VALUES_ELM_INT_64:CONSTANT INTEGER := 993; 
ERR_TASTE_POKE_LIST_ELM_VALUES_ELM_REAL_SINGLE:CONSTANT INTEGER := 1000; 
ERR_TASTE_POKE_LIST_ELM_VALUES_ELM_REAL_DOUBLE:CONSTANT INTEGER := 1007; 
ERR_TASTE_POKE_LIST_ELM_VALUES_ELM_OCTET_STRING:CONSTANT INTEGER := 1014; 
ERR_TASTE_POKE_LIST_ELM_VALUES:CONSTANT INTEGER := 1032; 
ERR_TASTE_POKE_LIST:CONSTANT INTEGER := 1049; 
FUNCTION TASTE_Poke_list_IsConstraintValid(val : in TASTE_Poke_list) return adaasn1rtl.ASN1_RESULT;
SUBTYPE TASTE_Peek_limit is adaasn1rtl.Asn1UInt range 0 .. 1000;


function TASTE_Peek_limit_Equal(val1, val2: in TASTE_Peek_limit) return Boolean;

function TASTE_Peek_limit_Init return TASTE_Peek_limit;

ERR_TASTE_PEEK_LIMIT:CONSTANT INTEGER := 1060; -- 
FUNCTION TASTE_Peek_limit_IsConstraintValid(val : in TASTE_Peek_limit) return adaasn1rtl.ASN1_RESULT;

empty_peek_list : CONSTANT TASTE_MONITORING.TASTE_Peek_list:= TASTE_Peek_list'(Length => 0,Data => TASTE_Peek_list_array'( others => TASTE_Peek'(
    base_address => 0,
    offset => -2147483648,
    base_type => int_32,
    nb_of_elements => 1,
    sample_time => 0
    )));
empty_poke_list : CONSTANT TASTE_MONITORING.TASTE_Poke_list:= TASTE_Poke_list'(Length => 0,Data => TASTE_Poke_list_array'( others => TASTE_Monitoring'(
    id => 0,
    values => TASTE_Monitoring_values'(Length => 1,Data => TASTE_Monitoring_values_array'(1=>TASTE_Monitoring_value'(kind => int_32_PRESENT, int_32 => -2147483648), others => TASTE_Monitoring_value'(kind => int_32_PRESENT, int_32 => -2147483648)))
    ))); 

private
   --# hide TASTE_MONITORING;


END TASTE_MONITORING;