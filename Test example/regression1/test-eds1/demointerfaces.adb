-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
WITH Demo;
WITH CcsdsSoisSubnetwork;
use type Demo.EventTypeT;
use type Demo.EventTypeTypeT;
use type Demo.EventDataTypeT;
use type Demo.ExtendedModeTypeT;
use type Demo.ExtendedStatusTypeT;
use type Demo.QueryCountTypeT;
use type Demo.StatusTypeT;
use type Demo.StatusFlag1TypeT;
use type Demo.StatusFlag2TypeT;
use type Demo.OpCountTypeT;
use type Demo.TelemetrySet1TypeT;
use type Demo.HKTypeT;
use type Demo.HKTypeT;
use type Demo.TelemetrySet2TypeT;
use type Demo.HKTypeT;
use type Demo.HKTypeT;
use type Demo.CommandStatusTypeT;
use type Demo.CommandStatusTypeT;
use type Demo.CalibratedHKTypeT;
use type Demo.CalibratedHKTypeT;
use type Demo.CalibratedHKTypeT;
use type Demo.CalibratedHKTypeT;
use type Demo.CalibratedHKTypeT;
use type Demo.CalibratedHKTypeT;
use type Demo.ModeTypeT;
use type CcsdsSoisSubnetwork.OctetTypeT;
use type Demo.ModeTypeT;
use type CcsdsSoisSubnetwork.OctetTypeT;
use type Demo.EventTypeT;
use type Demo.EventTypeTypeT;
use type Demo.EventDataTypeT;
use type Demo.ExtendedModeTypeT;
use type Demo.ExtendedStatusTypeT;
use type Demo.QueryCountTypeT;
use type Demo.StatusTypeT;
use type Demo.StatusFlag1TypeT;
use type Demo.StatusFlag2TypeT;
use type Demo.OpCountTypeT;
use type Demo.TelemetrySet1TypeT;
use type Demo.HKTypeT;
use type Demo.HKTypeT;
use type Demo.TelemetrySet2TypeT;
use type Demo.HKTypeT;
use type Demo.HKTypeT;
use type Demo.CommandStatusTypeT;
use type Demo.CommandStatusTypeT;
use type Demo.EventTypeT;
use type Demo.EventTypeTypeT;
use type Demo.EventDataTypeT;
use type Demo.ExtendedModeTypeT;
use type Demo.ExtendedStatusTypeT;
use type Demo.QueryCountTypeT;
use type Demo.StatusTypeT;
use type Demo.StatusFlag1TypeT;
use type Demo.StatusFlag2TypeT;
use type Demo.OpCountTypeT;
use type Demo.TelemetrySet1TypeT;
use type Demo.HKTypeT;
use type Demo.HKTypeT;
use type Demo.TelemetrySet2TypeT;
use type Demo.HKTypeT;
use type Demo.HKTypeT;
use type Demo.CommandStatusTypeT;
use type Demo.CommandStatusTypeT;
use type Demo.ModeTypeT;
use type CcsdsSoisSubnetwork.OctetTypeT;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;


PACKAGE BODY DemoInterfaces with SPARK_Mode IS




function DeviceAccessInterfaceUpType_updateParameter_Equal(val1, val2: in DeviceAccessInterfaceUpType_updateParameter)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when deviceEvent_PRESENT =>
                ret := Demo.EventTypeT_Equal(val1.deviceEvent, val2.deviceEvent);
            when updateParameter_extendedMode_PRESENT =>
                ret := (val1.extendedMode = val2.extendedMode);
            when updateParameter_extendedStatus_PRESENT =>
                ret := (val1.extendedStatus = val2.extendedStatus);
            when updateParameter_queryCount_PRESENT =>
                ret := (val1.queryCount = val2.queryCount);
            when updateParameter_status_PRESENT =>
                ret := Demo.StatusTypeT_Equal(val1.status, val2.status);
            when telemetrySet1_PRESENT =>
                ret := Demo.TelemetrySet1TypeT_Equal(val1.telemetrySet1, val2.telemetrySet1);
            when telemetrySet2_PRESENT =>
                ret := Demo.TelemetrySet2TypeT_Equal(val1.telemetrySet2, val2.telemetrySet2);
        end case;
    end if;
	return ret;

end DeviceAccessInterfaceUpType_updateParameter_Equal;

function DeviceAccessInterfaceUpType_replyToCommand_setMode_Equal(val1, val2: in DeviceAccessInterfaceUpType_replyToCommand_setMode)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.status = val2.status);

	return ret;

end DeviceAccessInterfaceUpType_replyToCommand_setMode_Equal;

function DeviceAccessInterfaceUpType_replyToCommand_setUserData_Equal(val1, val2: in DeviceAccessInterfaceUpType_replyToCommand_setUserData)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.status = val2.status);

	return ret;

end DeviceAccessInterfaceUpType_replyToCommand_setUserData_Equal;

function DeviceAccessInterfaceUpType_replyToCommand_Equal(val1, val2: in DeviceAccessInterfaceUpType_replyToCommand)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when replyToCommand_setMode_PRESENT =>
                ret := (val1.setMode.status = val2.setMode.status);

            when replyToCommand_setUserData_PRESENT =>
                ret := (val1.setUserData.status = val2.setUserData.status);

        end case;
    end if;
	return ret;

end DeviceAccessInterfaceUpType_replyToCommand_Equal;

function DeviceAccessInterfaceUpType_Equal(val1, val2: in DeviceAccessInterfaceUpType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when DeviceAccessInterfaceUpType_updateParameter_PRESENT =>
                ret := val1.updateParameter.kind = val2.updateParameter.kind;
                if ret then
                    case val1.updateParameter.kind is
                        when deviceEvent_PRESENT =>
                            ret := Demo.EventTypeT_Equal(val1.updateParameter.deviceEvent, val2.updateParameter.deviceEvent);
                        when updateParameter_extendedMode_PRESENT =>
                            ret := (val1.updateParameter.extendedMode = val2.updateParameter.extendedMode);
                        when updateParameter_extendedStatus_PRESENT =>
                            ret := (val1.updateParameter.extendedStatus = val2.updateParameter.extendedStatus);
                        when updateParameter_queryCount_PRESENT =>
                            ret := (val1.updateParameter.queryCount = val2.updateParameter.queryCount);
                        when updateParameter_status_PRESENT =>
                            ret := Demo.StatusTypeT_Equal(val1.updateParameter.status, val2.updateParameter.status);
                        when telemetrySet1_PRESENT =>
                            ret := Demo.TelemetrySet1TypeT_Equal(val1.updateParameter.telemetrySet1, val2.updateParameter.telemetrySet1);
                        when telemetrySet2_PRESENT =>
                            ret := Demo.TelemetrySet2TypeT_Equal(val1.updateParameter.telemetrySet2, val2.updateParameter.telemetrySet2);
                    end case;
                end if;
            when DeviceAccessInterfaceUpType_replyToCommand_PRESENT =>
                ret := val1.replyToCommand.kind = val2.replyToCommand.kind;
                if ret then
                    case val1.replyToCommand.kind is
                        when replyToCommand_setMode_PRESENT =>
                            ret := (val1.replyToCommand.setMode.status = val2.replyToCommand.setMode.status);

                        when replyToCommand_setUserData_PRESENT =>
                            ret := (val1.replyToCommand.setUserData.status = val2.replyToCommand.setUserData.status);

                    end case;
                end if;
        end case;
    end if;
	return ret;

end DeviceAccessInterfaceUpType_Equal;

function DeviceAccessInterfaceUpType_updateParameter_Init return DeviceAccessInterfaceUpType_updateParameter
is
    val: DeviceAccessInterfaceUpType_updateParameter;
begin
    --set deviceEvent 
    declare
        deviceEvent_tmp:Demo.EventTypeT;
    begin
        deviceEvent_tmp := Demo.EventTypeT_Init;
        val := DeviceAccessInterfaceUpType_updateParameter'(kind => deviceEvent_PRESENT, deviceEvent => deviceEvent_tmp);
    end;
    return val;
end DeviceAccessInterfaceUpType_updateParameter_Init;
function DeviceAccessInterfaceUpType_replyToCommand_setMode_Init return DeviceAccessInterfaceUpType_replyToCommand_setMode
is
    val: DeviceAccessInterfaceUpType_replyToCommand_setMode;
begin

    --set status 
    val.status := Demo.CommandStatusTypeT_Init;
    return val;
end DeviceAccessInterfaceUpType_replyToCommand_setMode_Init;
function DeviceAccessInterfaceUpType_replyToCommand_setUserData_Init return DeviceAccessInterfaceUpType_replyToCommand_setUserData
is
    val: DeviceAccessInterfaceUpType_replyToCommand_setUserData;
begin

    --set status 
    val.status := Demo.CommandStatusTypeT_Init;
    return val;
end DeviceAccessInterfaceUpType_replyToCommand_setUserData_Init;
function DeviceAccessInterfaceUpType_replyToCommand_Init return DeviceAccessInterfaceUpType_replyToCommand
is
    val: DeviceAccessInterfaceUpType_replyToCommand;
begin
    --set setMode 
    declare
        setMode_tmp:DeviceAccessInterfaceUpType_replyToCommand_setMode;
    begin
        val.setMode := DeviceAccessInterfaceUpType_replyToCommand_setMode_Init;
        val := DeviceAccessInterfaceUpType_replyToCommand'(kind => replyToCommand_setMode_PRESENT, setMode => setMode_tmp);
    end;
    return val;
end DeviceAccessInterfaceUpType_replyToCommand_Init;
function DeviceAccessInterfaceUpType_Init return DeviceAccessInterfaceUpType
is
    val: DeviceAccessInterfaceUpType;
begin
    --set updateParameter 
    declare
        updateParameter_tmp:DeviceAccessInterfaceUpType_updateParameter;
    begin
        val.updateParameter := DeviceAccessInterfaceUpType_updateParameter_Init;
        val := DeviceAccessInterfaceUpType'(kind => DeviceAccessInterfaceUpType_updateParameter_PRESENT, updateParameter => updateParameter_tmp);
    end;
    return val;
end DeviceAccessInterfaceUpType_Init;

FUNCTION DeviceAccessInterfaceUpType_IsConstraintValid(val : in DeviceAccessInterfaceUpType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    case val.kind is
        WHEN DeviceAccessInterfaceUpType_updateParameter_PRESENT =>
            case val.updateParameter.kind is
                WHEN deviceEvent_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((((val.updateParameter.deviceEvent.typeKeyword = Demo.event1)) OR ((val.updateParameter.deviceEvent.typeKeyword = Demo.event2)))) OR ((val.updateParameter.deviceEvent.typeKeyword = Demo.event3))), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_DEVICEEVENT_TYPEKEYWORD);
                    if ret.Success then
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.updateParameter.deviceEvent.data_value <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_DEVICEEVENT_DATA_VALUE);
                    end if;

                WHEN updateParameter_extendedMode_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.updateParameter.extendedMode <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_EXTENDEDMODE);
                WHEN updateParameter_extendedStatus_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.updateParameter.extendedStatus <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_EXTENDEDSTATUS);
                WHEN updateParameter_queryCount_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.updateParameter.queryCount <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_QUERYCOUNT);
                WHEN updateParameter_status_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_STATUS_STATUSFLAG1);
                    if ret.Success then
                        ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_STATUS_STATUSFLAG2);
                        if ret.Success then
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.updateParameter.status.opCount <= 39), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_STATUS_OPCOUNT);
                        end if;

                    end if;

                WHEN telemetrySet1_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.updateParameter.telemetrySet1.hk1 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_TELEMETRYSET1_HK1);
                    if ret.Success then
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.updateParameter.telemetrySet1.hk2 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_TELEMETRYSET1_HK2);
                    end if;

                WHEN telemetrySet2_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.updateParameter.telemetrySet2.hk3 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_TELEMETRYSET2_HK3);
                    if ret.Success then
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.updateParameter.telemetrySet2.hk4 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_UPDATEPARAMETER_TELEMETRYSET2_HK4);
                    end if;

            end case;
        WHEN DeviceAccessInterfaceUpType_replyToCommand_PRESENT =>
            case val.replyToCommand.kind is
                WHEN replyToCommand_setMode_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.replyToCommand.setMode.status <= 65535), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_REPLYTOCOMMAND_SETMODE_STATUS);
                WHEN replyToCommand_setUserData_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.replyToCommand.setUserData.status <= 65535), ErrorCode => ERR_DEVICEACCESSINTERFACEUPTYPE_REPLYTOCOMMAND_SETUSERDATA_STATUS);
            end case;
    end case;
    RETURN ret;
END DeviceAccessInterfaceUpType_IsConstraintValid;



function DeviceFunctionalInterfaceUpType_updateParameter_Equal(val1, val2: in DeviceFunctionalInterfaceUpType_updateParameter)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when hk1_PRESENT =>
                ret := (adaasn1rtl.Asn1Real_Equal(val1.hk1, val2.hk1));
            when hk2_PRESENT =>
                ret := (adaasn1rtl.Asn1Real_Equal(val1.hk2, val2.hk2));
        end case;
    end if;
	return ret;

end DeviceFunctionalInterfaceUpType_updateParameter_Equal;

function DeviceFunctionalInterfaceUpType_Equal(val1, val2: in DeviceFunctionalInterfaceUpType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when DeviceFunctionalInterfaceUpType_updateParameter_PRESENT =>
                ret := val1.updateParameter.kind = val2.updateParameter.kind;
                if ret then
                    case val1.updateParameter.kind is
                        when hk1_PRESENT =>
                            ret := (adaasn1rtl.Asn1Real_Equal(val1.updateParameter.hk1, val2.updateParameter.hk1));
                        when hk2_PRESENT =>
                            ret := (adaasn1rtl.Asn1Real_Equal(val1.updateParameter.hk2, val2.updateParameter.hk2));
                    end case;
                end if;
        end case;
    end if;
	return ret;

end DeviceFunctionalInterfaceUpType_Equal;

function DeviceFunctionalInterfaceUpType_updateParameter_Init return DeviceFunctionalInterfaceUpType_updateParameter
is
    val: DeviceFunctionalInterfaceUpType_updateParameter;
begin
    --set hk1 
    declare
        hk1_tmp:Demo.CalibratedHKTypeT;
    begin
        hk1_tmp := Demo.CalibratedHKTypeT_Init;
        val := DeviceFunctionalInterfaceUpType_updateParameter'(kind => hk1_PRESENT, hk1 => hk1_tmp);
    end;
    return val;
end DeviceFunctionalInterfaceUpType_updateParameter_Init;
function DeviceFunctionalInterfaceUpType_Init return DeviceFunctionalInterfaceUpType
is
    val: DeviceFunctionalInterfaceUpType;
begin
    --set updateParameter 
    declare
        updateParameter_tmp:DeviceFunctionalInterfaceUpType_updateParameter;
    begin
        val.updateParameter := DeviceFunctionalInterfaceUpType_updateParameter_Init;
        val := DeviceFunctionalInterfaceUpType'(kind => DeviceFunctionalInterfaceUpType_updateParameter_PRESENT, updateParameter => updateParameter_tmp);
    end;
    return val;
end DeviceFunctionalInterfaceUpType_Init;

FUNCTION DeviceFunctionalInterfaceUpType_IsConstraintValid(val : in DeviceFunctionalInterfaceUpType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    case val.kind is
        WHEN DeviceFunctionalInterfaceUpType_updateParameter_PRESENT =>
            case val.updateParameter.kind is
                WHEN hk1_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => ((-3.40282346638528860000E+038 <= val.updateParameter.hk1) AND (val.updateParameter.hk1 <= 3.40282346638528860000E+038)), ErrorCode => ERR_DEVICEFUNCTIONALINTERFACEUPTYPE_UPDATEPARAMETER_HK1);
                WHEN hk2_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => ((-3.40282346638528860000E+038 <= val.updateParameter.hk2) AND (val.updateParameter.hk2 <= 3.40282346638528860000E+038)), ErrorCode => ERR_DEVICEFUNCTIONALINTERFACEUPTYPE_UPDATEPARAMETER_HK2);
            end case;
    end case;
    RETURN ret;
END DeviceFunctionalInterfaceUpType_IsConstraintValid;



function DeviceFunctionalInterfaceProviderType_Equal(val1, val2: in DeviceFunctionalInterfaceProviderType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := DeviceFunctionalInterfaceUpType_Equal(val1.outputData, val2.outputData);

	return ret;

end DeviceFunctionalInterfaceProviderType_Equal;

function DeviceFunctionalInterfaceProviderType_Init return DeviceFunctionalInterfaceProviderType
is
    val: DeviceFunctionalInterfaceProviderType;
begin

    --set outputData 
    val.outputData := DeviceFunctionalInterfaceUpType_Init;
    return val;
end DeviceFunctionalInterfaceProviderType_Init;

FUNCTION DeviceFunctionalInterfaceProviderType_IsConstraintValid(val : in DeviceFunctionalInterfaceProviderType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    case val.outputData.kind is
        WHEN DeviceFunctionalInterfaceUpType_updateParameter_PRESENT =>
            case val.outputData.updateParameter.kind is
                WHEN hk1_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => ((-3.40282346638528860000E+038 <= val.outputData.updateParameter.hk1) AND (val.outputData.updateParameter.hk1 <= 3.40282346638528860000E+038)), ErrorCode => ERR_DEVICEFUNCTIONALINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_HK1);
                WHEN hk2_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => ((-3.40282346638528860000E+038 <= val.outputData.updateParameter.hk2) AND (val.outputData.updateParameter.hk2 <= 3.40282346638528860000E+038)), ErrorCode => ERR_DEVICEFUNCTIONALINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_HK2);
            end case;
    end case;
    RETURN ret;
END DeviceFunctionalInterfaceProviderType_IsConstraintValid;



function DeviceFunctionalInterfaceClientType_Equal(val1, val2: in DeviceFunctionalInterfaceClientType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.inputReady = val2.inputReady);

    if ret then
        ret := DeviceFunctionalInterfaceUpType_Equal(val1.inputData, val2.inputData);

    end if;
	return ret;

end DeviceFunctionalInterfaceClientType_Equal;

function DeviceFunctionalInterfaceClientType_Init return DeviceFunctionalInterfaceClientType
is
    val: DeviceFunctionalInterfaceClientType;
begin

    --set inputReady 
    val.inputReady := FALSE;
    --set inputData 
    val.inputData := DeviceFunctionalInterfaceUpType_Init;
    return val;
end DeviceFunctionalInterfaceClientType_Init;

FUNCTION DeviceFunctionalInterfaceClientType_IsConstraintValid(val : in DeviceFunctionalInterfaceClientType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEVICEFUNCTIONALINTERFACECLIENTTYPE_INPUTREADY);
    if ret.Success then
        case val.inputData.kind is
            WHEN DeviceFunctionalInterfaceUpType_updateParameter_PRESENT =>
                case val.inputData.updateParameter.kind is
                    WHEN hk1_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => ((-3.40282346638528860000E+038 <= val.inputData.updateParameter.hk1) AND (val.inputData.updateParameter.hk1 <= 3.40282346638528860000E+038)), ErrorCode => ERR_DEVICEFUNCTIONALINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_HK1);
                    WHEN hk2_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => ((-3.40282346638528860000E+038 <= val.inputData.updateParameter.hk2) AND (val.inputData.updateParameter.hk2 <= 3.40282346638528860000E+038)), ErrorCode => ERR_DEVICEFUNCTIONALINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_HK2);
                end case;
        end case;
    end if;

    RETURN ret;
END DeviceFunctionalInterfaceClientType_IsConstraintValid;



function DeviceAccessInterfaceDownType_getParameter_extendedMode_Equal(val1, val2: in DeviceAccessInterfaceDownType_getParameter_extendedMode)
    return Boolean 
is
begin
	return val1 = val2;

end DeviceAccessInterfaceDownType_getParameter_extendedMode_Equal;

function DeviceAccessInterfaceDownType_getParameter_extendedStatus_Equal(val1, val2: in DeviceAccessInterfaceDownType_getParameter_extendedStatus)
    return Boolean 
is
begin
	return val1 = val2;

end DeviceAccessInterfaceDownType_getParameter_extendedStatus_Equal;

function DeviceAccessInterfaceDownType_getParameter_queryCount_Equal(val1, val2: in DeviceAccessInterfaceDownType_getParameter_queryCount)
    return Boolean 
is
begin
	return val1 = val2;

end DeviceAccessInterfaceDownType_getParameter_queryCount_Equal;

function DeviceAccessInterfaceDownType_getParameter_status_Equal(val1, val2: in DeviceAccessInterfaceDownType_getParameter_status)
    return Boolean 
is
begin
	return val1 = val2;

end DeviceAccessInterfaceDownType_getParameter_status_Equal;

function DeviceAccessInterfaceDownType_getParameter_Equal(val1, val2: in DeviceAccessInterfaceDownType_getParameter)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when getParameter_extendedMode_PRESENT =>
                ret := (val1.extendedMode = val2.extendedMode);
            when getParameter_extendedStatus_PRESENT =>
                ret := (val1.extendedStatus = val2.extendedStatus);
            when getParameter_queryCount_PRESENT =>
                ret := (val1.queryCount = val2.queryCount);
            when getParameter_status_PRESENT =>
                ret := (val1.status = val2.status);
        end case;
    end if;
	return ret;

end DeviceAccessInterfaceDownType_getParameter_Equal;

function DeviceAccessInterfaceDownType_sendCommand_setMode_Equal(val1, val2: in DeviceAccessInterfaceDownType_sendCommand_setMode)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.mode = val2.mode);

	return ret;

end DeviceAccessInterfaceDownType_sendCommand_setMode_Equal;

function DeviceAccessInterfaceDownType_sendCommand_setUserData_Equal(val1, val2: in DeviceAccessInterfaceDownType_sendCommand_setUserData)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.data_value = val2.data_value);

	return ret;

end DeviceAccessInterfaceDownType_sendCommand_setUserData_Equal;

function DeviceAccessInterfaceDownType_sendCommand_Equal(val1, val2: in DeviceAccessInterfaceDownType_sendCommand)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when sendCommand_setMode_PRESENT =>
                ret := (val1.setMode.mode = val2.setMode.mode);

            when sendCommand_setUserData_PRESENT =>
                ret := (val1.setUserData.data_value = val2.setUserData.data_value);

        end case;
    end if;
	return ret;

end DeviceAccessInterfaceDownType_sendCommand_Equal;

function DeviceAccessInterfaceDownType_Equal(val1, val2: in DeviceAccessInterfaceDownType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when getParameter_PRESENT =>
                ret := val1.getParameter.kind = val2.getParameter.kind;
                if ret then
                    case val1.getParameter.kind is
                        when getParameter_extendedMode_PRESENT =>
                            ret := (val1.getParameter.extendedMode = val2.getParameter.extendedMode);
                        when getParameter_extendedStatus_PRESENT =>
                            ret := (val1.getParameter.extendedStatus = val2.getParameter.extendedStatus);
                        when getParameter_queryCount_PRESENT =>
                            ret := (val1.getParameter.queryCount = val2.getParameter.queryCount);
                        when getParameter_status_PRESENT =>
                            ret := (val1.getParameter.status = val2.getParameter.status);
                    end case;
                end if;
            when DeviceAccessInterfaceDownType_sendCommand_PRESENT =>
                ret := val1.sendCommand.kind = val2.sendCommand.kind;
                if ret then
                    case val1.sendCommand.kind is
                        when sendCommand_setMode_PRESENT =>
                            ret := (val1.sendCommand.setMode.mode = val2.sendCommand.setMode.mode);

                        when sendCommand_setUserData_PRESENT =>
                            ret := (val1.sendCommand.setUserData.data_value = val2.sendCommand.setUserData.data_value);

                    end case;
                end if;
        end case;
    end if;
	return ret;

end DeviceAccessInterfaceDownType_Equal;

function DeviceAccessInterfaceDownType_getParameter_extendedMode_Init return DeviceAccessInterfaceDownType_getParameter_extendedMode
is
    val: DeviceAccessInterfaceDownType_getParameter_extendedMode;
begin
    val := 0;
    return val;
end DeviceAccessInterfaceDownType_getParameter_extendedMode_Init;
function DeviceAccessInterfaceDownType_getParameter_extendedStatus_Init return DeviceAccessInterfaceDownType_getParameter_extendedStatus
is
    val: DeviceAccessInterfaceDownType_getParameter_extendedStatus;
begin
    val := 0;
    return val;
end DeviceAccessInterfaceDownType_getParameter_extendedStatus_Init;
function DeviceAccessInterfaceDownType_getParameter_queryCount_Init return DeviceAccessInterfaceDownType_getParameter_queryCount
is
    val: DeviceAccessInterfaceDownType_getParameter_queryCount;
begin
    val := 0;
    return val;
end DeviceAccessInterfaceDownType_getParameter_queryCount_Init;
function DeviceAccessInterfaceDownType_getParameter_status_Init return DeviceAccessInterfaceDownType_getParameter_status
is
    val: DeviceAccessInterfaceDownType_getParameter_status;
begin
    val := 0;
    return val;
end DeviceAccessInterfaceDownType_getParameter_status_Init;
function DeviceAccessInterfaceDownType_getParameter_Init return DeviceAccessInterfaceDownType_getParameter
is
    val: DeviceAccessInterfaceDownType_getParameter;
begin
    --set extendedMode 
    declare
        extendedMode_tmp:DeviceAccessInterfaceDownType_getParameter_extendedMode;
    begin
        val.extendedMode := DeviceAccessInterfaceDownType_getParameter_extendedMode_Init;
        val := DeviceAccessInterfaceDownType_getParameter'(kind => getParameter_extendedMode_PRESENT, extendedMode => extendedMode_tmp);
    end;
    return val;
end DeviceAccessInterfaceDownType_getParameter_Init;
function DeviceAccessInterfaceDownType_sendCommand_setMode_Init return DeviceAccessInterfaceDownType_sendCommand_setMode
is
    val: DeviceAccessInterfaceDownType_sendCommand_setMode;
begin

    --set mode 
    val.mode := Demo.ModeTypeT_Init;
    return val;
end DeviceAccessInterfaceDownType_sendCommand_setMode_Init;
function DeviceAccessInterfaceDownType_sendCommand_setUserData_Init return DeviceAccessInterfaceDownType_sendCommand_setUserData
is
    val: DeviceAccessInterfaceDownType_sendCommand_setUserData;
begin

    --set data_value 
    val.data_value := CcsdsSoisSubnetwork.OctetTypeT_Init;
    return val;
end DeviceAccessInterfaceDownType_sendCommand_setUserData_Init;
function DeviceAccessInterfaceDownType_sendCommand_Init return DeviceAccessInterfaceDownType_sendCommand
is
    val: DeviceAccessInterfaceDownType_sendCommand;
begin
    --set setMode 
    declare
        setMode_tmp:DeviceAccessInterfaceDownType_sendCommand_setMode;
    begin
        val.setMode := DeviceAccessInterfaceDownType_sendCommand_setMode_Init;
        val := DeviceAccessInterfaceDownType_sendCommand'(kind => sendCommand_setMode_PRESENT, setMode => setMode_tmp);
    end;
    return val;
end DeviceAccessInterfaceDownType_sendCommand_Init;
function DeviceAccessInterfaceDownType_Init return DeviceAccessInterfaceDownType
is
    val: DeviceAccessInterfaceDownType;
begin
    --set getParameter 
    declare
        getParameter_tmp:DeviceAccessInterfaceDownType_getParameter;
    begin
        val.getParameter := DeviceAccessInterfaceDownType_getParameter_Init;
        val := DeviceAccessInterfaceDownType'(kind => getParameter_PRESENT, getParameter => getParameter_tmp);
    end;
    return val;
end DeviceAccessInterfaceDownType_Init;

FUNCTION DeviceAccessInterfaceDownType_IsConstraintValid(val : in DeviceAccessInterfaceDownType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    case val.kind is
        WHEN getParameter_PRESENT =>
            case val.getParameter.kind is
                WHEN getParameter_extendedMode_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.getParameter.extendedMode = 0), ErrorCode => ERR_DEVICEACCESSINTERFACEDOWNTYPE_GETPARAMETER_EXTENDEDMODE);
                WHEN getParameter_extendedStatus_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.getParameter.extendedStatus = 0), ErrorCode => ERR_DEVICEACCESSINTERFACEDOWNTYPE_GETPARAMETER_EXTENDEDSTATUS);
                WHEN getParameter_queryCount_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.getParameter.queryCount = 0), ErrorCode => ERR_DEVICEACCESSINTERFACEDOWNTYPE_GETPARAMETER_QUERYCOUNT);
                WHEN getParameter_status_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.getParameter.status = 0), ErrorCode => ERR_DEVICEACCESSINTERFACEDOWNTYPE_GETPARAMETER_STATUS);
            end case;
        WHEN DeviceAccessInterfaceDownType_sendCommand_PRESENT =>
            case val.sendCommand.kind is
                WHEN sendCommand_setMode_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((((val.sendCommand.setMode.mode = Demo.reset)) OR ((val.sendCommand.setMode.mode = Demo.doALittleBitOfStuff)))) OR ((val.sendCommand.setMode.mode = Demo.doLotsOfStuff)))) OR ((val.sendCommand.setMode.mode = Demo.doTonnesOfStuffBadly)))) OR ((val.sendCommand.setMode.mode = Demo.revealABugAndMalfunction))), ErrorCode => ERR_DEVICEACCESSINTERFACEDOWNTYPE_SENDCOMMAND_SETMODE_MODE);
                WHEN sendCommand_setUserData_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.sendCommand.setUserData.data_value <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEDOWNTYPE_SENDCOMMAND_SETUSERDATA_DATA_VALUE);
            end case;
    end case;
    RETURN ret;
END DeviceAccessInterfaceDownType_IsConstraintValid;



function DeviceAccessInterfaceProviderType_Equal(val1, val2: in DeviceAccessInterfaceProviderType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.inputReady = val2.inputReady);

    if ret then
        ret := DeviceAccessInterfaceDownType_Equal(val1.inputData, val2.inputData);

        if ret then
            ret := DeviceAccessInterfaceUpType_Equal(val1.outputData, val2.outputData);

        end if;
    end if;
	return ret;

end DeviceAccessInterfaceProviderType_Equal;

function DeviceAccessInterfaceProviderType_Init return DeviceAccessInterfaceProviderType
is
    val: DeviceAccessInterfaceProviderType;
begin

    --set inputReady 
    val.inputReady := FALSE;
    --set inputData 
    val.inputData := DeviceAccessInterfaceDownType_Init;
    --set outputData 
    val.outputData := DeviceAccessInterfaceUpType_Init;
    return val;
end DeviceAccessInterfaceProviderType_Init;

FUNCTION DeviceAccessInterfaceProviderType_IsConstraintValid(val : in DeviceAccessInterfaceProviderType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_INPUTREADY);
    if ret.Success then
        case val.inputData.kind is
            WHEN getParameter_PRESENT =>
                case val.inputData.getParameter.kind is
                    WHEN getParameter_extendedMode_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.getParameter.extendedMode = 0), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_INPUTDATA_GETPARAMETER_EXTENDEDMODE);
                    WHEN getParameter_extendedStatus_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.getParameter.extendedStatus = 0), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_INPUTDATA_GETPARAMETER_EXTENDEDSTATUS);
                    WHEN getParameter_queryCount_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.getParameter.queryCount = 0), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_INPUTDATA_GETPARAMETER_QUERYCOUNT);
                    WHEN getParameter_status_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.getParameter.status = 0), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_INPUTDATA_GETPARAMETER_STATUS);
                end case;
            WHEN DeviceAccessInterfaceDownType_sendCommand_PRESENT =>
                case val.inputData.sendCommand.kind is
                    WHEN sendCommand_setMode_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((((val.inputData.sendCommand.setMode.mode = Demo.reset)) OR ((val.inputData.sendCommand.setMode.mode = Demo.doALittleBitOfStuff)))) OR ((val.inputData.sendCommand.setMode.mode = Demo.doLotsOfStuff)))) OR ((val.inputData.sendCommand.setMode.mode = Demo.doTonnesOfStuffBadly)))) OR ((val.inputData.sendCommand.setMode.mode = Demo.revealABugAndMalfunction))), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_INPUTDATA_SENDCOMMAND_SETMODE_MODE);
                    WHEN sendCommand_setUserData_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.sendCommand.setUserData.data_value <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_INPUTDATA_SENDCOMMAND_SETUSERDATA_DATA_VALUE);
                end case;
        end case;
        if ret.Success then
            case val.outputData.kind is
                WHEN DeviceAccessInterfaceUpType_updateParameter_PRESENT =>
                    case val.outputData.updateParameter.kind is
                        WHEN deviceEvent_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((((val.outputData.updateParameter.deviceEvent.typeKeyword = Demo.event1)) OR ((val.outputData.updateParameter.deviceEvent.typeKeyword = Demo.event2)))) OR ((val.outputData.updateParameter.deviceEvent.typeKeyword = Demo.event3))), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_DEVICEEVENT_TYPEKEYWORD);
                            if ret.Success then
                                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.updateParameter.deviceEvent.data_value <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_DEVICEEVENT_DATA_VALUE);
                            end if;

                        WHEN updateParameter_extendedMode_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.updateParameter.extendedMode <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_EXTENDEDMODE);
                        WHEN updateParameter_extendedStatus_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.updateParameter.extendedStatus <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_EXTENDEDSTATUS);
                        WHEN updateParameter_queryCount_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.updateParameter.queryCount <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_QUERYCOUNT);
                        WHEN updateParameter_status_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_STATUS_STATUSFLAG1);
                            if ret.Success then
                                ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_STATUS_STATUSFLAG2);
                                if ret.Success then
                                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.updateParameter.status.opCount <= 39), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_STATUS_OPCOUNT);
                                end if;

                            end if;

                        WHEN telemetrySet1_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.updateParameter.telemetrySet1.hk1 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_TELEMETRYSET1_HK1);
                            if ret.Success then
                                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.updateParameter.telemetrySet1.hk2 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_TELEMETRYSET1_HK2);
                            end if;

                        WHEN telemetrySet2_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.updateParameter.telemetrySet2.hk3 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_TELEMETRYSET2_HK3);
                            if ret.Success then
                                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.updateParameter.telemetrySet2.hk4 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_UPDATEPARAMETER_TELEMETRYSET2_HK4);
                            end if;

                    end case;
                WHEN DeviceAccessInterfaceUpType_replyToCommand_PRESENT =>
                    case val.outputData.replyToCommand.kind is
                        WHEN replyToCommand_setMode_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.replyToCommand.setMode.status <= 65535), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_REPLYTOCOMMAND_SETMODE_STATUS);
                        WHEN replyToCommand_setUserData_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.replyToCommand.setUserData.status <= 65535), ErrorCode => ERR_DEVICEACCESSINTERFACEPROVIDERTYPE_OUTPUTDATA_REPLYTOCOMMAND_SETUSERDATA_STATUS);
                    end case;
            end case;
        end if;

    end if;

    RETURN ret;
END DeviceAccessInterfaceProviderType_IsConstraintValid;



function DeviceAccessInterfaceClientType_Equal(val1, val2: in DeviceAccessInterfaceClientType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.inputReady = val2.inputReady);

    if ret then
        ret := DeviceAccessInterfaceUpType_Equal(val1.inputData, val2.inputData);

        if ret then
            ret := DeviceAccessInterfaceDownType_Equal(val1.outputData, val2.outputData);

        end if;
    end if;
	return ret;

end DeviceAccessInterfaceClientType_Equal;

function DeviceAccessInterfaceClientType_Init return DeviceAccessInterfaceClientType
is
    val: DeviceAccessInterfaceClientType;
begin

    --set inputReady 
    val.inputReady := FALSE;
    --set inputData 
    val.inputData := DeviceAccessInterfaceUpType_Init;
    --set outputData 
    val.outputData := DeviceAccessInterfaceDownType_Init;
    return val;
end DeviceAccessInterfaceClientType_Init;

FUNCTION DeviceAccessInterfaceClientType_IsConstraintValid(val : in DeviceAccessInterfaceClientType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTREADY);
    if ret.Success then
        case val.inputData.kind is
            WHEN DeviceAccessInterfaceUpType_updateParameter_PRESENT =>
                case val.inputData.updateParameter.kind is
                    WHEN deviceEvent_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((((val.inputData.updateParameter.deviceEvent.typeKeyword = Demo.event1)) OR ((val.inputData.updateParameter.deviceEvent.typeKeyword = Demo.event2)))) OR ((val.inputData.updateParameter.deviceEvent.typeKeyword = Demo.event3))), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_DEVICEEVENT_TYPEKEYWORD);
                        if ret.Success then
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.updateParameter.deviceEvent.data_value <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_DEVICEEVENT_DATA_VALUE);
                        end if;

                    WHEN updateParameter_extendedMode_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.updateParameter.extendedMode <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_EXTENDEDMODE);
                    WHEN updateParameter_extendedStatus_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.updateParameter.extendedStatus <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_EXTENDEDSTATUS);
                    WHEN updateParameter_queryCount_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.updateParameter.queryCount <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_QUERYCOUNT);
                    WHEN updateParameter_status_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_STATUS_STATUSFLAG1);
                        if ret.Success then
                            ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_STATUS_STATUSFLAG2);
                            if ret.Success then
                                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.updateParameter.status.opCount <= 39), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_STATUS_OPCOUNT);
                            end if;

                        end if;

                    WHEN telemetrySet1_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.updateParameter.telemetrySet1.hk1 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_TELEMETRYSET1_HK1);
                        if ret.Success then
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.updateParameter.telemetrySet1.hk2 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_TELEMETRYSET1_HK2);
                        end if;

                    WHEN telemetrySet2_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.updateParameter.telemetrySet2.hk3 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_TELEMETRYSET2_HK3);
                        if ret.Success then
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.updateParameter.telemetrySet2.hk4 <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_UPDATEPARAMETER_TELEMETRYSET2_HK4);
                        end if;

                end case;
            WHEN DeviceAccessInterfaceUpType_replyToCommand_PRESENT =>
                case val.inputData.replyToCommand.kind is
                    WHEN replyToCommand_setMode_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.replyToCommand.setMode.status <= 65535), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_REPLYTOCOMMAND_SETMODE_STATUS);
                    WHEN replyToCommand_setUserData_PRESENT =>
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.inputData.replyToCommand.setUserData.status <= 65535), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_INPUTDATA_REPLYTOCOMMAND_SETUSERDATA_STATUS);
                end case;
        end case;
        if ret.Success then
            case val.outputData.kind is
                WHEN getParameter_PRESENT =>
                    case val.outputData.getParameter.kind is
                        WHEN getParameter_extendedMode_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.getParameter.extendedMode = 0), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_OUTPUTDATA_GETPARAMETER_EXTENDEDMODE);
                        WHEN getParameter_extendedStatus_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.getParameter.extendedStatus = 0), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_OUTPUTDATA_GETPARAMETER_EXTENDEDSTATUS);
                        WHEN getParameter_queryCount_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.getParameter.queryCount = 0), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_OUTPUTDATA_GETPARAMETER_QUERYCOUNT);
                        WHEN getParameter_status_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.getParameter.status = 0), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_OUTPUTDATA_GETPARAMETER_STATUS);
                    end case;
                WHEN DeviceAccessInterfaceDownType_sendCommand_PRESENT =>
                    case val.outputData.sendCommand.kind is
                        WHEN sendCommand_setMode_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((((val.outputData.sendCommand.setMode.mode = Demo.reset)) OR ((val.outputData.sendCommand.setMode.mode = Demo.doALittleBitOfStuff)))) OR ((val.outputData.sendCommand.setMode.mode = Demo.doLotsOfStuff)))) OR ((val.outputData.sendCommand.setMode.mode = Demo.doTonnesOfStuffBadly)))) OR ((val.outputData.sendCommand.setMode.mode = Demo.revealABugAndMalfunction))), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_OUTPUTDATA_SENDCOMMAND_SETMODE_MODE);
                        WHEN sendCommand_setUserData_PRESENT =>
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.outputData.sendCommand.setUserData.data_value <= 255), ErrorCode => ERR_DEVICEACCESSINTERFACECLIENTTYPE_OUTPUTDATA_SENDCOMMAND_SETUSERDATA_DATA_VALUE);
                    end case;
            end case;
        end if;

    end if;

    RETURN ret;
END DeviceAccessInterfaceClientType_IsConstraintValid;


 

END DemoInterfaces;