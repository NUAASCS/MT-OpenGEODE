-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;


PACKAGE BODY CcsdsSoisSubnetwork with SPARK_Mode IS




function OctetTypeT_Equal(val1, val2: in OctetTypeT)
    return Boolean 
is
begin
	return val1 = val2;

end OctetTypeT_Equal;

function OctetTypeT_Init return OctetTypeT
is
    val: OctetTypeT;
begin
    val := 0;
    return val;
end OctetTypeT_Init;

FUNCTION OctetTypeT_IsConstraintValid(val : in OctetTypeT) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_OCTETTYPET);
    RETURN ret;
END OctetTypeT_IsConstraintValid;



function MemoryIDTypeT_Equal(val1, val2: in MemoryIDTypeT)
    return Boolean 
is
begin
	return val1 = val2;

end MemoryIDTypeT_Equal;

function MemoryIDTypeT_Init return MemoryIDTypeT
is
    val: MemoryIDTypeT;
begin
    val := 0;
    return val;
end MemoryIDTypeT_Init;

FUNCTION MemoryIDTypeT_IsConstraintValid(val : in MemoryIDTypeT) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 65535), ErrorCode => ERR_MEMORYIDTYPET);
    RETURN ret;
END MemoryIDTypeT_IsConstraintValid;



function StartStopT_Equal(val1, val2: in StartStopT)
    return Boolean 
is
begin
	return val1 = val2;

end StartStopT_Equal;

function StartStopT_Init return StartStopT
is
    val: StartStopT;
begin
    val := start;
    return val;
end StartStopT_Init;

FUNCTION StartStopT_IsConstraintValid(val : in StartStopT) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val = start)) OR ((val = stop))), ErrorCode => ERR_STARTSTOPT);
    RETURN ret;
END StartStopT_IsConstraintValid;



function MemoryAddressTypeT_Equal(val1, val2: in MemoryAddressTypeT)
    return Boolean 
is
begin
	return val1 = val2;

end MemoryAddressTypeT_Equal;

function MemoryAddressTypeT_Init return MemoryAddressTypeT
is
    val: MemoryAddressTypeT;
begin
    val := 0;
    return val;
end MemoryAddressTypeT_Init;

FUNCTION MemoryAddressTypeT_IsConstraintValid(val : in MemoryAddressTypeT) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 4294967296), ErrorCode => ERR_MEMORYADDRESSTYPET);
    RETURN ret;
END MemoryAddressTypeT_IsConstraintValid;


 

END CcsdsSoisSubnetwork;