-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_Dataview with SPARK_Mode
IS


-- TC_Type --------------------------------------------
SUBTYPE TC_Type_apid is adaasn1rtl.Asn1UInt range 0 .. 100;

-- TC_Type_content --------------------------------------------
SUBTYPE TC_Type_content_change_mode_index_range is integer range 0..1;
TYPE TC_Type_content_change_mode IS (safe, operational) with Convention => C;
for TC_Type_content_change_mode use
    (safe => 0, operational => 1);
SUBTYPE TC_Type_content_patch_memory is adaasn1rtl.Asn1UInt range 0 .. 100;


SUBTYPE TC_Type_content_index_range is integer range 0..1;

TYPE TC_Type_content_selection IS (change_mode_PRESENT, patch_memory_PRESENT);
for TC_Type_content_selection use
    (change_mode_PRESENT => 1, patch_memory_PRESENT => 2);
for TC_Type_content_selection'Size use 32;

TYPE TC_Type_content(kind : TC_Type_content_selection:= change_mode_PRESENT) IS 
RECORD
    case kind is
    when change_mode_PRESENT =>
            change_mode: TC_Type_content_change_mode;
    when patch_memory_PRESENT =>
            patch_memory: TC_Type_content_patch_memory;
    end case;
END RECORD;

FOR TC_Type_content USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

TYPE TC_Type IS RECORD 
    apid : TC_Type_apid;
    content : TC_Type_content;
END RECORD;

function TC_Type_apid_Equal(val1, val2: in TC_Type_apid) return Boolean;

function TC_Type_content_change_mode_Equal(val1, val2: in TC_Type_content_change_mode) return Boolean;

function TC_Type_content_patch_memory_Equal(val1, val2: in TC_Type_content_patch_memory) return Boolean;

function TC_Type_content_Equal(val1, val2: in TC_Type_content) return Boolean;

function TC_Type_Equal(val1, val2: in TC_Type) return Boolean;

function TC_Type_apid_Init return TC_Type_apid;
function TC_Type_content_change_mode_Init return TC_Type_content_change_mode;
function TC_Type_content_patch_memory_Init return TC_Type_content_patch_memory;
function TC_Type_content_Init return TC_Type_content;
function TC_Type_Init return TC_Type;

ERR_TC_TYPE_APID:CONSTANT INTEGER := 1; 
ERR_TC_TYPE_CONTENT:CONSTANT INTEGER := 22; 
ERR_TC_TYPE_CONTENT_CHANGE_MODE:CONSTANT INTEGER := 8; 
ERR_TC_TYPE_CONTENT_PATCH_MEMORY:CONSTANT INTEGER := 15; 
FUNCTION TC_Type_IsConstraintValid(val : in TC_Type) return adaasn1rtl.ASN1_RESULT;
-- TM_Type --------------------------------------------
SUBTYPE TM_Type_apid is adaasn1rtl.Asn1UInt range 0 .. 100;


TYPE TM_Type IS RECORD 
    apid : TM_Type_apid;
END RECORD;

function TM_Type_apid_Equal(val1, val2: in TM_Type_apid) return Boolean;

function TM_Type_Equal(val1, val2: in TM_Type) return Boolean;

function TM_Type_apid_Init return TM_Type_apid;
function TM_Type_Init return TM_Type;

ERR_TM_TYPE_APID:CONSTANT INTEGER := 35; 
FUNCTION TM_Type_IsConstraintValid(val : in TM_Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Boolean_Type is adaasn1rtl.Asn1Boolean;


function Boolean_Type_Equal(val1, val2: in Boolean_Type) return Boolean;

function Boolean_Type_Init return Boolean_Type;

ERR_BOOLEAN_TYPE:CONSTANT INTEGER := 48; -- 
FUNCTION Boolean_Type_IsConstraintValid(val : in Boolean_Type) return adaasn1rtl.ASN1_RESULT;

 

private
   --# hide TASTE_Dataview;


END TASTE_Dataview;