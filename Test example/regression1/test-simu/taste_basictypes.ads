-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_BasicTypes with SPARK_Mode
IS


SUBTYPE T_UInt32 is adaasn1rtl.Asn1UInt range 0 .. 4294967295;


function T_UInt32_Equal(val1, val2: in T_UInt32) return Boolean;

function T_UInt32_Init return T_UInt32;

ERR_T_UINT32:CONSTANT INTEGER := 1; -- 
FUNCTION T_UInt32_IsConstraintValid(val : in T_UInt32) return adaasn1rtl.ASN1_RESULT;
SUBTYPE TASTE_Peek_id is adaasn1rtl.Asn1UInt range 0 .. 4294967295;


function TASTE_Peek_id_Equal(val1, val2: in TASTE_Peek_id) return Boolean;

function TASTE_Peek_id_Init return TASTE_Peek_id;

ERR_TASTE_PEEK_ID:CONSTANT INTEGER := 8; -- 
FUNCTION TASTE_Peek_id_IsConstraintValid(val : in TASTE_Peek_id) return adaasn1rtl.ASN1_RESULT;
-- TASTE_Peek_id_list --------------------------------------------
SUBTYPE TASTE_Peek_id_list_index is integer range 1..10;
TYPE TASTE_Peek_id_list_array IS ARRAY (TASTE_Peek_id_list_index) OF TASTE_Peek_id;
SUBTYPE TASTE_Peek_id_list_length_index is integer range 1..10;
TYPE TASTE_Peek_id_list IS  RECORD
    Length : TASTE_Peek_id_list_length_index;
    Data  : TASTE_Peek_id_list_array;
END RECORD;

function TASTE_Peek_id_list_Equal(val1, val2: in TASTE_Peek_id_list) return Boolean;

function TASTE_Peek_id_list_Init return TASTE_Peek_id_list;

ERR_TASTE_PEEK_ID_LIST_ELM:CONSTANT INTEGER := 15; 
ERR_TASTE_PEEK_ID_LIST:CONSTANT INTEGER := 26; 
FUNCTION TASTE_Peek_id_list_IsConstraintValid(val : in TASTE_Peek_id_list) return adaasn1rtl.ASN1_RESULT;
-- FixedIntList --------------------------------------------
SUBTYPE FixedIntList_index is integer range 1..3;
TYPE FixedIntList_array IS ARRAY (FixedIntList_index) OF TASTE_Peek_id;
TYPE FixedIntList IS  RECORD
    Data  : FixedIntList_array;
END RECORD;

function FixedIntList_Equal(val1, val2: in FixedIntList) return Boolean;

function FixedIntList_Init return FixedIntList;

ERR_FIXEDINTLIST_ELM:CONSTANT INTEGER := 33; 
FUNCTION FixedIntList_IsConstraintValid(val : in FixedIntList) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyEnum_index_range is integer range 0..4;
TYPE MyEnum IS (one, two, three, four, five) with Convention => C;
for MyEnum use
    (one => 0, two => 1, three => 2, four => 3, five => 4);

function MyEnum_Equal(val1, val2: in MyEnum) return Boolean;

function MyEnum_Init return MyEnum;

ERR_MYENUM:CONSTANT INTEGER := 50; -- 
FUNCTION MyEnum_IsConstraintValid(val : in MyEnum) return adaasn1rtl.ASN1_RESULT;
-- MySimpleSeq --------------------------------------------
SUBTYPE MySimpleSeq_a is adaasn1rtl.Asn1UInt range 0 .. 255;


TYPE MySimpleSeq IS RECORD 
    a : MySimpleSeq_a;
    b : adaasn1rtl.Asn1Boolean;
    c : MyEnum;
END RECORD;

function MySimpleSeq_a_Equal(val1, val2: in MySimpleSeq_a) return Boolean;

function MySimpleSeq_Equal(val1, val2: in MySimpleSeq) return Boolean;

function MySimpleSeq_a_Init return MySimpleSeq_a;
function MySimpleSeq_Init return MySimpleSeq;

ERR_MYSIMPLESEQ_A:CONSTANT INTEGER := 144; 
ERR_MYSIMPLESEQ_B:CONSTANT INTEGER := 151; 
ERR_MYSIMPLESEQ_C:CONSTANT INTEGER := 158; 
FUNCTION MySimpleSeq_IsConstraintValid(val : in MySimpleSeq) return adaasn1rtl.ASN1_RESULT;
-- MyChoice --------------------------------------------
SUBTYPE MyChoice_b_index_range is integer range 0..1;
TYPE MyChoice_b IS (aa, bb) with Convention => C;
for MyChoice_b use
    (aa => 0, bb => 1);

SUBTYPE MyChoice_index_range is integer range 0..1;

TYPE MyChoice_selection IS (a_PRESENT, b_PRESENT);
for MyChoice_selection use
    (a_PRESENT => 1, b_PRESENT => 2);
for MyChoice_selection'Size use 32;

TYPE MyChoice(kind : MyChoice_selection:= a_PRESENT) IS 
RECORD
    case kind is
    when a_PRESENT =>
            a: adaasn1rtl.Asn1Boolean;
    when b_PRESENT =>
            b: MyChoice_b;
    end case;
END RECORD;

FOR MyChoice USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

function MyChoice_b_Equal(val1, val2: in MyChoice_b) return Boolean;

function MyChoice_Equal(val1, val2: in MyChoice) return Boolean;

function MyChoice_b_Init return MyChoice_b;
function MyChoice_Init return MyChoice;

ERR_MYCHOICE:CONSTANT INTEGER := 71; 
ERR_MYCHOICE_A:CONSTANT INTEGER := 57; 
ERR_MYCHOICE_B:CONSTANT INTEGER := 64; 
FUNCTION MyChoice_IsConstraintValid(val : in MyChoice) return adaasn1rtl.ASN1_RESULT;
-- MySeq --------------------------------------------

TYPE MySeq IS RECORD 
    a : adaasn1rtl.Asn1Boolean;
    b : MyChoice;
END RECORD;

function MySeq_Equal(val1, val2: in MySeq) return Boolean;

function MySeq_Init return MySeq;

ERR_MYSEQ_A:CONSTANT INTEGER := 78; 
ERR_MYSEQ_B:CONSTANT INTEGER := 99; 
ERR_MYSEQ_B_A:CONSTANT INTEGER := 85; 
ERR_MYSEQ_B_B:CONSTANT INTEGER := 92; 
FUNCTION MySeq_IsConstraintValid(val : in MySeq) return adaasn1rtl.ASN1_RESULT;
-- MySetOf --------------------------------------------
SUBTYPE MySetOf_elem is adaasn1rtl.Asn1UInt range 0 .. 10;

SUBTYPE MySetOf_index is integer range 1..3;
TYPE MySetOf_array IS ARRAY (MySetOf_index) OF MySetOf_elem;
SUBTYPE MySetOf_length_index is integer range 1..3;
TYPE MySetOf IS  RECORD
    Length : MySetOf_length_index;
    Data  : MySetOf_array;
END RECORD;

function MySetOf_elem_Equal(val1, val2: in MySetOf_elem) return Boolean;

function MySetOf_Equal(val1, val2: in MySetOf) return Boolean;

function MySetOf_elem_Init return MySetOf_elem;
function MySetOf_Init return MySetOf;

ERR_MYSETOF_ELM:CONSTANT INTEGER := 116; 
ERR_MYSETOF:CONSTANT INTEGER := 123; 
FUNCTION MySetOf_IsConstraintValid(val : in MySetOf) return adaasn1rtl.ASN1_RESULT;
-- MySeqOf --------------------------------------------
SUBTYPE MySeqOf_elem is adaasn1rtl.Asn1UInt range 0 .. 10;

SUBTYPE MySeqOf_index is integer range 1..3;
TYPE MySeqOf_array IS ARRAY (MySeqOf_index) OF MySeqOf_elem;
SUBTYPE MySeqOf_length_index is integer range 1..3;
TYPE MySeqOf IS  RECORD
    Length : MySeqOf_length_index;
    Data  : MySeqOf_array;
END RECORD;

function MySeqOf_elem_Equal(val1, val2: in MySeqOf_elem) return Boolean;

function MySeqOf_Equal(val1, val2: in MySeqOf) return Boolean;

function MySeqOf_elem_Init return MySeqOf_elem;
function MySeqOf_Init return MySeqOf;

ERR_MYSEQOF_ELM:CONSTANT INTEGER := 130; 
ERR_MYSEQOF:CONSTANT INTEGER := 137; 
FUNCTION MySeqOf_IsConstraintValid(val : in MySeqOf) return adaasn1rtl.ASN1_RESULT;

 

private
   --# hide TASTE_BasicTypes;


END TASTE_BasicTypes;