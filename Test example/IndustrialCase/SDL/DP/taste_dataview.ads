-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_Dataview with SPARK_Mode
IS


SUBTYPE Bit is adaasn1rtl.Asn1UInt range 0 .. 1;


function Bit_Equal(val1, val2: in Bit) return Boolean;

function Bit_Init return Bit;

ERR_BIT:CONSTANT INTEGER := 313; -- 
FUNCTION Bit_IsConstraintValid(val : in Bit) return adaasn1rtl.ASN1_RESULT;
-- Message --------------------------------------------
SUBTYPE Message_index is integer range 1..127;
TYPE Message_array IS ARRAY (Message_index) OF Bit;
SUBTYPE Message_length_index is integer range 0..127;
TYPE Message IS  RECORD
    Length : Message_length_index;
    Data  : Message_array;
END RECORD;

function Message_Equal(val1, val2: in Message) return Boolean;

function Message_Init return Message;

ERR_MESSAGE_ELM:CONSTANT INTEGER := 320; 
ERR_MESSAGE:CONSTANT INTEGER := 331; 
FUNCTION Message_IsConstraintValid(val : in Message) return adaasn1rtl.ASN1_RESULT;
-- Device_Current_StateInfo --------------------------------------------

TYPE Device_Current_StateInfo IS RECORD 
    content : Message;
END RECORD;

function Device_Current_StateInfo_Equal(val1, val2: in Device_Current_StateInfo) return Boolean;

function Device_Current_StateInfo_Init return Device_Current_StateInfo;

ERR_DEVICE_CURRENT_STATEINFO_CONTENT_ELM:CONSTANT INTEGER := 1; 
ERR_DEVICE_CURRENT_STATEINFO_CONTENT:CONSTANT INTEGER := 12; 
FUNCTION Device_Current_StateInfo_IsConstraintValid(val : in Device_Current_StateInfo) return adaasn1rtl.ASN1_RESULT;
-- Device_PowerOn_Command --------------------------------------------

TYPE Device_PowerOn_Command IS RECORD 
    content : Message;
END RECORD;

function Device_PowerOn_Command_Equal(val1, val2: in Device_PowerOn_Command) return Boolean;

function Device_PowerOn_Command_Init return Device_PowerOn_Command;

ERR_DEVICE_POWERON_COMMAND_CONTENT_ELM:CONSTANT INTEGER := 29; 
ERR_DEVICE_POWERON_COMMAND_CONTENT:CONSTANT INTEGER := 40; 
FUNCTION Device_PowerOn_Command_IsConstraintValid(val : in Device_PowerOn_Command) return adaasn1rtl.ASN1_RESULT;
-- Device_SelfCheck_Result --------------------------------------------

TYPE Device_SelfCheck_Result IS RECORD 
    content : Message;
END RECORD;

function Device_SelfCheck_Result_Equal(val1, val2: in Device_SelfCheck_Result) return Boolean;

function Device_SelfCheck_Result_Init return Device_SelfCheck_Result;

ERR_DEVICE_SELFCHECK_RESULT_CONTENT_ELM:CONSTANT INTEGER := 57; 
ERR_DEVICE_SELFCHECK_RESULT_CONTENT:CONSTANT INTEGER := 68; 
FUNCTION Device_SelfCheck_Result_IsConstraintValid(val : in Device_SelfCheck_Result) return adaasn1rtl.ASN1_RESULT;
-- Control_Computer_SelfCheck_Result --------------------------------------------

TYPE Control_Computer_SelfCheck_Result IS RECORD 
    content : Message;
END RECORD;

function Control_Computer_SelfCheck_Result_Equal(val1, val2: in Control_Computer_SelfCheck_Result) return Boolean;

function Control_Computer_SelfCheck_Result_Init return Control_Computer_SelfCheck_Result;

ERR_CONTROL_COMPUTER_SELFCHECK_RESULT_CONTENT_ELM:CONSTANT INTEGER := 85; 
ERR_CONTROL_COMPUTER_SELFCHECK_RESULT_CONTENT:CONSTANT INTEGER := 96; 
FUNCTION Control_Computer_SelfCheck_Result_IsConstraintValid(val : in Control_Computer_SelfCheck_Result) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Device_PowerOn_Result is Message;
SUBTYPE Device_PowerOn_Result_index is Message_index;
SUBTYPE Device_PowerOn_Result_array is Message_array;

function Device_PowerOn_Result_Equal(val1, val2: in Device_PowerOn_Result) return Boolean;

function Device_PowerOn_Result_Init return Device_PowerOn_Result;

ERR_DEVICE_POWERON_RESULT_ELM:CONSTANT INTEGER := 113; 
ERR_DEVICE_POWERON_RESULT:CONSTANT INTEGER := 124; 
FUNCTION Device_PowerOn_Result_IsConstraintValid(val : in Device_PowerOn_Result) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Device_PowerOn1_Result is Message;
SUBTYPE Device_PowerOn1_Result_index is Message_index;
SUBTYPE Device_PowerOn1_Result_array is Message_array;

function Device_PowerOn1_Result_Equal(val1, val2: in Device_PowerOn1_Result) return Boolean;

function Device_PowerOn1_Result_Init return Device_PowerOn1_Result;

ERR_DEVICE_POWERON1_RESULT_ELM:CONSTANT INTEGER := 135; 
ERR_DEVICE_POWERON1_RESULT:CONSTANT INTEGER := 146; 
FUNCTION Device_PowerOn1_Result_IsConstraintValid(val : in Device_PowerOn1_Result) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Device_PowerOn2_Result is Message;
SUBTYPE Device_PowerOn2_Result_index is Message_index;
SUBTYPE Device_PowerOn2_Result_array is Message_array;

function Device_PowerOn2_Result_Equal(val1, val2: in Device_PowerOn2_Result) return Boolean;

function Device_PowerOn2_Result_Init return Device_PowerOn2_Result;

ERR_DEVICE_POWERON2_RESULT_ELM:CONSTANT INTEGER := 157; 
ERR_DEVICE_POWERON2_RESULT:CONSTANT INTEGER := 168; 
FUNCTION Device_PowerOn2_Result_IsConstraintValid(val : in Device_PowerOn2_Result) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Device_PowerOn3_Result is Message;
SUBTYPE Device_PowerOn3_Result_index is Message_index;
SUBTYPE Device_PowerOn3_Result_array is Message_array;

function Device_PowerOn3_Result_Equal(val1, val2: in Device_PowerOn3_Result) return Boolean;

function Device_PowerOn3_Result_Init return Device_PowerOn3_Result;

ERR_DEVICE_POWERON3_RESULT_ELM:CONSTANT INTEGER := 179; 
ERR_DEVICE_POWERON3_RESULT:CONSTANT INTEGER := 190; 
FUNCTION Device_PowerOn3_Result_IsConstraintValid(val : in Device_PowerOn3_Result) return adaasn1rtl.ASN1_RESULT;
-- Trigger --------------------------------------------

TYPE Trigger IS RECORD 
    content : Message;
END RECORD;

function Trigger_Equal(val1, val2: in Trigger) return Boolean;

function Trigger_Init return Trigger;

ERR_TRIGGER_CONTENT_ELM:CONSTANT INTEGER := 201; 
ERR_TRIGGER_CONTENT:CONSTANT INTEGER := 212; 
FUNCTION Trigger_IsConstraintValid(val : in Trigger) return adaasn1rtl.ASN1_RESULT;
-- Trigger_1 --------------------------------------------

TYPE Trigger_1 IS RECORD 
    content : Message;
END RECORD;

function Trigger_1_Equal(val1, val2: in Trigger_1) return Boolean;

function Trigger_1_Init return Trigger_1;

ERR_TRIGGER_1_CONTENT_ELM:CONSTANT INTEGER := 229; 
ERR_TRIGGER_1_CONTENT:CONSTANT INTEGER := 240; 
FUNCTION Trigger_1_IsConstraintValid(val : in Trigger_1) return adaasn1rtl.ASN1_RESULT;
-- Trigger_2 --------------------------------------------

TYPE Trigger_2 IS RECORD 
    content : Message;
END RECORD;

function Trigger_2_Equal(val1, val2: in Trigger_2) return Boolean;

function Trigger_2_Init return Trigger_2;

ERR_TRIGGER_2_CONTENT_ELM:CONSTANT INTEGER := 257; 
ERR_TRIGGER_2_CONTENT:CONSTANT INTEGER := 268; 
FUNCTION Trigger_2_IsConstraintValid(val : in Trigger_2) return adaasn1rtl.ASN1_RESULT;
-- Error --------------------------------------------

TYPE Error IS RECORD 
    content : Message;
END RECORD;

function Error_Equal(val1, val2: in Error) return Boolean;

function Error_Init return Error;

ERR_ERROR_CONTENT_ELM:CONSTANT INTEGER := 285; 
ERR_ERROR_CONTENT:CONSTANT INTEGER := 296; 
FUNCTION Error_IsConstraintValid(val : in Error) return adaasn1rtl.ASN1_RESULT;
-- MyChoice --------------------------------------------
-- MyChoice_a --------------------------------------------
-- MyChoice_a_b --------------------------------------------

SUBTYPE MyChoice_a_b_index_range is integer range 0..1;

TYPE MyChoice_a_b_selection IS (c_PRESENT, d_PRESENT);
for MyChoice_a_b_selection use
    (c_PRESENT => 1, d_PRESENT => 2);
for MyChoice_a_b_selection'Size use 32;

TYPE MyChoice_a_b(kind : MyChoice_a_b_selection:= c_PRESENT) IS 
RECORD
    case kind is
    when c_PRESENT =>
            c: adaasn1rtl.Asn1Boolean;
    when d_PRESENT =>
            d: adaasn1rtl.Asn1Boolean;
    end case;
END RECORD;

FOR MyChoice_a_b USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

SUBTYPE MyChoice_a_index_range is integer range 0..1;

TYPE MyChoice_a_selection IS (b_PRESENT, e_PRESENT);
for MyChoice_a_selection use
    (b_PRESENT => 1, e_PRESENT => 2);
for MyChoice_a_selection'Size use 32;

TYPE MyChoice_a(kind : MyChoice_a_selection:= b_PRESENT) IS 
RECORD
    case kind is
    when b_PRESENT =>
            b: MyChoice_a_b;
    when e_PRESENT =>
            e: adaasn1rtl.Asn1Boolean;
    end case;
END RECORD;

FOR MyChoice_a USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

SUBTYPE MyChoice_index_range is integer range 0..1;

TYPE MyChoice_selection IS (a_PRESENT, f_PRESENT);
for MyChoice_selection use
    (a_PRESENT => 1, f_PRESENT => 2);
for MyChoice_selection'Size use 32;

TYPE MyChoice(kind : MyChoice_selection:= a_PRESENT) IS 
RECORD
    case kind is
    when a_PRESENT =>
            a: MyChoice_a;
    when f_PRESENT =>
            f: adaasn1rtl.Asn1Boolean;
    end case;
END RECORD;

FOR MyChoice USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

function MyChoice_a_b_Equal(val1, val2: in MyChoice_a_b) return Boolean;

function MyChoice_a_Equal(val1, val2: in MyChoice_a) return Boolean;

function MyChoice_Equal(val1, val2: in MyChoice) return Boolean;

function MyChoice_a_b_Init return MyChoice_a_b;
function MyChoice_a_Init return MyChoice_a;
function MyChoice_Init return MyChoice;

ERR_MYCHOICE:CONSTANT INTEGER := 380; 
ERR_MYCHOICE_A:CONSTANT INTEGER := 366; 
ERR_MYCHOICE_A_B:CONSTANT INTEGER := 352; 
ERR_MYCHOICE_A_B_C:CONSTANT INTEGER := 338; 
ERR_MYCHOICE_A_B_D:CONSTANT INTEGER := 345; 
ERR_MYCHOICE_A_E:CONSTANT INTEGER := 359; 
ERR_MYCHOICE_F:CONSTANT INTEGER := 373; 
FUNCTION MyChoice_IsConstraintValid(val : in MyChoice) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyInteger is adaasn1rtl.Asn1UInt range 0 .. 255;


function MyInteger_Equal(val1, val2: in MyInteger) return Boolean;

function MyInteger_Init return MyInteger;

ERR_MYINTEGER:CONSTANT INTEGER := 398; -- 
FUNCTION MyInteger_IsConstraintValid(val : in MyInteger) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Some_Thing is MyInteger range 0 .. 255;


function Some_Thing_Equal(val1, val2: in Some_Thing) return Boolean;

function Some_Thing_Init return Some_Thing;

ERR_SOME_THING:CONSTANT INTEGER := 387; -- 
FUNCTION Some_Thing_IsConstraintValid(val : in Some_Thing) return adaasn1rtl.ASN1_RESULT;
-- SeqOf --------------------------------------------
SUBTYPE SeqOf_index is integer range 1..100;
TYPE SeqOf_array IS ARRAY (SeqOf_index) OF MyInteger;
SUBTYPE SeqOf_length_index is integer range 0..100;
TYPE SeqOf IS  RECORD
    Length : SeqOf_length_index;
    Data  : SeqOf_array;
END RECORD;

function SeqOf_Equal(val1, val2: in SeqOf) return Boolean;

function SeqOf_Init return SeqOf;

ERR_SEQOF_ELM:CONSTANT INTEGER := 412; 
ERR_SEQOF:CONSTANT INTEGER := 423; 
FUNCTION SeqOf_IsConstraintValid(val : in SeqOf) return adaasn1rtl.ASN1_RESULT;
SUBTYPE My_OctStr_index is integer range 1..20;
SUBTYPE My_OctStr_array IS adaasn1rtl.OctetBuffer(My_OctStr_index);
SUBTYPE My_OctStr_length_index is integer range 0..20;
TYPE My_OctStr IS  RECORD
    Length : My_OctStr_length_index;
    Data  : My_OctStr_array;
END RECORD;

function My_OctStr_Equal(val1, val2: in My_OctStr) return Boolean;

function My_OctStr_Init return My_OctStr;

ERR_MY_OCTSTR:CONSTANT INTEGER := 405; -- 
FUNCTION My_OctStr_IsConstraintValid(val : in My_OctStr) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Type1 is adaasn1rtl.Asn1UInt range 0 .. 1;


function Type1_Equal(val1, val2: in Type1) return Boolean;

function Type1_Init return Type1;

ERR_TYPE1:CONSTANT INTEGER := 430; -- 
FUNCTION Type1_IsConstraintValid(val : in Type1) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Type2 is adaasn1rtl.Asn1Boolean;


function Type2_Equal(val1, val2: in Type2) return Boolean;

function Type2_Init return Type2;

ERR_TYPE2:CONSTANT INTEGER := 437; -- 
FUNCTION Type2_IsConstraintValid(val : in Type2) return adaasn1rtl.ASN1_RESULT;
-- Toto --------------------------------------------

TYPE Toto IS RECORD 
    elem_1 : Type1;
    elem_2 : Type2;
END RECORD;

function Toto_Equal(val1, val2: in Toto) return Boolean;

function Toto_Init return Toto;

ERR_TOTO_ELEM_1:CONSTANT INTEGER := 444; 
ERR_TOTO_ELEM_2:CONSTANT INTEGER := 455; 
FUNCTION Toto_IsConstraintValid(val : in Toto) return adaasn1rtl.ASN1_RESULT;
-- SeqBool --------------------------------------------
SUBTYPE SeqBool_index is integer range 1..5;
TYPE SeqBool_array IS ARRAY (SeqBool_index) OF adaasn1rtl.Asn1Boolean;
SUBTYPE SeqBool_length_index is integer range 1..5;
TYPE SeqBool IS  RECORD
    Length : SeqBool_length_index;
    Data  : SeqBool_array;
END RECORD;

function SeqBool_Equal(val1, val2: in SeqBool) return Boolean;

function SeqBool_Init return SeqBool;

ERR_SEQBOOL_ELM:CONSTANT INTEGER := 472; 
ERR_SEQBOOL:CONSTANT INTEGER := 479; 
FUNCTION SeqBool_IsConstraintValid(val : in SeqBool) return adaasn1rtl.ASN1_RESULT;

errorCCSR : CONSTANT TASTE_Dataview.Message:= Message'(Length => 1,Data => Message_array'(1=>0, others => 0));
errorDSR : CONSTANT TASTE_Dataview.Message:= Message'(Length => 1,Data => Message_array'(1=>0, others => 0));
errorDP1 : CONSTANT TASTE_Dataview.Message:= Message'(Length => 1,Data => Message_array'(1=>0, others => 0));
errorDP2 : CONSTANT TASTE_Dataview.Message:= Message'(Length => 1,Data => Message_array'(1=>0, others => 0));
errorDP3 : CONSTANT TASTE_Dataview.Message:= Message'(Length => 1,Data => Message_array'(1=>0, others => 0));
default_seqof : CONSTANT TASTE_Dataview.SeqOf:= SeqOf'(Length => 3,Data => SeqOf_array'(1=>4, 2=>7, 3=>9, others => 0));
default_str : CONSTANT TASTE_Dataview.My_OctStr:= My_OctStr'(Length => 4,Data => My_OctStr_array'(1=>16#DE#, 2=>16#AD#, 3=>16#BE#, 
                                                4=>16#EF#, others=> 16#0#)) ; 

private
   --# hide TASTE_Dataview;


END TASTE_Dataview;