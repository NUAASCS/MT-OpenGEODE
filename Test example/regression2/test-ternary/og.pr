system og;
    /* CIF TEXT (159, 221), (289, 188) */
    -- Text area for declarations and comments
    
    use dv comment 'dataview.asn';
    
    signal run;
    signal saved_signal(BoolType);
    signal we (MyStr);
    /* CIF ENDTEXT */
    channel c
        from env to og with run,
saved_signal;
        from og to env with we;
    endchannel;
    block og;
        signalroute r
            from env to og with run,
saved_signal;
            from og to env with we;
        connect c and r;
        /* CIF PROCESS (225, 50), (150, 75) */
        process og;
            /* CIF TEXT (532, 58), (396, 136) */
            --  Various tests of the ternary operator
            -- (PrimConditional)
            dcl save_buffer SeqOf;
            
            dcl param BoolType;
            
            dcl msg MyStr := 'hello';
            /* CIF ENDTEXT */
            /* CIF START (0, 226), (70, 35) */
            START;
                /* CIF NEXTSTATE (0, 276), (70, 35) */
                NEXTSTATE wait;
            /* CIF state (1126, 221), (88, 35) */
            state Running;
                /* CIF input (1017, 276), (70, 35) */
                input Run;
                    /* CIF PROCEDURECALL (955, 326), (194, 35) */
                    call writeln('Already running');
                    /* CIF NEXTSTATE (1017, 376), (70, 35) */
                    NEXTSTATE -;
                /* CIF provided (679, 276), (181, 35) */
                provided length(save_buffer) > 0;
                    /* CIF task (675, 326), (188, 35) */
                    task param := save_buffer(0);
                    /* CIF task (594, 376), (350, 34) */
                    task save_buffer := save_buffer(1, length(save_buffer));
                    /* CIF task (608, 425), (323, 56) */
                    task save_buffer := if length(save_buffer) > 1
then {true} else save_buffer // {false } fi;
                    /* CIF task (611, 496), (316, 56) */
                    task save_buffer := if length(save_buffer) > 1
then save_buffer(1, length(save_buffer))
else {} fi;
                    /* CIF PROCEDURECALL (669, 567), (200, 35) */
                    call writeln('Running: ', param);
                    /* CIF NEXTSTATE (725, 617), (88, 35) */
                    NEXTSTATE Running;
                /* CIF provided (1262, 276), (135, 35) */
                provided length (msg) < 100;
                    /* CIF task (1255, 331), (149, 35) */
                    task msg := msg // ' world';
                    /* CIF task (1159, 386), (341, 35) */
                    task msg := if false then 'helo' else msg // 'world' // '!!' fi;
                    /* CIF output (1291, 441), (76, 35) */
                    output we (msg);
                    /* CIF output (1275, 496), (109, 35) */
                    output we (msg // '!');
                    /* CIF output (1253, 551), (152, 35) */
                    output we ('hello' // ' world!');
                    /* CIF NEXTSTATE (1294, 601), (70, 35) */
                    NEXTSTATE -;
            endstate;
            /* CIF state (291, 227), (70, 35) */
            state wait;
                /* CIF input (296, 282), (162, 35) */
                input saved_signal(param);
                    /* CIF decision (296, 332), (161, 50) */
                    decision length(save_buffer);
                        /* CIF ANSWER (253, 402), (60, 34) */
                        (<10):
                            /* CIF task (194, 451), (177, 50) */
                            task save_buffer :=
save_buffer // {param};
                        /* CIF ANSWER (457, 402), (53, 34) */
                        (10):
                            /* CIF PROCEDURECALL (382, 451), (202, 38) */
                            call writeln('Buffer Overflow!');
                    enddecision;
                    /* CIF NEXTSTATE (342, 516), (70, 35) */
                    NEXTSTATE wait;
                /* CIF input (91, 282), (84, 35) */
                input run;
                    /* CIF NEXTSTATE (79, 332), (107, 35) */
                    NEXTSTATE Running;
            endstate;
        endprocess og;
    endblock;
endsystem;