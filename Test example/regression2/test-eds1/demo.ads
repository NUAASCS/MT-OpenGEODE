-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
WITH CcsdsSoisSubnetwork; use CcsdsSoisSubnetwork;
--# inherit CcsdsSoisSubnetwork;


PACKAGE Demo with SPARK_Mode
IS


-- TelecommandUserDataTypeBodyT --------------------------------------------
-- TelecommandUserDataTypeBodyT_userData --------------------------------------------
SUBTYPE TelecommandUserDataTypeBodyT_userData_index is integer range 1..255;
TYPE TelecommandUserDataTypeBodyT_userData_array IS ARRAY (TelecommandUserDataTypeBodyT_userData_index) OF CcsdsSoisSubnetwork.OctetTypeT;
SUBTYPE TelecommandUserDataTypeBodyT_userData_length_index is integer range 0..255;
TYPE TelecommandUserDataTypeBodyT_userData IS  RECORD
    Length : TelecommandUserDataTypeBodyT_userData_length_index;
    Data  : TelecommandUserDataTypeBodyT_userData_array;
END RECORD;

TYPE TelecommandUserDataTypeBodyT IS RECORD 
    userData : TelecommandUserDataTypeBodyT_userData;
END RECORD;

function TelecommandUserDataTypeBodyT_userData_Equal(val1, val2: in TelecommandUserDataTypeBodyT_userData) return Boolean;

function TelecommandUserDataTypeBodyT_Equal(val1, val2: in TelecommandUserDataTypeBodyT) return Boolean;

function TelecommandUserDataTypeBodyT_userData_Init return TelecommandUserDataTypeBodyT_userData;
function TelecommandUserDataTypeBodyT_Init return TelecommandUserDataTypeBodyT;

ERR_TELECOMMANDUSERDATATYPEBODYT_USERDATA_ELM:CONSTANT INTEGER := 2091; 
ERR_TELECOMMANDUSERDATATYPEBODYT_USERDATA:CONSTANT INTEGER := 2102; 
FUNCTION TelecommandUserDataTypeBodyT_IsConstraintValid(val : in TelecommandUserDataTypeBodyT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE StatusFlag1TypeT is adaasn1rtl.Asn1Boolean;


function StatusFlag1TypeT_Equal(val1, val2: in StatusFlag1TypeT) return Boolean;

function StatusFlag1TypeT_Init return StatusFlag1TypeT;

ERR_STATUSFLAG1TYPET:CONSTANT INTEGER := 1592; -- 
FUNCTION StatusFlag1TypeT_IsConstraintValid(val : in StatusFlag1TypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE StatusFlag2TypeT is adaasn1rtl.Asn1Boolean;


function StatusFlag2TypeT_Equal(val1, val2: in StatusFlag2TypeT) return Boolean;

function StatusFlag2TypeT_Init return StatusFlag2TypeT;

ERR_STATUSFLAG2TYPET:CONSTANT INTEGER := 1599; -- 
FUNCTION StatusFlag2TypeT_IsConstraintValid(val : in StatusFlag2TypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE CalibratedHKTypeT is adaasn1rtl.Asn1Real;


function CalibratedHKTypeT_Equal(val1, val2: in CalibratedHKTypeT) return Boolean;

function CalibratedHKTypeT_Init return CalibratedHKTypeT;

ERR_CALIBRATEDHKTYPET:CONSTANT INTEGER := 1606; -- 
FUNCTION CalibratedHKTypeT_IsConstraintValid(val : in CalibratedHKTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE QueryCountTypeT is adaasn1rtl.Asn1UInt range 0 .. 255;


function QueryCountTypeT_Equal(val1, val2: in QueryCountTypeT) return Boolean;

function QueryCountTypeT_Init return QueryCountTypeT;

ERR_QUERYCOUNTTYPET:CONSTANT INTEGER := 1613; -- 
FUNCTION QueryCountTypeT_IsConstraintValid(val : in QueryCountTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE ExtendedModeTypeT is adaasn1rtl.Asn1UInt range 0 .. 255;


function ExtendedModeTypeT_Equal(val1, val2: in ExtendedModeTypeT) return Boolean;

function ExtendedModeTypeT_Init return ExtendedModeTypeT;

ERR_EXTENDEDMODETYPET:CONSTANT INTEGER := 1620; -- 
FUNCTION ExtendedModeTypeT_IsConstraintValid(val : in ExtendedModeTypeT) return adaasn1rtl.ASN1_RESULT;
-- ExtendedModeUnionTypeBodyT --------------------------------------------

TYPE ExtendedModeUnionTypeBodyT IS RECORD 
    mode : ExtendedModeTypeT;
END RECORD;

function ExtendedModeUnionTypeBodyT_Equal(val1, val2: in ExtendedModeUnionTypeBodyT) return Boolean;

function ExtendedModeUnionTypeBodyT_Init return ExtendedModeUnionTypeBodyT;

ERR_EXTENDEDMODEUNIONTYPEBODYT_MODE:CONSTANT INTEGER := 1900; 
FUNCTION ExtendedModeUnionTypeBodyT_IsConstraintValid(val : in ExtendedModeUnionTypeBodyT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE ExtendedStatusTypeT is adaasn1rtl.Asn1UInt range 0 .. 255;


function ExtendedStatusTypeT_Equal(val1, val2: in ExtendedStatusTypeT) return Boolean;

function ExtendedStatusTypeT_Init return ExtendedStatusTypeT;

ERR_EXTENDEDSTATUSTYPET:CONSTANT INTEGER := 1627; -- 
FUNCTION ExtendedStatusTypeT_IsConstraintValid(val : in ExtendedStatusTypeT) return adaasn1rtl.ASN1_RESULT;
-- ExtendedStatusUnionTypeBodyT --------------------------------------------

TYPE ExtendedStatusUnionTypeBodyT IS RECORD 
    status : ExtendedStatusTypeT;
END RECORD;

function ExtendedStatusUnionTypeBodyT_Equal(val1, val2: in ExtendedStatusUnionTypeBodyT) return Boolean;

function ExtendedStatusUnionTypeBodyT_Init return ExtendedStatusUnionTypeBodyT;

ERR_EXTENDEDSTATUSUNIONTYPEBODYT_STATUS:CONSTANT INTEGER := 1917; 
FUNCTION ExtendedStatusUnionTypeBodyT_IsConstraintValid(val : in ExtendedStatusUnionTypeBodyT) return adaasn1rtl.ASN1_RESULT;
-- ExtendedStatusOrModeTypeT --------------------------------------------
-- ExtendedStatusOrModeTypeT_body_choice --------------------------------------------

SUBTYPE ExtendedStatusOrModeTypeT_body_choice_index_range is integer range 0..1;

TYPE ExtendedStatusOrModeTypeT_body_choice_selection IS (ExtendedStatusOrModeTypeT_body_choice_mode_PRESENT, body_choice_status_PRESENT);
for ExtendedStatusOrModeTypeT_body_choice_selection use
    (ExtendedStatusOrModeTypeT_body_choice_mode_PRESENT => 1, body_choice_status_PRESENT => 2);
for ExtendedStatusOrModeTypeT_body_choice_selection'Size use 32;

TYPE ExtendedStatusOrModeTypeT_body_choice(kind : ExtendedStatusOrModeTypeT_body_choice_selection:= ExtendedStatusOrModeTypeT_body_choice_mode_PRESENT) IS 
RECORD
    case kind is
    when ExtendedStatusOrModeTypeT_body_choice_mode_PRESENT =>
            mode: ExtendedModeUnionTypeBodyT;
    when body_choice_status_PRESENT =>
            status: ExtendedStatusUnionTypeBodyT;
    end case;
END RECORD;

FOR ExtendedStatusOrModeTypeT_body_choice USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

TYPE ExtendedStatusOrModeTypeT IS RECORD 
    queryCount : QueryCountTypeT;
    body_choice : ExtendedStatusOrModeTypeT_body_choice;
END RECORD;

function ExtendedStatusOrModeTypeT_body_choice_Equal(val1, val2: in ExtendedStatusOrModeTypeT_body_choice) return Boolean;

function ExtendedStatusOrModeTypeT_Equal(val1, val2: in ExtendedStatusOrModeTypeT) return Boolean;

function ExtendedStatusOrModeTypeT_body_choice_Init return ExtendedStatusOrModeTypeT_body_choice;
function ExtendedStatusOrModeTypeT_Init return ExtendedStatusOrModeTypeT;

ERR_EXTENDEDSTATUSORMODETYPET_QUERYCOUNT:CONSTANT INTEGER := 1834; 
ERR_EXTENDEDSTATUSORMODETYPET_BODY_CHOICE:CONSTANT INTEGER := 1887; 
ERR_EXTENDEDSTATUSORMODETYPET_BODY_CHOICE_MODE_MODE:CONSTANT INTEGER := 1845; 
ERR_EXTENDEDSTATUSORMODETYPET_BODY_CHOICE_STATUS_STATUS:CONSTANT INTEGER := 1866; 
FUNCTION ExtendedStatusOrModeTypeT_IsConstraintValid(val : in ExtendedStatusOrModeTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE HKTypeT is adaasn1rtl.Asn1UInt range 0 .. 255;


function HKTypeT_Equal(val1, val2: in HKTypeT) return Boolean;

function HKTypeT_Init return HKTypeT;

ERR_HKTYPET:CONSTANT INTEGER := 1634; -- 
FUNCTION HKTypeT_IsConstraintValid(val : in HKTypeT) return adaasn1rtl.ASN1_RESULT;
-- TelemetrySet1TypeT --------------------------------------------

TYPE TelemetrySet1TypeT IS RECORD 
    hk1 : HKTypeT;
    hk2 : HKTypeT;
END RECORD;

function TelemetrySet1TypeT_Equal(val1, val2: in TelemetrySet1TypeT) return Boolean;

function TelemetrySet1TypeT_Init return TelemetrySet1TypeT;

ERR_TELEMETRYSET1TYPET_HK1:CONSTANT INTEGER := 1750; 
ERR_TELEMETRYSET1TYPET_HK2:CONSTANT INTEGER := 1761; 
FUNCTION TelemetrySet1TypeT_IsConstraintValid(val : in TelemetrySet1TypeT) return adaasn1rtl.ASN1_RESULT;
-- Telemetry1TypeBodyT --------------------------------------------

TYPE Telemetry1TypeBodyT IS RECORD 
    telemetrySet : TelemetrySet1TypeT;
END RECORD;

function Telemetry1TypeBodyT_Equal(val1, val2: in Telemetry1TypeBodyT) return Boolean;

function Telemetry1TypeBodyT_Init return Telemetry1TypeBodyT;

ERR_TELEMETRY1TYPEBODYT_TELEMETRYSET_HK1:CONSTANT INTEGER := 2328; 
ERR_TELEMETRY1TYPEBODYT_TELEMETRYSET_HK2:CONSTANT INTEGER := 2339; 
FUNCTION Telemetry1TypeBodyT_IsConstraintValid(val : in Telemetry1TypeBodyT) return adaasn1rtl.ASN1_RESULT;
-- TelemetrySet2TypeT --------------------------------------------

TYPE TelemetrySet2TypeT IS RECORD 
    hk3 : HKTypeT;
    hk4 : HKTypeT;
END RECORD;

function TelemetrySet2TypeT_Equal(val1, val2: in TelemetrySet2TypeT) return Boolean;

function TelemetrySet2TypeT_Init return TelemetrySet2TypeT;

ERR_TELEMETRYSET2TYPET_HK3:CONSTANT INTEGER := 1778; 
ERR_TELEMETRYSET2TYPET_HK4:CONSTANT INTEGER := 1789; 
FUNCTION TelemetrySet2TypeT_IsConstraintValid(val : in TelemetrySet2TypeT) return adaasn1rtl.ASN1_RESULT;
-- Telemetry2TypeBodyT --------------------------------------------

TYPE Telemetry2TypeBodyT IS RECORD 
    telemetrySet : TelemetrySet2TypeT;
END RECORD;

function Telemetry2TypeBodyT_Equal(val1, val2: in Telemetry2TypeBodyT) return Boolean;

function Telemetry2TypeBodyT_Init return Telemetry2TypeBodyT;

ERR_TELEMETRY2TYPEBODYT_TELEMETRYSET_HK3:CONSTANT INTEGER := 2366; 
ERR_TELEMETRY2TYPEBODYT_TELEMETRYSET_HK4:CONSTANT INTEGER := 2377; 
FUNCTION Telemetry2TypeBodyT_IsConstraintValid(val : in Telemetry2TypeBodyT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE CommandStatusTypeT is adaasn1rtl.Asn1UInt range 0 .. 65535;


function CommandStatusTypeT_Equal(val1, val2: in CommandStatusTypeT) return Boolean;

function CommandStatusTypeT_Init return CommandStatusTypeT;

ERR_COMMANDSTATUSTYPET:CONSTANT INTEGER := 1641; -- 
FUNCTION CommandStatusTypeT_IsConstraintValid(val : in CommandStatusTypeT) return adaasn1rtl.ASN1_RESULT;
-- TelemetryAckTypeBodyT --------------------------------------------

TYPE TelemetryAckTypeBodyT IS RECORD 
    status : CommandStatusTypeT;
END RECORD;

function TelemetryAckTypeBodyT_Equal(val1, val2: in TelemetryAckTypeBodyT) return Boolean;

function TelemetryAckTypeBodyT_Init return TelemetryAckTypeBodyT;

ERR_TELEMETRYACKTYPEBODYT_STATUS:CONSTANT INTEGER := 2404; 
FUNCTION TelemetryAckTypeBodyT_IsConstraintValid(val : in TelemetryAckTypeBodyT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE EventDataTypeT is adaasn1rtl.Asn1UInt range 0 .. 255;


function EventDataTypeT_Equal(val1, val2: in EventDataTypeT) return Boolean;

function EventDataTypeT_Init return EventDataTypeT;

ERR_EVENTDATATYPET:CONSTANT INTEGER := 1648; -- 
FUNCTION EventDataTypeT_IsConstraintValid(val : in EventDataTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE UserDataLengthTypeT is adaasn1rtl.Asn1UInt range 0 .. 65535;


function UserDataLengthTypeT_Equal(val1, val2: in UserDataLengthTypeT) return Boolean;

function UserDataLengthTypeT_Init return UserDataLengthTypeT;

ERR_USERDATALENGTHTYPET:CONSTANT INTEGER := 1655; -- 
FUNCTION UserDataLengthTypeT_IsConstraintValid(val : in UserDataLengthTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE ModeTypeT_index_range is integer range 0..4;
TYPE ModeTypeT IS (reset, doALittleBitOfStuff, doLotsOfStuff, doTonnesOfStuffBadly, revealABugAndMalfunction) with Convention => C;
for ModeTypeT use
    (reset => 0, doALittleBitOfStuff => 1, doLotsOfStuff => 4, doTonnesOfStuffBadly => 6, revealABugAndMalfunction => 9);

function ModeTypeT_Equal(val1, val2: in ModeTypeT) return Boolean;

function ModeTypeT_Init return ModeTypeT;

ERR_MODETYPET:CONSTANT INTEGER := 1662; -- 
FUNCTION ModeTypeT_IsConstraintValid(val : in ModeTypeT) return adaasn1rtl.ASN1_RESULT;
-- TelecommandModeTypeBodyT --------------------------------------------

TYPE TelecommandModeTypeBodyT IS RECORD 
    mode : ModeTypeT;
END RECORD;

function TelecommandModeTypeBodyT_Equal(val1, val2: in TelecommandModeTypeBodyT) return Boolean;

function TelecommandModeTypeBodyT_Init return TelecommandModeTypeBodyT;

ERR_TELECOMMANDMODETYPEBODYT_MODE:CONSTANT INTEGER := 2074; 
FUNCTION TelecommandModeTypeBodyT_IsConstraintValid(val : in TelecommandModeTypeBodyT) return adaasn1rtl.ASN1_RESULT;
-- TelecommandTypeT --------------------------------------------
-- TelecommandTypeT_body_choice --------------------------------------------

SUBTYPE TelecommandTypeT_body_choice_index_range is integer range 0..1;

TYPE TelecommandTypeT_body_choice_selection IS (TelecommandTypeT_body_choice_mode_PRESENT, userData_PRESENT);
for TelecommandTypeT_body_choice_selection use
    (TelecommandTypeT_body_choice_mode_PRESENT => 1, userData_PRESENT => 2);
for TelecommandTypeT_body_choice_selection'Size use 32;

TYPE TelecommandTypeT_body_choice(kind : TelecommandTypeT_body_choice_selection:= TelecommandTypeT_body_choice_mode_PRESENT) IS 
RECORD
    case kind is
    when TelecommandTypeT_body_choice_mode_PRESENT =>
            mode: TelecommandModeTypeBodyT;
    when userData_PRESENT =>
            userData: TelecommandUserDataTypeBodyT;
    end case;
END RECORD;

FOR TelecommandTypeT_body_choice USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

TYPE TelecommandTypeT IS RECORD 
    body_choice : TelecommandTypeT_body_choice;
END RECORD;

function TelecommandTypeT_body_choice_Equal(val1, val2: in TelecommandTypeT_body_choice) return Boolean;

function TelecommandTypeT_Equal(val1, val2: in TelecommandTypeT) return Boolean;

function TelecommandTypeT_body_choice_Init return TelecommandTypeT_body_choice;
function TelecommandTypeT_Init return TelecommandTypeT;

ERR_TELECOMMANDTYPET_BODY_CHOICE:CONSTANT INTEGER := 2061; 
ERR_TELECOMMANDTYPET_BODY_CHOICE_MODE_MODE:CONSTANT INTEGER := 2012; 
ERR_TELECOMMANDTYPET_BODY_CHOICE_USERDATA_USERDATA_ELM:CONSTANT INTEGER := 2033; 
ERR_TELECOMMANDTYPET_BODY_CHOICE_USERDATA_USERDATA:CONSTANT INTEGER := 2044; 
FUNCTION TelecommandTypeT_IsConstraintValid(val : in TelecommandTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE EventTypeTypeT_index_range is integer range 0..2;
TYPE EventTypeTypeT IS (event1, event2, event3) with Convention => C;
for EventTypeTypeT use
    (event1 => 0, event2 => 1, event3 => 2);

function EventTypeTypeT_Equal(val1, val2: in EventTypeTypeT) return Boolean;

function EventTypeTypeT_Init return EventTypeTypeT;

ERR_EVENTTYPETYPET:CONSTANT INTEGER := 1669; -- 
FUNCTION EventTypeTypeT_IsConstraintValid(val : in EventTypeTypeT) return adaasn1rtl.ASN1_RESULT;
-- EventTypeT --------------------------------------------

TYPE EventTypeT IS RECORD 
    typeKeyword : EventTypeTypeT;
    data_value : EventDataTypeT;
END RECORD;

function EventTypeT_Equal(val1, val2: in EventTypeT) return Boolean;

function EventTypeT_Init return EventTypeT;

ERR_EVENTTYPET_TYPEKEYWORD:CONSTANT INTEGER := 1806; 
ERR_EVENTTYPET_DATA_VALUE:CONSTANT INTEGER := 1817; 
FUNCTION EventTypeT_IsConstraintValid(val : in EventTypeT) return adaasn1rtl.ASN1_RESULT;
-- TelemetryEventTypeBodyT --------------------------------------------

TYPE TelemetryEventTypeBodyT IS RECORD 
    eventType : EventTypeTypeT;
    eventData : EventDataTypeT;
END RECORD;

function TelemetryEventTypeBodyT_Equal(val1, val2: in TelemetryEventTypeBodyT) return Boolean;

function TelemetryEventTypeBodyT_Init return TelemetryEventTypeBodyT;

ERR_TELEMETRYEVENTTYPEBODYT_EVENTTYPE:CONSTANT INTEGER := 2421; 
ERR_TELEMETRYEVENTTYPEBODYT_EVENTDATA:CONSTANT INTEGER := 2432; 
FUNCTION TelemetryEventTypeBodyT_IsConstraintValid(val : in TelemetryEventTypeBodyT) return adaasn1rtl.ASN1_RESULT;
-- TelemetryTypeT --------------------------------------------
-- TelemetryTypeT_body_choice --------------------------------------------

SUBTYPE TelemetryTypeT_body_choice_index_range is integer range 0..3;

TYPE TelemetryTypeT_body_choice_selection IS (ack_PRESENT, type1_PRESENT, type2_PRESENT, event_PRESENT);
for TelemetryTypeT_body_choice_selection use
    (ack_PRESENT => 1, type1_PRESENT => 2, type2_PRESENT => 3, event_PRESENT => 4);
for TelemetryTypeT_body_choice_selection'Size use 32;

TYPE TelemetryTypeT_body_choice(kind : TelemetryTypeT_body_choice_selection:= ack_PRESENT) IS 
RECORD
    case kind is
    when ack_PRESENT =>
            ack: TelemetryAckTypeBodyT;
    when type1_PRESENT =>
            type1: Telemetry1TypeBodyT;
    when type2_PRESENT =>
            type2: Telemetry2TypeBodyT;
    when event_PRESENT =>
            event: TelemetryEventTypeBodyT;
    end case;
END RECORD;

FOR TelemetryTypeT_body_choice USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

TYPE TelemetryTypeT IS RECORD 
    body_choice : TelemetryTypeT_body_choice;
END RECORD;

function TelemetryTypeT_body_choice_Equal(val1, val2: in TelemetryTypeT_body_choice) return Boolean;

function TelemetryTypeT_Equal(val1, val2: in TelemetryTypeT) return Boolean;

function TelemetryTypeT_body_choice_Init return TelemetryTypeT_body_choice;
function TelemetryTypeT_Init return TelemetryTypeT;

ERR_TELEMETRYTYPET_BODY_CHOICE:CONSTANT INTEGER := 2315; 
ERR_TELEMETRYTYPET_BODY_CHOICE_ACK_STATUS:CONSTANT INTEGER := 2178; 
ERR_TELEMETRYTYPET_BODY_CHOICE_TYPE1_TELEMETRYSET_HK1:CONSTANT INTEGER := 2199; 
ERR_TELEMETRYTYPET_BODY_CHOICE_TYPE1_TELEMETRYSET_HK2:CONSTANT INTEGER := 2210; 
ERR_TELEMETRYTYPET_BODY_CHOICE_TYPE2_TELEMETRYSET_HK3:CONSTANT INTEGER := 2241; 
ERR_TELEMETRYTYPET_BODY_CHOICE_TYPE2_TELEMETRYSET_HK4:CONSTANT INTEGER := 2252; 
ERR_TELEMETRYTYPET_BODY_CHOICE_EVENT_EVENTTYPE:CONSTANT INTEGER := 2283; 
ERR_TELEMETRYTYPET_BODY_CHOICE_EVENT_EVENTDATA:CONSTANT INTEGER := 2294; 
FUNCTION TelemetryTypeT_IsConstraintValid(val : in TelemetryTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE ReadStatusModeCommandTypeT_index_range is integer range 0..1;
TYPE ReadStatusModeCommandTypeT IS (readStatus, readMode) with Convention => C;
for ReadStatusModeCommandTypeT use
    (readStatus => 1, readMode => 2);

function ReadStatusModeCommandTypeT_Equal(val1, val2: in ReadStatusModeCommandTypeT) return Boolean;

function ReadStatusModeCommandTypeT_Init return ReadStatusModeCommandTypeT;

ERR_READSTATUSMODECOMMANDTYPET:CONSTANT INTEGER := 1676; -- 
FUNCTION ReadStatusModeCommandTypeT_IsConstraintValid(val : in ReadStatusModeCommandTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE ExtendedStatusModeEnumTypeT_index_range is integer range 0..1;
TYPE ExtendedStatusModeEnumTypeT IS (ExtendedStatusModeEnumTypeT_mode, status) with Convention => C;
for ExtendedStatusModeEnumTypeT use
    (ExtendedStatusModeEnumTypeT_mode => 0, status => 1);

function ExtendedStatusModeEnumTypeT_Equal(val1, val2: in ExtendedStatusModeEnumTypeT) return Boolean;

function ExtendedStatusModeEnumTypeT_Init return ExtendedStatusModeEnumTypeT;

ERR_EXTENDEDSTATUSMODEENUMTYPET:CONSTANT INTEGER := 1683; -- 
FUNCTION ExtendedStatusModeEnumTypeT_IsConstraintValid(val : in ExtendedStatusModeEnumTypeT) return adaasn1rtl.ASN1_RESULT;
-- ExtendedStatusUnionTypeT --------------------------------------------

TYPE ExtendedStatusUnionTypeT IS RECORD 
    queryCount : QueryCountTypeT;
    typeKeyword : ExtendedStatusModeEnumTypeT;
    status : ExtendedStatusTypeT;
END RECORD;

function ExtendedStatusUnionTypeT_Equal(val1, val2: in ExtendedStatusUnionTypeT) return Boolean;

function ExtendedStatusUnionTypeT_Init return ExtendedStatusUnionTypeT;

ERR_EXTENDEDSTATUSUNIONTYPET_QUERYCOUNT:CONSTANT INTEGER := 1934; 
ERR_EXTENDEDSTATUSUNIONTYPET_TYPEKEYWORD:CONSTANT INTEGER := 1945; 
ERR_EXTENDEDSTATUSUNIONTYPET_STATUS:CONSTANT INTEGER := 1956; 
FUNCTION ExtendedStatusUnionTypeT_IsConstraintValid(val : in ExtendedStatusUnionTypeT) return adaasn1rtl.ASN1_RESULT;
-- ExtendedModeUnionTypeT --------------------------------------------

TYPE ExtendedModeUnionTypeT IS RECORD 
    queryCount : QueryCountTypeT;
    typeKeyword : ExtendedStatusModeEnumTypeT;
    mode : ExtendedModeTypeT;
END RECORD;

function ExtendedModeUnionTypeT_Equal(val1, val2: in ExtendedModeUnionTypeT) return Boolean;

function ExtendedModeUnionTypeT_Init return ExtendedModeUnionTypeT;

ERR_EXTENDEDMODEUNIONTYPET_QUERYCOUNT:CONSTANT INTEGER := 1973; 
ERR_EXTENDEDMODEUNIONTYPET_TYPEKEYWORD:CONSTANT INTEGER := 1984; 
ERR_EXTENDEDMODEUNIONTYPET_MODE:CONSTANT INTEGER := 1995; 
FUNCTION ExtendedModeUnionTypeT_IsConstraintValid(val : in ExtendedModeUnionTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE TelecommandTypeEnumTypeT_index_range is integer range 0..1;
TYPE TelecommandTypeEnumTypeT IS (TelecommandTypeEnumTypeT_mode, userData) with Convention => C;
for TelecommandTypeEnumTypeT use
    (TelecommandTypeEnumTypeT_mode => 0, userData => 1);

function TelecommandTypeEnumTypeT_Equal(val1, val2: in TelecommandTypeEnumTypeT) return Boolean;

function TelecommandTypeEnumTypeT_Init return TelecommandTypeEnumTypeT;

ERR_TELECOMMANDTYPEENUMTYPET:CONSTANT INTEGER := 1690; -- 
FUNCTION TelecommandTypeEnumTypeT_IsConstraintValid(val : in TelecommandTypeEnumTypeT) return adaasn1rtl.ASN1_RESULT;
-- TelecommandModeTypeT --------------------------------------------

TYPE TelecommandModeTypeT IS RECORD 
    typeKeyword : TelecommandTypeEnumTypeT;
    mode : ModeTypeT;
END RECORD;

function TelecommandModeTypeT_Equal(val1, val2: in TelecommandModeTypeT) return Boolean;

function TelecommandModeTypeT_Init return TelecommandModeTypeT;

ERR_TELECOMMANDMODETYPET_TYPEKEYWORD:CONSTANT INTEGER := 2115; 
ERR_TELECOMMANDMODETYPET_MODE:CONSTANT INTEGER := 2126; 
FUNCTION TelecommandModeTypeT_IsConstraintValid(val : in TelecommandModeTypeT) return adaasn1rtl.ASN1_RESULT;
-- TelecommandUserDataTypeT --------------------------------------------
-- TelecommandUserDataTypeT_userData --------------------------------------------
SUBTYPE TelecommandUserDataTypeT_userData_index is integer range 1..255;
TYPE TelecommandUserDataTypeT_userData_array IS ARRAY (TelecommandUserDataTypeT_userData_index) OF CcsdsSoisSubnetwork.OctetTypeT;
SUBTYPE TelecommandUserDataTypeT_userData_length_index is integer range 0..255;
TYPE TelecommandUserDataTypeT_userData IS  RECORD
    Length : TelecommandUserDataTypeT_userData_length_index;
    Data  : TelecommandUserDataTypeT_userData_array;
END RECORD;

TYPE TelecommandUserDataTypeT IS RECORD 
    typeKeyword : TelecommandTypeEnumTypeT;
    userData : TelecommandUserDataTypeT_userData;
END RECORD;

function TelecommandUserDataTypeT_userData_Equal(val1, val2: in TelecommandUserDataTypeT_userData) return Boolean;

function TelecommandUserDataTypeT_Equal(val1, val2: in TelecommandUserDataTypeT) return Boolean;

function TelecommandUserDataTypeT_userData_Init return TelecommandUserDataTypeT_userData;
function TelecommandUserDataTypeT_Init return TelecommandUserDataTypeT;

ERR_TELECOMMANDUSERDATATYPET_TYPEKEYWORD:CONSTANT INTEGER := 2143; 
ERR_TELECOMMANDUSERDATATYPET_USERDATA_ELM:CONSTANT INTEGER := 2154; 
ERR_TELECOMMANDUSERDATATYPET_USERDATA:CONSTANT INTEGER := 2165; 
FUNCTION TelecommandUserDataTypeT_IsConstraintValid(val : in TelecommandUserDataTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE TelemetryTypeEnumTypeT_index_range is integer range 0..3;
TYPE TelemetryTypeEnumTypeT IS (ack, type1, type2, event) with Convention => C;
for TelemetryTypeEnumTypeT use
    (ack => 0, type1 => 1, type2 => 2, event => 3);

function TelemetryTypeEnumTypeT_Equal(val1, val2: in TelemetryTypeEnumTypeT) return Boolean;

function TelemetryTypeEnumTypeT_Init return TelemetryTypeEnumTypeT;

ERR_TELEMETRYTYPEENUMTYPET:CONSTANT INTEGER := 1697; -- 
FUNCTION TelemetryTypeEnumTypeT_IsConstraintValid(val : in TelemetryTypeEnumTypeT) return adaasn1rtl.ASN1_RESULT;
-- TelemetryAckTypeT --------------------------------------------

TYPE TelemetryAckTypeT IS RECORD 
    typeKeyword : TelemetryTypeEnumTypeT;
    status : CommandStatusTypeT;
END RECORD;

function TelemetryAckTypeT_Equal(val1, val2: in TelemetryAckTypeT) return Boolean;

function TelemetryAckTypeT_Init return TelemetryAckTypeT;

ERR_TELEMETRYACKTYPET_TYPEKEYWORD:CONSTANT INTEGER := 2449; 
ERR_TELEMETRYACKTYPET_STATUS:CONSTANT INTEGER := 2460; 
FUNCTION TelemetryAckTypeT_IsConstraintValid(val : in TelemetryAckTypeT) return adaasn1rtl.ASN1_RESULT;
-- Telemetry1TypeT --------------------------------------------

TYPE Telemetry1TypeT IS RECORD 
    typeKeyword : TelemetryTypeEnumTypeT;
    telemetrySet : TelemetrySet1TypeT;
END RECORD;

function Telemetry1TypeT_Equal(val1, val2: in Telemetry1TypeT) return Boolean;

function Telemetry1TypeT_Init return Telemetry1TypeT;

ERR_TELEMETRY1TYPET_TYPEKEYWORD:CONSTANT INTEGER := 2477; 
ERR_TELEMETRY1TYPET_TELEMETRYSET_HK1:CONSTANT INTEGER := 2488; 
ERR_TELEMETRY1TYPET_TELEMETRYSET_HK2:CONSTANT INTEGER := 2499; 
FUNCTION Telemetry1TypeT_IsConstraintValid(val : in Telemetry1TypeT) return adaasn1rtl.ASN1_RESULT;
-- Telemetry2TypeT --------------------------------------------

TYPE Telemetry2TypeT IS RECORD 
    typeKeyword : TelemetryTypeEnumTypeT;
    telemetrySet : TelemetrySet2TypeT;
END RECORD;

function Telemetry2TypeT_Equal(val1, val2: in Telemetry2TypeT) return Boolean;

function Telemetry2TypeT_Init return Telemetry2TypeT;

ERR_TELEMETRY2TYPET_TYPEKEYWORD:CONSTANT INTEGER := 2526; 
ERR_TELEMETRY2TYPET_TELEMETRYSET_HK3:CONSTANT INTEGER := 2537; 
ERR_TELEMETRY2TYPET_TELEMETRYSET_HK4:CONSTANT INTEGER := 2548; 
FUNCTION Telemetry2TypeT_IsConstraintValid(val : in Telemetry2TypeT) return adaasn1rtl.ASN1_RESULT;
-- TelemetryEventTypeT --------------------------------------------

TYPE TelemetryEventTypeT IS RECORD 
    typeKeyword : TelemetryTypeEnumTypeT;
    eventType : EventTypeTypeT;
    eventData : EventDataTypeT;
END RECORD;

function TelemetryEventTypeT_Equal(val1, val2: in TelemetryEventTypeT) return Boolean;

function TelemetryEventTypeT_Init return TelemetryEventTypeT;

ERR_TELEMETRYEVENTTYPET_TYPEKEYWORD:CONSTANT INTEGER := 2575; 
ERR_TELEMETRYEVENTTYPET_EVENTTYPE:CONSTANT INTEGER := 2586; 
ERR_TELEMETRYEVENTTYPET_EVENTDATA:CONSTANT INTEGER := 2597; 
FUNCTION TelemetryEventTypeT_IsConstraintValid(val : in TelemetryEventTypeT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE OpCountTypeT is adaasn1rtl.Asn1UInt range 0 .. 39;


function OpCountTypeT_Equal(val1, val2: in OpCountTypeT) return Boolean;

function OpCountTypeT_Init return OpCountTypeT;

ERR_OPCOUNTTYPET:CONSTANT INTEGER := 1704; -- 
FUNCTION OpCountTypeT_IsConstraintValid(val : in OpCountTypeT) return adaasn1rtl.ASN1_RESULT;
-- StatusTypeT --------------------------------------------

TYPE StatusTypeT IS RECORD 
    statusFlag1 : StatusFlag1TypeT;
    statusFlag2 : StatusFlag2TypeT;
    opCount : OpCountTypeT;
END RECORD;

function StatusTypeT_Equal(val1, val2: in StatusTypeT) return Boolean;

function StatusTypeT_Init return StatusTypeT;

ERR_STATUSTYPET_STATUSFLAG1:CONSTANT INTEGER := 1711; 
ERR_STATUSTYPET_STATUSFLAG2:CONSTANT INTEGER := 1722; 
ERR_STATUSTYPET_OPCOUNT:CONSTANT INTEGER := 1733; 
FUNCTION StatusTypeT_IsConstraintValid(val : in StatusTypeT) return adaasn1rtl.ASN1_RESULT;

 

private
   --# hide Demo;


END Demo;