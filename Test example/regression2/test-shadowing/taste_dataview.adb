-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;


PACKAGE BODY TASTE_Dataview with SPARK_Mode IS




function MyBool_Equal(val1, val2: in MyBool)
    return Boolean 
is
begin
	return val1 = val2;

end MyBool_Equal;

function MyBool_Init return MyBool
is
    val: MyBool;
begin
    val := FALSE;
    return val;
end MyBool_Init;

FUNCTION MyBool_IsConstraintValid(val : in MyBool) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_MYBOOL);
    RETURN ret;
END MyBool_IsConstraintValid;



function MyInt_Equal(val1, val2: in MyInt)
    return Boolean 
is
begin
	return val1 = val2;

end MyInt_Equal;

function MyInt_Init return MyInt
is
    val: MyInt;
begin
    val := 0;
    return val;
end MyInt_Init;

FUNCTION MyInt_IsConstraintValid(val : in MyInt) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_MYINT);
    RETURN ret;
END MyInt_IsConstraintValid;



function MySeq_Equal(val1, val2: in MySeq)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.a = val2.a);

    if ret then
        ret := (val1.b = val2.b);

    end if;
	return ret;

end MySeq_Equal;

function MySeq_Init return MySeq
is
    val: MySeq;
begin

    --set a 
    val.a := MyBool_Init;
    --set b 
    val.b := MyInt_Init;
    return val;
end MySeq_Init;

FUNCTION MySeq_IsConstraintValid(val : in MySeq) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_MYSEQ_A);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.b <= 255), ErrorCode => ERR_MYSEQ_B);
    end if;

    RETURN ret;
END MySeq_IsConstraintValid;


 

END TASTE_Dataview;