SYSTEM og;
    /* CIF TEXT (156, 190), (356, 248) */
    use dv comment 'dataview-uniq.asn';

signal telecommand(tc_type);
signal telemetry(tm_type);
    /* CIF ENDTEXT */
    CHANNEL c
        FROM ENV TO og WITH telecommand;
        FROM og TO ENV WITH telemetry;
    ENDCHANNEL;
    BLOCK og;
        SIGNALROUTE r
            FROM ENV TO og WITH telecommand;
            FROM og TO ENV WITH telemetry;
        CONNECT c AND r;
        /* CIF PROCESS (225, 49), (150, 75) */
        PROCESS og;
            STATE safe;
            SUBSTRUCTURE
                    /* CIF START (153, 96), (70, 35) */
                    START;
                        /* CIF NEXTSTATE (135, 146), (105, 35) */
                        NEXTSTATE Inside_safe;
                    /* CIF STATE (301, 97), (106, 35) */
                    STATE Inside_safe;
                    ENDSTATE;
            ENDSUBSTRUCTURE;
            STATE AGGREGATION wait;
            SUBSTRUCTURE
                    STATE exception_handler;
                    SUBSTRUCTURE
                            /* CIF START (264, 78), (70, 35) */
                            START;
                                /* CIF NEXTSTATE (246, 128), (106, 35) */
                                NEXTSTATE wait_for_tc;
                            /* CIF STATE (246, 128), (106, 35) */
                            STATE wait_for_tc;
                                /* CIF PROVIDED (252, 183), (93, 38) */
                                PROVIDED got_tc;
                                    /* CIF PROCEDURECALL (117, 236), (363, 35) */
                                    CALL writeln('ERROR, all TC handlers are busy - discarding');
                                    /* CIF TASK (225, 286), (147, 35) */
                                    TASK failure := true;
                                    /* CIF NEXTSTATE (263, 336), (70, 35) */
                                    NEXTSTATE -;
                            ENDSTATE;
                    ENDSUBSTRUCTURE;
                    STATE tc_router;
                    SUBSTRUCTURE
                            /* CIF START (144, 56), (70, 35) */
                            START;
                                /* CIF NEXTSTATE (116, 106), (126, 35) */
                                NEXTSTATE wait_for_tc;
                            /* CIF STATE (116, 106), (126, 35) */
                            STATE wait_for_tc;
                                /* CIF INPUT (93, 161), (175, 35) */
                                INPUT telecommand(tc);
                                    /* CIF TASK (107, 211), (146, 35) */
                                    TASK got_tc := true;
                                    /* CIF NEXTSTATE (145, 261), (70, 35) */
                                    NEXTSTATE -;
                            ENDSTATE;
                    ENDSUBSTRUCTURE;
                    STATE generic_tc_handler_2;
                    SUBSTRUCTURE
                            /* CIF TEXT (117, 155), (323, 140) */
                            -- Model a generic TC handler. The content of this
-- state can be copied several times, to manage
-- several TC in parallel.
                            /* CIF ENDTEXT */
                            /* CIF START (512, 84), (70, 35) */
                            START;
                                /* CIF NEXTSTATE (494, 134), (106, 35) */
                                NEXTSTATE wait_for_tc;
                            /* CIF STATE (832, 164), (123, 35) */
                            STATE Processing_tc;
                                /* CIF INPUT (850, 219), (85, 35) */
                                INPUT timer2;
                                    /* CIF PROCEDURECALL (792, 269), (200, 35) */
                                    CALL writeln('TC2 completed');
                                    /* CIF NEXTSTATE (839, 319), (106, 35) */
                                    NEXTSTATE wait_for_tc;
                            ENDSTATE;
                            /* CIF STATE (494, 134), (106, 35) */
                            STATE wait_for_tc;
                                /* CIF PROVIDED (507, 189), (79, 35) */
                                PROVIDED got_tc;
                                    /* CIF TASK (483, 239), (126, 35) */
                                    TASK got_tc := false;
                                    /* CIF PROCEDURECALL (446, 289), (201, 35) */
                                    CALL writeln('Processing TC 2');
                                    /* CIF PROCEDURECALL (454, 339), (184, 35) */
                                    CALL set_timer(5000, timer2);
                                    /* CIF NEXTSTATE (483, 389), (126, 35) */
                                    NEXTSTATE Processing_TC;
                            ENDSTATE;
                    ENDSUBSTRUCTURE;
                    STATE generic_tc_handler_1;
                    SUBSTRUCTURE
                            /* CIF TEXT (131, 91), (323, 140) */
                            -- Model a generic TC handler. The content of this
-- state can be copied several times, to manage
-- several TC in parallel.
                            /* CIF ENDTEXT */
                            /* CIF START (490, 84), (70, 35) */
                            START;
                                /* CIF NEXTSTATE (472, 134), (106, 35) */
                                NEXTSTATE wait_for_tc;
                            /* CIF STATE (667, 182), (123, 35) */
                            STATE Processing_tc;
                                /* CIF INPUT (689, 237), (78, 35) */
                                INPUT timer1;
                                    /* CIF PROCEDURECALL (631, 287), (193, 35) */
                                    CALL writeln('TC1 completed');
                                    /* CIF NEXTSTATE (675, 337), (106, 35) */
                                    NEXTSTATE wait_for_tc;
                            ENDSTATE;
                            /* CIF STATE (472, 134), (106, 35) */
                            STATE wait_for_tc;
                                /* CIF PROVIDED (485, 189), (79, 35) */
                                PROVIDED got_tc;
                                    /* CIF TASK (461, 239), (126, 35) */
                                    TASK got_tc := false;
                                    /* CIF PROCEDURECALL (427, 289), (194, 35) */
                                    CALL writeln('Processing TC 1');
                                    /* CIF PROCEDURECALL (432, 339), (184, 35) */
                                    CALL set_timer(5000, timer1);
                                    /* CIF NEXTSTATE (461, 389), (126, 35) */
                                    NEXTSTATE Processing_TC;
                            ENDSTATE;
                    ENDSUBSTRUCTURE;
                    /* CIF STATE (370, 168), (182, 35) */
                    STATE generic_tc_handler_1;
                    ENDSTATE;
                    /* CIF STATE (381, 338), (169, 35) */
                    STATE generic_tc_handler_2;
                    ENDSTATE;
                    /* CIF STATE (226, 0), (113, 35) */
                    STATE tc_router;
                    ENDSTATE;
                    /* CIF STATE (443, 507), (153, 35) */
                    STATE exception_handler;
                    ENDSTATE;
            ENDSUBSTRUCTURE;
            /* CIF TEXT (665, 310), (327, 208) */
            -- This system tests the provided clause
-- (continuous signal)

dcl tc TC_type;

dcl tm TM_type;

dcl got_tc Boolean_type;

dcl failure boolean_Type := false;

timer timer1, timer2;
            /* CIF ENDTEXT */
            /* CIF START (351, 297), (70, 35) */
            START;
                /* CIF NEXTSTATE (354, 348), (63, 35) */
                NEXTSTATE wait;
            /* CIF STATE (485, 344), (99, 35) */
            STATE wait;
                /* CIF PROVIDED (345, 399), (97, 38) */
                PROVIDED failure;
priority 2;
                    /* CIF PROCEDURECALL (261, 455), (264, 35) */
                    CALL writeln('Going to SAFE mode');
                    /* CIF NEXTSTATE (358, 505), (70, 35) */
                    NEXTSTATE safe;
                /* CIF PROVIDED (535, 399), (113, 38) */
                PROVIDED true = false;;
                    /* CIF NEXTSTATE (556, 452), (70, 35) */
                    NEXTSTATE wait;
            ENDSTATE;
            /* CIF STATE (347, 583), (70, 35) */
            STATE safe;
            ENDSTATE;
        ENDPROCESS og;
    ENDBLOCK;
ENDSYSTEM;