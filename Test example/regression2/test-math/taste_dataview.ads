-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_Dataview with SPARK_Mode
IS


SUBTYPE Boolean is adaasn1rtl.Asn1Boolean;


function Boolean_Equal(val1, val2: in Boolean) return Boolean;

function Boolean_Init return Boolean;

ERR_BOOLEAN:CONSTANT INTEGER := 1; -- 
FUNCTION Boolean_IsConstraintValid(val : in Boolean) return adaasn1rtl.ASN1_RESULT;
-- BoolSeqOf --------------------------------------------
SUBTYPE BoolSeqOf_index is integer range 1..4;
TYPE BoolSeqOf_array IS ARRAY (BoolSeqOf_index) OF Boolean;
TYPE BoolSeqOf IS  RECORD
    Data  : BoolSeqOf_array;
END RECORD;

function BoolSeqOf_Equal(val1, val2: in BoolSeqOf) return Boolean;

function BoolSeqOf_Init return BoolSeqOf;

ERR_BOOLSEQOF_ELM:CONSTANT INTEGER := 149; 
FUNCTION BoolSeqOf_IsConstraintValid(val : in BoolSeqOf) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Integer is adaasn1rtl.Asn1Int range -9223372036854775808 .. 9223372036854775807;


function Integer_Equal(val1, val2: in Integer) return Boolean;

function Integer_Init return Integer;

ERR_INTEGER:CONSTANT INTEGER := 8; -- 
FUNCTION Integer_IsConstraintValid(val : in Integer) return adaasn1rtl.ASN1_RESULT;
-- FixSeqof --------------------------------------------
SUBTYPE FixSeqof_index is integer range 1..3;
TYPE FixSeqof_array IS ARRAY (FixSeqof_index) OF Integer;
TYPE FixSeqof IS  RECORD
    Data  : FixSeqof_array;
END RECORD;

function FixSeqof_Equal(val1, val2: in FixSeqof) return Boolean;

function FixSeqof_Init return FixSeqof;

ERR_FIXSEQOF_ELM:CONSTANT INTEGER := 29; 
FUNCTION FixSeqof_IsConstraintValid(val : in FixSeqof) return adaasn1rtl.ASN1_RESULT;
-- VarSeqof --------------------------------------------
SUBTYPE VarSeqof_index is integer range 1..100;
TYPE VarSeqof_array IS ARRAY (VarSeqof_index) OF Integer;
SUBTYPE VarSeqof_length_index is integer range 0..100;
TYPE VarSeqof IS  RECORD
    Length : VarSeqof_length_index;
    Data  : VarSeqof_array;
END RECORD;

function VarSeqof_Equal(val1, val2: in VarSeqof) return Boolean;

function VarSeqof_Init return VarSeqof;

ERR_VARSEQOF_ELM:CONSTANT INTEGER := 46; 
ERR_VARSEQOF:CONSTANT INTEGER := 57; 
FUNCTION VarSeqof_IsConstraintValid(val : in VarSeqof) return adaasn1rtl.ASN1_RESULT;
-- NestedSeq --------------------------------------------
-- NestedSeq_a --------------------------------------------
-- NestedSeq_a_b --------------------------------------------
-- NestedSeq_a_b_c --------------------------------------------

TYPE NestedSeq_a_b_c IS RECORD 
    d : Integer;
END RECORD;

TYPE NestedSeq_a_b IS RECORD 
    c : NestedSeq_a_b_c;
END RECORD;

TYPE NestedSeq_a IS RECORD 
    b : NestedSeq_a_b;
END RECORD;

TYPE NestedSeq IS RECORD 
    a : NestedSeq_a;
END RECORD;

function NestedSeq_a_b_c_Equal(val1, val2: in NestedSeq_a_b_c) return Boolean;

function NestedSeq_a_b_Equal(val1, val2: in NestedSeq_a_b) return Boolean;

function NestedSeq_a_Equal(val1, val2: in NestedSeq_a) return Boolean;

function NestedSeq_Equal(val1, val2: in NestedSeq) return Boolean;

function NestedSeq_a_b_c_Init return NestedSeq_a_b_c;
function NestedSeq_a_b_Init return NestedSeq_a_b;
function NestedSeq_a_Init return NestedSeq_a;
function NestedSeq_Init return NestedSeq;

ERR_NESTEDSEQ_A_B_C_D:CONSTANT INTEGER := 114; 
FUNCTION NestedSeq_IsConstraintValid(val : in NestedSeq) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Real is adaasn1rtl.Asn1Real;


function Real_Equal(val1, val2: in Real) return Boolean;

function Real_Init return Real;

ERR_REAL:CONSTANT INTEGER := 15; -- 
FUNCTION Real_IsConstraintValid(val : in Real) return adaasn1rtl.ASN1_RESULT;
SUBTYPE CharString_index is integer range 1..100;
SUBTYPE CharString_array IS adaasn1rtl.OctetBuffer(CharString_index);
SUBTYPE CharString_length_index is integer range 0..100;
TYPE CharString IS  RECORD
    Length : CharString_length_index;
    Data  : CharString_array;
END RECORD;

function CharString_Equal(val1, val2: in CharString) return Boolean;

function CharString_Init return CharString;

ERR_CHARSTRING:CONSTANT INTEGER := 22; -- 
FUNCTION CharString_IsConstraintValid(val : in CharString) return adaasn1rtl.ASN1_RESULT;
-- Seq --------------------------------------------

TYPE Seq IS RECORD 
    i : Integer;
    b : Boolean;
    f : Real;
    s : CharString;
END RECORD;

function Seq_Equal(val1, val2: in Seq) return Boolean;

function Seq_Init return Seq;

ERR_SEQ_I:CONSTANT INTEGER := 64; 
ERR_SEQ_B:CONSTANT INTEGER := 75; 
ERR_SEQ_F:CONSTANT INTEGER := 86; 
ERR_SEQ_S:CONSTANT INTEGER := 97; 
FUNCTION Seq_IsConstraintValid(val : in Seq) return adaasn1rtl.ASN1_RESULT;

 

private
   --# hide TASTE_Dataview;


END TASTE_Dataview;