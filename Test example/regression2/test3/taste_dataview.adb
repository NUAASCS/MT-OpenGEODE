-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;


PACKAGE BODY TASTE_Dataview with SPARK_Mode IS




function FCE_SIT_2_sc_conf_Equal(val1, val2: in FCE_SIT_2_sc_conf)
    return Boolean 
is
begin
	return val1 = val2;

end FCE_SIT_2_sc_conf_Equal;

function FCE_SIT_2_Equal(val1, val2: in FCE_SIT_2)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.is_sep_phase = val2.is_sep_phase);

    if ret then
        ret := (val1.sa_is_edge_on_sun_alwd = val2.sa_is_edge_on_sun_alwd);

        if ret then
            ret := FCE_SIT_2_sc_conf_Equal(val1.sc_conf, val2.sc_conf);

        end if;
    end if;
	return ret;

end FCE_SIT_2_Equal;

function FCE_SIT_2_sc_conf_Init return FCE_SIT_2_sc_conf
is
    val: FCE_SIT_2_sc_conf;
begin
    val := mcsc;
    return val;
end FCE_SIT_2_sc_conf_Init;
function FCE_SIT_2_Init return FCE_SIT_2
is
    val: FCE_SIT_2;
begin

    --set is_sep_phase 
    val.is_sep_phase := FALSE;
    --set sa_is_edge_on_sun_alwd 
    val.sa_is_edge_on_sun_alwd := FALSE;
    --set sc_conf 
    val.sc_conf := FCE_SIT_2_sc_conf_Init;
    return val;
end FCE_SIT_2_Init;

FUNCTION FCE_SIT_2_IsConstraintValid(val : in FCE_SIT_2) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_SIT_2_IS_SEP_PHASE);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_SIT_2_SA_IS_EDGE_ON_SUN_ALWD);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((val.sc_conf = mcsc)) OR ((val.sc_conf = mcsa)))) OR ((val.sc_conf = mcso)))) OR ((val.sc_conf = mpo))), ErrorCode => ERR_FCE_SIT_2_SC_CONF);
        end if;

    end if;

    RETURN ret;
END FCE_SIT_2_IsConstraintValid;



function FCE_SIT_3_Equal(val1, val2: in FCE_SIT_3)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.nothing = val2.nothing);

	return ret;

end FCE_SIT_3_Equal;

function FCE_SIT_3_Init return FCE_SIT_3
is
    val: FCE_SIT_3;
begin

    --set nothing 
    val.nothing := FALSE;
    return val;
end FCE_SIT_3_Init;

FUNCTION FCE_SIT_3_IsConstraintValid(val : in FCE_SIT_3) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_SIT_3_NOTHING);
    RETURN ret;
END FCE_SIT_3_IsConstraintValid;



function A_or_B_Equal(val1, val2: in A_or_B)
    return Boolean 
is
begin
	return val1 = val2;

end A_or_B_Equal;

function A_or_B_Init return A_or_B
is
    val: A_or_B;
begin
    val := a;
    return val;
end A_or_B_Init;

FUNCTION A_or_B_IsConstraintValid(val : in A_or_B) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val = a)) OR ((val = b))), ErrorCode => ERR_A_OR_B);
    RETURN ret;
END A_or_B_IsConstraintValid;



function IMU_cnf_g_Equal(val1, val2: in IMU_cnf_g)
    return Boolean 
is
begin
	return val1 = val2;

end IMU_cnf_g_Equal;

function IMU_Equal(val1, val2: in IMU)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.cnf_n = val2.cnf_n);

    if ret then
        ret := (val1.cnf_r = val2.cnf_r);

        if ret then
            ret := IMU_cnf_g_Equal(val1.cnf_g, val2.cnf_g);

        end if;
    end if;
	return ret;

end IMU_Equal;

function IMU_cnf_g_Init return IMU_cnf_g
is
    val: IMU_cnf_g;
begin
    val := 0;
    return val;
end IMU_cnf_g_Init;
function IMU_Init return IMU
is
    val: IMU;
begin

    --set cnf_n 
    val.cnf_n := A_or_B_Init;
    --set cnf_r 
    val.cnf_r := A_or_B_Init;
    --set cnf_g 
    val.cnf_g := IMU_cnf_g_Init;
    return val;
end IMU_Init;

FUNCTION IMU_IsConstraintValid(val : in IMU) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cnf_n = a)) OR ((val.cnf_n = b))), ErrorCode => ERR_IMU_CNF_N);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cnf_r = a)) OR ((val.cnf_r = b))), ErrorCode => ERR_IMU_CNF_R);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.cnf_g <= 100), ErrorCode => ERR_IMU_CNF_G);
        end if;

    end if;

    RETURN ret;
END IMU_IsConstraintValid;



function CPST_CNF_Equal(val1, val2: in CPST_CNF)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.cpst1_cnf_n = val2.cpst1_cnf_n);

    if ret then
        ret := (val1.cpst2_cnf_n = val2.cpst2_cnf_n);

        if ret then
            ret := (val1.cpst1_cnf_r = val2.cpst1_cnf_r);

            if ret then
                ret := (val1.cpst2_cnf_r = val2.cpst2_cnf_r);

            end if;
        end if;
    end if;
	return ret;

end CPST_CNF_Equal;

function CPST_CNF_Init return CPST_CNF
is
    val: CPST_CNF;
begin

    --set cpst1_cnf_n 
    val.cpst1_cnf_n := A_or_B_Init;
    --set cpst2_cnf_n 
    val.cpst2_cnf_n := A_or_B_Init;
    --set cpst1_cnf_r 
    val.cpst1_cnf_r := A_or_B_Init;
    --set cpst2_cnf_r 
    val.cpst2_cnf_r := A_or_B_Init;
    return val;
end CPST_CNF_Init;

FUNCTION CPST_CNF_IsConstraintValid(val : in CPST_CNF) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpst1_cnf_n = a)) OR ((val.cpst1_cnf_n = b))), ErrorCode => ERR_CPST_CNF_CPST1_CNF_N);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpst2_cnf_n = a)) OR ((val.cpst2_cnf_n = b))), ErrorCode => ERR_CPST_CNF_CPST2_CNF_N);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpst1_cnf_r = a)) OR ((val.cpst1_cnf_r = b))), ErrorCode => ERR_CPST_CNF_CPST1_CNF_R);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpst2_cnf_r = a)) OR ((val.cpst2_cnf_r = b))), ErrorCode => ERR_CPST_CNF_CPST2_CNF_R);
            end if;

        end if;

    end if;

    RETURN ret;
END CPST_CNF_IsConstraintValid;



function SADT_CNF_Equal(val1, val2: in SADT_CNF)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.cnf_n = val2.cnf_n);

    if ret then
        ret := (val1.cnf_r = val2.cnf_r);

    end if;
	return ret;

end SADT_CNF_Equal;

function SADT_CNF_Init return SADT_CNF
is
    val: SADT_CNF;
begin

    --set cnf_n 
    val.cnf_n := A_or_B_Init;
    --set cnf_r 
    val.cnf_r := A_or_B_Init;
    return val;
end SADT_CNF_Init;

FUNCTION SADT_CNF_IsConstraintValid(val : in SADT_CNF) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cnf_n = a)) OR ((val.cnf_n = b))), ErrorCode => ERR_SADT_CNF_CNF_N);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cnf_r = a)) OR ((val.cnf_r = b))), ErrorCode => ERR_SADT_CNF_CNF_R);
    end if;

    RETURN ret;
END SADT_CNF_IsConstraintValid;



function CPSP_CNF_Equal(val1, val2: in CPSP_CNF)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.cpsp1_cnf_n = val2.cpsp1_cnf_n);

    if ret then
        ret := (val1.cpsp2_cnf_n = val2.cpsp2_cnf_n);

        if ret then
            ret := (val1.cpsp1_cnf_r = val2.cpsp1_cnf_r);

            if ret then
                ret := (val1.cpsp2_cnf_r = val2.cpsp2_cnf_r);

            end if;
        end if;
    end if;
	return ret;

end CPSP_CNF_Equal;

function CPSP_CNF_Init return CPSP_CNF
is
    val: CPSP_CNF;
begin

    --set cpsp1_cnf_n 
    val.cpsp1_cnf_n := A_or_B_Init;
    --set cpsp2_cnf_n 
    val.cpsp2_cnf_n := A_or_B_Init;
    --set cpsp1_cnf_r 
    val.cpsp1_cnf_r := A_or_B_Init;
    --set cpsp2_cnf_r 
    val.cpsp2_cnf_r := A_or_B_Init;
    return val;
end CPSP_CNF_Init;

FUNCTION CPSP_CNF_IsConstraintValid(val : in CPSP_CNF) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpsp1_cnf_n = a)) OR ((val.cpsp1_cnf_n = b))), ErrorCode => ERR_CPSP_CNF_CPSP1_CNF_N);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpsp2_cnf_n = a)) OR ((val.cpsp2_cnf_n = b))), ErrorCode => ERR_CPSP_CNF_CPSP2_CNF_N);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpsp1_cnf_r = a)) OR ((val.cpsp1_cnf_r = b))), ErrorCode => ERR_CPSP_CNF_CPSP1_CNF_R);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpsp2_cnf_r = a)) OR ((val.cpsp2_cnf_r = b))), ErrorCode => ERR_CPSP_CNF_CPSP2_CNF_R);
            end if;

        end if;

    end if;

    RETURN ret;
END CPSP_CNF_IsConstraintValid;



function SADP_CNF_Equal(val1, val2: in SADP_CNF)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.cnf_n = val2.cnf_n);

    if ret then
        ret := (val1.cnf_r = val2.cnf_r);

    end if;
	return ret;

end SADP_CNF_Equal;

function SADP_CNF_Init return SADP_CNF
is
    val: SADP_CNF;
begin

    --set cnf_n 
    val.cnf_n := A_or_B_Init;
    --set cnf_r 
    val.cnf_r := A_or_B_Init;
    return val;
end SADP_CNF_Init;

FUNCTION SADP_CNF_IsConstraintValid(val : in SADP_CNF) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cnf_n = a)) OR ((val.cnf_n = b))), ErrorCode => ERR_SADP_CNF_CNF_N);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cnf_r = a)) OR ((val.cnf_r = b))), ErrorCode => ERR_SADP_CNF_CNF_R);
    end if;

    RETURN ret;
END SADP_CNF_IsConstraintValid;



function D_or_X_Equal(val1, val2: in D_or_X)
    return Boolean 
is
begin
	return val1 = val2;

end D_or_X_Equal;

function D_or_X_Init return D_or_X
is
    val: D_or_X;
begin
    val := d;
    return val;
end D_or_X_Init;

FUNCTION D_or_X_IsConstraintValid(val : in D_or_X) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val = d)) OR ((val = x))), ErrorCode => ERR_D_OR_X);
    RETURN ret;
END D_or_X_IsConstraintValid;



function FCE_SIT_1_Equal(val1, val2: in FCE_SIT_1)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := IMU_Equal(val1.imu_1, val2.imu_1);

    if ret then
        ret := IMU_Equal(val1.imu_2, val2.imu_2);

        if ret then
            ret := (val1.riup_cnf_n = val2.riup_cnf_n);

            if ret then
                ret := (val1.riup_cnf_r = val2.riup_cnf_r);

                if ret then
                    ret := (val1.riup_cnf_pwr_io_n = val2.riup_cnf_pwr_io_n);

                    if ret then
                        ret := (val1.riup_cnf_pwr_io_r = val2.riup_cnf_pwr_io_r);

                        if ret then
                            ret := (val1.spwr_cnf_n = val2.spwr_cnf_n);

                            if ret then
                                ret := (val1.spwr_cnf_r = val2.spwr_cnf_r);

                                if ret then
                                    ret := (val1.rium_cnf_n = val2.rium_cnf_n);

                                    if ret then
                                        ret := (val1.rium_cnf_r = val2.rium_cnf_r);

                                        if ret then
                                            ret := (val1.rium_cnf_pwr_io_n = val2.rium_cnf_pwr_io_n);

                                            if ret then
                                                ret := (val1.rium_cnf_pwr_io_r = val2.rium_cnf_pwr_io_r);

                                                if ret then
                                                    ret := CPST_CNF_Equal(val1.cpst, val2.cpst);

                                                    if ret then
                                                        ret := SADT_CNF_Equal(val1.sadt, val2.sadt);

                                                        if ret then
                                                            ret := CPSP_CNF_Equal(val1.cpsp, val2.cpsp);

                                                            if ret then
                                                                ret := SADP_CNF_Equal(val1.sadp, val2.sadp);

                                                            end if;
                                                        end if;
                                                    end if;
                                                end if;
                                            end if;
                                        end if;
                                    end if;
                                end if;
                            end if;
                        end if;
                    end if;
                end if;
            end if;
        end if;
    end if;
	return ret;

end FCE_SIT_1_Equal;

function FCE_SIT_1_Init return FCE_SIT_1
is
    val: FCE_SIT_1;
begin

    --set imu_1 
    val.imu_1 := IMU_Init;
    --set imu_2 
    val.imu_2 := IMU_Init;
    --set riup_cnf_n 
    val.riup_cnf_n := A_or_B_Init;
    --set riup_cnf_r 
    val.riup_cnf_r := A_or_B_Init;
    --set riup_cnf_pwr_io_n 
    val.riup_cnf_pwr_io_n := A_or_B_Init;
    --set riup_cnf_pwr_io_r 
    val.riup_cnf_pwr_io_r := A_or_B_Init;
    --set spwr_cnf_n 
    val.spwr_cnf_n := D_or_X_Init;
    --set spwr_cnf_r 
    val.spwr_cnf_r := D_or_X_Init;
    --set rium_cnf_n 
    val.rium_cnf_n := A_or_B_Init;
    --set rium_cnf_r 
    val.rium_cnf_r := A_or_B_Init;
    --set rium_cnf_pwr_io_n 
    val.rium_cnf_pwr_io_n := A_or_B_Init;
    --set rium_cnf_pwr_io_r 
    val.rium_cnf_pwr_io_r := A_or_B_Init;
    --set cpst 
    val.cpst := CPST_CNF_Init;
    --set sadt 
    val.sadt := SADT_CNF_Init;
    --set cpsp 
    val.cpsp := CPSP_CNF_Init;
    --set sadp 
    val.sadp := SADP_CNF_Init;
    return val;
end FCE_SIT_1_Init;

FUNCTION FCE_SIT_1_IsConstraintValid(val : in FCE_SIT_1) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.imu_1.cnf_n = a)) OR ((val.imu_1.cnf_n = b))), ErrorCode => ERR_FCE_SIT_1_IMU_1_CNF_N);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.imu_1.cnf_r = a)) OR ((val.imu_1.cnf_r = b))), ErrorCode => ERR_FCE_SIT_1_IMU_1_CNF_R);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.imu_1.cnf_g <= 100), ErrorCode => ERR_FCE_SIT_1_IMU_1_CNF_G);
        end if;

    end if;

    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.imu_2.cnf_n = a)) OR ((val.imu_2.cnf_n = b))), ErrorCode => ERR_FCE_SIT_1_IMU_2_CNF_N);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.imu_2.cnf_r = a)) OR ((val.imu_2.cnf_r = b))), ErrorCode => ERR_FCE_SIT_1_IMU_2_CNF_R);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.imu_2.cnf_g <= 100), ErrorCode => ERR_FCE_SIT_1_IMU_2_CNF_G);
            end if;

        end if;

        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.riup_cnf_n = a)) OR ((val.riup_cnf_n = b))), ErrorCode => ERR_FCE_SIT_1_RIUP_CNF_N);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.riup_cnf_r = a)) OR ((val.riup_cnf_r = b))), ErrorCode => ERR_FCE_SIT_1_RIUP_CNF_R);
                if ret.Success then
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.riup_cnf_pwr_io_n = a)) OR ((val.riup_cnf_pwr_io_n = b))), ErrorCode => ERR_FCE_SIT_1_RIUP_CNF_PWR_IO_N);
                    if ret.Success then
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.riup_cnf_pwr_io_r = a)) OR ((val.riup_cnf_pwr_io_r = b))), ErrorCode => ERR_FCE_SIT_1_RIUP_CNF_PWR_IO_R);
                        if ret.Success then
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.spwr_cnf_n = d)) OR ((val.spwr_cnf_n = x))), ErrorCode => ERR_FCE_SIT_1_SPWR_CNF_N);
                            if ret.Success then
                                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.spwr_cnf_r = d)) OR ((val.spwr_cnf_r = x))), ErrorCode => ERR_FCE_SIT_1_SPWR_CNF_R);
                                if ret.Success then
                                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.rium_cnf_n = a)) OR ((val.rium_cnf_n = b))), ErrorCode => ERR_FCE_SIT_1_RIUM_CNF_N);
                                    if ret.Success then
                                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.rium_cnf_r = a)) OR ((val.rium_cnf_r = b))), ErrorCode => ERR_FCE_SIT_1_RIUM_CNF_R);
                                        if ret.Success then
                                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.rium_cnf_pwr_io_n = a)) OR ((val.rium_cnf_pwr_io_n = b))), ErrorCode => ERR_FCE_SIT_1_RIUM_CNF_PWR_IO_N);
                                            if ret.Success then
                                                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.rium_cnf_pwr_io_r = a)) OR ((val.rium_cnf_pwr_io_r = b))), ErrorCode => ERR_FCE_SIT_1_RIUM_CNF_PWR_IO_R);
                                                if ret.Success then
                                                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpst.cpst1_cnf_n = a)) OR ((val.cpst.cpst1_cnf_n = b))), ErrorCode => ERR_FCE_SIT_1_CPST_CPST1_CNF_N);
                                                    if ret.Success then
                                                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpst.cpst2_cnf_n = a)) OR ((val.cpst.cpst2_cnf_n = b))), ErrorCode => ERR_FCE_SIT_1_CPST_CPST2_CNF_N);
                                                        if ret.Success then
                                                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpst.cpst1_cnf_r = a)) OR ((val.cpst.cpst1_cnf_r = b))), ErrorCode => ERR_FCE_SIT_1_CPST_CPST1_CNF_R);
                                                            if ret.Success then
                                                                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpst.cpst2_cnf_r = a)) OR ((val.cpst.cpst2_cnf_r = b))), ErrorCode => ERR_FCE_SIT_1_CPST_CPST2_CNF_R);
                                                            end if;

                                                        end if;

                                                    end if;

                                                    if ret.Success then
                                                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sadt.cnf_n = a)) OR ((val.sadt.cnf_n = b))), ErrorCode => ERR_FCE_SIT_1_SADT_CNF_N);
                                                        if ret.Success then
                                                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sadt.cnf_r = a)) OR ((val.sadt.cnf_r = b))), ErrorCode => ERR_FCE_SIT_1_SADT_CNF_R);
                                                        end if;

                                                        if ret.Success then
                                                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpsp.cpsp1_cnf_n = a)) OR ((val.cpsp.cpsp1_cnf_n = b))), ErrorCode => ERR_FCE_SIT_1_CPSP_CPSP1_CNF_N);
                                                            if ret.Success then
                                                                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpsp.cpsp2_cnf_n = a)) OR ((val.cpsp.cpsp2_cnf_n = b))), ErrorCode => ERR_FCE_SIT_1_CPSP_CPSP2_CNF_N);
                                                                if ret.Success then
                                                                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpsp.cpsp1_cnf_r = a)) OR ((val.cpsp.cpsp1_cnf_r = b))), ErrorCode => ERR_FCE_SIT_1_CPSP_CPSP1_CNF_R);
                                                                    if ret.Success then
                                                                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.cpsp.cpsp2_cnf_r = a)) OR ((val.cpsp.cpsp2_cnf_r = b))), ErrorCode => ERR_FCE_SIT_1_CPSP_CPSP2_CNF_R);
                                                                    end if;

                                                                end if;

                                                            end if;

                                                            if ret.Success then
                                                                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sadp.cnf_n = a)) OR ((val.sadp.cnf_n = b))), ErrorCode => ERR_FCE_SIT_1_SADP_CNF_N);
                                                                if ret.Success then
                                                                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sadp.cnf_r = a)) OR ((val.sadp.cnf_r = b))), ErrorCode => ERR_FCE_SIT_1_SADP_CNF_R);
                                                                end if;

                                                            end if;

                                                        end if;

                                                    end if;

                                                end if;

                                            end if;

                                        end if;

                                    end if;

                                end if;

                            end if;

                        end if;

                    end if;

                end if;

            end if;

        end if;

    end if;

    RETURN ret;
END FCE_SIT_1_IsConstraintValid;



function FCE_RECOVERY_STATUS_REGISTER_Equal(val1, val2: in FCE_RECOVERY_STATUS_REGISTER)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.l2rec = val2.l2rec);

    if ret then
        ret := (val1.l3rec = val2.l3rec);

    end if;
	return ret;

end FCE_RECOVERY_STATUS_REGISTER_Equal;

function FCE_RECOVERY_STATUS_REGISTER_Init return FCE_RECOVERY_STATUS_REGISTER
is
    val: FCE_RECOVERY_STATUS_REGISTER;
begin

    --set l2rec 
    val.l2rec := FALSE;
    --set l3rec 
    val.l3rec := FALSE;
    return val;
end FCE_RECOVERY_STATUS_REGISTER_Init;

FUNCTION FCE_RECOVERY_STATUS_REGISTER_IsConstraintValid(val : in FCE_RECOVERY_STATUS_REGISTER) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_RECOVERY_STATUS_REGISTER_L2REC);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_RECOVERY_STATUS_REGISTER_L3REC);
    end if;

    RETURN ret;
END FCE_RECOVERY_STATUS_REGISTER_IsConstraintValid;



function Counter_ty_Equal(val1, val2: in Counter_ty)
    return Boolean 
is
begin
	return val1 = val2;

end Counter_ty_Equal;

function Counter_ty_Init return Counter_ty
is
    val: Counter_ty;
begin
    val := 0;
    return val;
end Counter_ty_Init;

FUNCTION Counter_ty_IsConstraintValid(val : in Counter_ty) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 65535), ErrorCode => ERR_COUNTER_TY);
    RETURN ret;
END Counter_ty_IsConstraintValid;



function FCE_SIT_4_rc_Equal(val1, val2: in FCE_SIT_4_rc)
    return Boolean 
is
begin
	return val1 = val2;

end FCE_SIT_4_rc_Equal;

function FCE_SIT_4_Equal(val1, val2: in FCE_SIT_4)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := FCE_SIT_4_rc_Equal(val1.rc, val2.rc);

    if ret then
        ret := (val1.ground_cmd_reset = val2.ground_cmd_reset);

        if ret then
            ret := val1.Exist.test_mode_counter = val2.Exist.test_mode_counter;
            if ret and then val1.Exist.test_mode_counter = 1 then
                ret := (val1.test_mode_counter = val2.test_mode_counter);
            end if;

        end if;
    end if;
	return ret;

end FCE_SIT_4_Equal;

function FCE_SIT_4_rc_Init return FCE_SIT_4_rc
is
    val: FCE_SIT_4_rc;
begin
    val := 1;
    return val;
end FCE_SIT_4_rc_Init;
function FCE_SIT_4_Init return FCE_SIT_4
is
    val: FCE_SIT_4;
begin

    --set rc 
    val.rc := FCE_SIT_4_rc_Init;
    --set ground_cmd_reset 
    val.ground_cmd_reset := FALSE;
    --set test_mode_counter 
    val.exist.test_mode_counter := 1;
    val.test_mode_counter := Counter_ty_Init;
    return val;
end FCE_SIT_4_Init;

FUNCTION FCE_SIT_4_IsConstraintValid(val : in FCE_SIT_4) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => ((1 <= val.rc) AND (val.rc <= 5)), ErrorCode => ERR_FCE_SIT_4_RC);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_SIT_4_GROUND_CMD_RESET);
        if ret.Success then
            if val.Exist.test_mode_counter = 1 then
                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.test_mode_counter <= 65535), ErrorCode => ERR_FCE_SIT_4_TEST_MODE_COUNTER);
            end if;
        end if;

    end if;

    RETURN ret;
END FCE_SIT_4_IsConstraintValid;



function FCE_SGM_EEPROM_Equal(val1, val2: in FCE_SGM_EEPROM)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := FCE_SIT_1_Equal(val1.sit_1, val2.sit_1);

    if ret then
        ret := FCE_SIT_3_Equal(val1.sit_3, val2.sit_3);

        if ret then
            ret := FCE_SIT_2_Equal(val1.sit_2, val2.sit_2);

            if ret then
                ret := FCE_SIT_4_Equal(val1.sit_4, val2.sit_4);

            end if;
        end if;
    end if;
	return ret;

end FCE_SGM_EEPROM_Equal;

function FCE_SGM_EEPROM_Init return FCE_SGM_EEPROM
is
    val: FCE_SGM_EEPROM;
begin

    --set sit_1 
    val.sit_1 := FCE_SIT_1_Init;
    --set sit_3 
    val.sit_3 := FCE_SIT_3_Init;
    --set sit_2 
    val.sit_2 := FCE_SIT_2_Init;
    --set sit_4 
    val.sit_4 := FCE_SIT_4_Init;
    return val;
end FCE_SGM_EEPROM_Init;

FUNCTION FCE_SGM_EEPROM_IsConstraintValid(val : in FCE_SGM_EEPROM) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.imu_1.cnf_n = a)) OR ((val.sit_1.imu_1.cnf_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_IMU_1_CNF_N);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.imu_1.cnf_r = a)) OR ((val.sit_1.imu_1.cnf_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_IMU_1_CNF_R);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.sit_1.imu_1.cnf_g <= 100), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_IMU_1_CNF_G);
        end if;

    end if;

    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.imu_2.cnf_n = a)) OR ((val.sit_1.imu_2.cnf_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_IMU_2_CNF_N);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.imu_2.cnf_r = a)) OR ((val.sit_1.imu_2.cnf_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_IMU_2_CNF_R);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.sit_1.imu_2.cnf_g <= 100), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_IMU_2_CNF_G);
            end if;

        end if;

        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.riup_cnf_n = a)) OR ((val.sit_1.riup_cnf_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_RIUP_CNF_N);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.riup_cnf_r = a)) OR ((val.sit_1.riup_cnf_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_RIUP_CNF_R);
                if ret.Success then
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.riup_cnf_pwr_io_n = a)) OR ((val.sit_1.riup_cnf_pwr_io_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_RIUP_CNF_PWR_IO_N);
                    if ret.Success then
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.riup_cnf_pwr_io_r = a)) OR ((val.sit_1.riup_cnf_pwr_io_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_RIUP_CNF_PWR_IO_R);
                        if ret.Success then
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.spwr_cnf_n = d)) OR ((val.sit_1.spwr_cnf_n = x))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_SPWR_CNF_N);
                            if ret.Success then
                                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.spwr_cnf_r = d)) OR ((val.sit_1.spwr_cnf_r = x))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_SPWR_CNF_R);
                                if ret.Success then
                                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.rium_cnf_n = a)) OR ((val.sit_1.rium_cnf_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_RIUM_CNF_N);
                                    if ret.Success then
                                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.rium_cnf_r = a)) OR ((val.sit_1.rium_cnf_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_RIUM_CNF_R);
                                        if ret.Success then
                                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.rium_cnf_pwr_io_n = a)) OR ((val.sit_1.rium_cnf_pwr_io_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_RIUM_CNF_PWR_IO_N);
                                            if ret.Success then
                                                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.rium_cnf_pwr_io_r = a)) OR ((val.sit_1.rium_cnf_pwr_io_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_RIUM_CNF_PWR_IO_R);
                                                if ret.Success then
                                                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.cpst.cpst1_cnf_n = a)) OR ((val.sit_1.cpst.cpst1_cnf_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_CPST_CPST1_CNF_N);
                                                    if ret.Success then
                                                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.cpst.cpst2_cnf_n = a)) OR ((val.sit_1.cpst.cpst2_cnf_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_CPST_CPST2_CNF_N);
                                                        if ret.Success then
                                                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.cpst.cpst1_cnf_r = a)) OR ((val.sit_1.cpst.cpst1_cnf_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_CPST_CPST1_CNF_R);
                                                            if ret.Success then
                                                                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.cpst.cpst2_cnf_r = a)) OR ((val.sit_1.cpst.cpst2_cnf_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_CPST_CPST2_CNF_R);
                                                            end if;

                                                        end if;

                                                    end if;

                                                    if ret.Success then
                                                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.sadt.cnf_n = a)) OR ((val.sit_1.sadt.cnf_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_SADT_CNF_N);
                                                        if ret.Success then
                                                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.sadt.cnf_r = a)) OR ((val.sit_1.sadt.cnf_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_SADT_CNF_R);
                                                        end if;

                                                        if ret.Success then
                                                            ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.cpsp.cpsp1_cnf_n = a)) OR ((val.sit_1.cpsp.cpsp1_cnf_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_CPSP_CPSP1_CNF_N);
                                                            if ret.Success then
                                                                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.cpsp.cpsp2_cnf_n = a)) OR ((val.sit_1.cpsp.cpsp2_cnf_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_CPSP_CPSP2_CNF_N);
                                                                if ret.Success then
                                                                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.cpsp.cpsp1_cnf_r = a)) OR ((val.sit_1.cpsp.cpsp1_cnf_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_CPSP_CPSP1_CNF_R);
                                                                    if ret.Success then
                                                                        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.cpsp.cpsp2_cnf_r = a)) OR ((val.sit_1.cpsp.cpsp2_cnf_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_CPSP_CPSP2_CNF_R);
                                                                    end if;

                                                                end if;

                                                            end if;

                                                            if ret.Success then
                                                                ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.sadp.cnf_n = a)) OR ((val.sit_1.sadp.cnf_n = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_SADP_CNF_N);
                                                                if ret.Success then
                                                                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.sit_1.sadp.cnf_r = a)) OR ((val.sit_1.sadp.cnf_r = b))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_1_SADP_CNF_R);
                                                                end if;

                                                            end if;

                                                        end if;

                                                    end if;

                                                end if;

                                            end if;

                                        end if;

                                    end if;

                                end if;

                            end if;

                        end if;

                    end if;

                end if;

            end if;

        end if;

    end if;

    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_SGM_EEPROM_SIT_3_NOTHING);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_SGM_EEPROM_SIT_2_IS_SEP_PHASE);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_SGM_EEPROM_SIT_2_SA_IS_EDGE_ON_SUN_ALWD);
                if ret.Success then
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((val.sit_2.sc_conf = mcsc)) OR ((val.sit_2.sc_conf = mcsa)))) OR ((val.sit_2.sc_conf = mcso)))) OR ((val.sit_2.sc_conf = mpo))), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_2_SC_CONF);
                end if;

            end if;

            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => ((1 <= val.sit_4.rc) AND (val.sit_4.rc <= 5)), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_4_RC);
                if ret.Success then
                    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_SGM_EEPROM_SIT_4_GROUND_CMD_RESET);
                    if ret.Success then
                        if val.sit_4.Exist.test_mode_counter = 1 then
                            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.sit_4.test_mode_counter <= 65535), ErrorCode => ERR_FCE_SGM_EEPROM_SIT_4_TEST_MODE_COUNTER);
                        end if;
                    end if;

                end if;

            end if;

        end if;

    end if;

    RETURN ret;
END FCE_SGM_EEPROM_IsConstraintValid;



function Bool_ty_Equal(val1, val2: in Bool_ty)
    return Boolean 
is
begin
	return val1 = val2;

end Bool_ty_Equal;

function Bool_ty_Init return Bool_ty
is
    val: Bool_ty;
begin
    val := FALSE;
    return val;
end Bool_ty_Init;

FUNCTION Bool_ty_IsConstraintValid(val : in Bool_ty) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_BOOL_TY);
    RETURN ret;
END Bool_ty_IsConstraintValid;



function Valid_ty_Equal(val1, val2: in Valid_ty)
    return Boolean 
is
begin
	return val1 = val2;

end Valid_ty_Equal;

function Valid_ty_Init return Valid_ty
is
    val: Valid_ty;
begin
    val := ok;
    return val;
end Valid_ty_Init;

FUNCTION Valid_ty_IsConstraintValid(val : in Valid_ty) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val = ok)) OR ((val = nok))), ErrorCode => ERR_VALID_TY);
    RETURN ret;
END Valid_ty_IsConstraintValid;



function FCE_CONTROL_FLAGS_STATUS_REGISTER_arr_dep_flag_Equal(val1, val2: in FCE_CONTROL_FLAGS_STATUS_REGISTER_arr_dep_flag)
    return Boolean 
is
begin
	return val1 = val2;

end FCE_CONTROL_FLAGS_STATUS_REGISTER_arr_dep_flag_Equal;

function FCE_CONTROL_FLAGS_STATUS_REGISTER_Equal(val1, val2: in FCE_CONTROL_FLAGS_STATUS_REGISTER)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := FCE_CONTROL_FLAGS_STATUS_REGISTER_arr_dep_flag_Equal(val1.arr_dep_flag, val2.arr_dep_flag);

    if ret then
        ret := (val1.reference_pattern = val2.reference_pattern);

    end if;
	return ret;

end FCE_CONTROL_FLAGS_STATUS_REGISTER_Equal;

function FCE_CONTROL_FLAGS_STATUS_REGISTER_arr_dep_flag_Init return FCE_CONTROL_FLAGS_STATUS_REGISTER_arr_dep_flag
is
    val: FCE_CONTROL_FLAGS_STATUS_REGISTER_arr_dep_flag;
begin
    val := majority;
    return val;
end FCE_CONTROL_FLAGS_STATUS_REGISTER_arr_dep_flag_Init;
function FCE_CONTROL_FLAGS_STATUS_REGISTER_Init return FCE_CONTROL_FLAGS_STATUS_REGISTER
is
    val: FCE_CONTROL_FLAGS_STATUS_REGISTER;
begin

    --set arr_dep_flag 
    val.arr_dep_flag := FCE_CONTROL_FLAGS_STATUS_REGISTER_arr_dep_flag_Init;
    --set reference_pattern 
    val.reference_pattern := Valid_ty_Init;
    return val;
end FCE_CONTROL_FLAGS_STATUS_REGISTER_Init;

FUNCTION FCE_CONTROL_FLAGS_STATUS_REGISTER_IsConstraintValid(val : in FCE_CONTROL_FLAGS_STATUS_REGISTER) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.arr_dep_flag = majority)) OR ((val.arr_dep_flag = minority))), ErrorCode => ERR_FCE_CONTROL_FLAGS_STATUS_REGISTER_ARR_DEP_FLAG);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.reference_pattern = ok)) OR ((val.reference_pattern = nok))), ErrorCode => ERR_FCE_CONTROL_FLAGS_STATUS_REGISTER_REFERENCE_PATTERN);
    end if;

    RETURN ret;
END FCE_CONTROL_FLAGS_STATUS_REGISTER_IsConstraintValid;



function Quaternion_ty_Equal(val1, val2: in Quaternion_ty)
    return Boolean 
is
begin
	return val1 = val2;

end Quaternion_ty_Equal;

function Quaternion_ty_Init return Quaternion_ty
is
    val: Quaternion_ty;
begin
    val := FALSE;
    return val;
end Quaternion_ty_Init;

FUNCTION Quaternion_ty_IsConstraintValid(val : in Quaternion_ty) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_QUATERNION_TY);
    RETURN ret;
END Quaternion_ty_IsConstraintValid;



function Angular_rate_ty_Equal(val1, val2: in Angular_rate_ty)
    return Boolean 
is
begin
	return val1 = val2;

end Angular_rate_ty_Equal;

function Angular_rate_ty_Init return Angular_rate_ty
is
    val: Angular_rate_ty;
begin
    val := FALSE;
    return val;
end Angular_rate_ty_Init;

FUNCTION Angular_rate_ty_IsConstraintValid(val : in Angular_rate_ty) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_ANGULAR_RATE_TY);
    RETURN ret;
END Angular_rate_ty_IsConstraintValid;



function FCE_SGM_RAM_llobt_Equal(val1, val2: in FCE_SGM_RAM_llobt)
    return Boolean 
is
begin
	return val1 = val2;

end FCE_SGM_RAM_llobt_Equal;

function FCE_SGM_RAM_Equal(val1, val2: in FCE_SGM_RAM)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := FCE_SGM_RAM_llobt_Equal(val1.llobt, val2.llobt);

    if ret then
        ret := (val1.llatt = val2.llatt);

        if ret then
            ret := (val1.llare = val2.llare);

        end if;
    end if;
	return ret;

end FCE_SGM_RAM_Equal;

function FCE_SGM_RAM_llobt_Init return FCE_SGM_RAM_llobt
is
    val: FCE_SGM_RAM_llobt;
begin
    val := 0;
    return val;
end FCE_SGM_RAM_llobt_Init;
function FCE_SGM_RAM_Init return FCE_SGM_RAM
is
    val: FCE_SGM_RAM;
begin

    --set llobt 
    val.llobt := FCE_SGM_RAM_llobt_Init;
    --set llatt 
    val.llatt := Quaternion_ty_Init;
    --set llare 
    val.llare := Angular_rate_ty_Init;
    return val;
end FCE_SGM_RAM_Init;

FUNCTION FCE_SGM_RAM_IsConstraintValid(val : in FCE_SGM_RAM) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.llobt <= 255), ErrorCode => ERR_FCE_SGM_RAM_LLOBT);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_SGM_RAM_LLATT);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_FCE_SGM_RAM_LLARE);
        end if;

    end if;

    RETURN ret;
END FCE_SGM_RAM_IsConstraintValid;


 

END TASTE_Dataview;