/* CIF PROCESS (151, 149), (150, 75) */
process controlflow;
    /* CIF TEXT (663, 97), (303, 168) */
    -- Declare your variables
    
    -- Syntax: DCL <variable name> <type name>;
    
    DCL n Integer;
    DCL b Boolean;
    DCL seq1 IntegerSeqOf;
    DCL seq2 IntegerSeqOf;
    /* CIF ENDTEXT */
    /* CIF START (290, 0), (70, 35) */
    START;
        /* CIF NEXTSTATE (290, 50), (70, 35) */
        NEXTSTATE Wait;
    /* CIF label (31, 1747), (78, 35) */
    connection label1:
        /* CIF PROCEDURECALL (0, 1797), (141, 35) */
        call writeln('label1');
        /* CIF join (53, 1847), (35, 35) */
        join label2;
    /* CIF End Label */
    endconnection;
    /* CIF label (289, 1904), (75, 35) */
    connection label2:
        /* CIF PROCEDURECALL (259, 1954), (136, 35) */
        call writeln('label2');
        /* CIF label (289, 2004), (75, 35) */
        label3:
        /* CIF PROCEDURECALL (259, 2054), (136, 35) */
        call writeln('label3');
        /* CIF NEXTSTATE (292, 2104), (70, 35) */
        NEXTSTATE wait;
    /* CIF End Label */
    endconnection;
    /* CIF state (290, 50), (70, 35) */
    state Wait;
        /* CIF input (290, 105), (70, 35) */
        input run;
            /* CIF task (154, 155), (343, 35) */
            task '------------------------------- Decision -------------------------------';
            /* CIF task (290, 205), (70, 35) */
            task n := 2;
            /* CIF decision (290, 255), (70, 50) */
            decision n;
                /* CIF ANSWER (216, 325), (70, 24) */
                (1):
                    /* CIF PROCEDURECALL (175, 364), (153, 35) */
                    call fail('decision else');
                /* CIF ANSWER (363, 325), (70, 24) */
                else:
            enddecision;
            /* CIF decision (290, 414), (70, 50) */
            decision n;
                /* CIF ANSWER (190, 484), (70, 24) */
                (1):
                    /* CIF PROCEDURECALL (133, 523), (184, 35) */
                    call fail( 'decision constant');
                /* CIF ANSWER (327, 484), (70, 24) */
                (2):
                /* CIF ANSWER (507, 484), (70, 24) */
                else:
                    /* CIF PROCEDURECALL (450, 523), (184, 35) */
                    call fail( 'decision constant');
            enddecision;
            /* CIF decision (290, 573), (70, 50) */
            decision n;
                /* CIF ANSWER (366, 643), (70, 24) */
                (<2):
                    /* CIF PROCEDURECALL (303, 682), (197, 35) */
                    call fail('decision open range');
                /* CIF ANSWER (133, 645), (70, 24) */
                (>1):
            enddecision;
            /* CIF decision (290, 732), (70, 50) */
            decision n;
                /* CIF ANSWER (458, 802), (70, 24) */
                (-1:1):
                    /* CIF PROCEDURECALL (382, 841), (223, 35) */
                    call fail('decision closed range');
                /* CIF ANSWER (290, 802), (70, 24) */
                (2:5):
                /* CIF ANSWER (114, 802), (70, 24) */
                else:
                    /* CIF PROCEDURECALL (47, 841), (205, 35) */
                    call fail('decision closed range');
            enddecision;
            /* CIF task (151, 891), (348, 35) */
            task '------------------------------- For loops -------------------------------';
            /* CIF task (290, 941), (70, 35) */
            task n := 0;
            /* CIF task (242, 991), (167, 56) */
            task for x in range(10):
   n := n + x mod 255
endfor;
            /* CIF PROCEDURECALL (207, 1062), (237, 35) */
            call assert(n = 45, 'for x in range(10)');
            /* CIF task (290, 1112), (70, 35) */
            task n := 0;
            /* CIF task (242, 1162), (167, 56) */
            task for x in range(4, 10):
   n := n + x mod 255
endfor;
            /* CIF PROCEDURECALL (200, 1233), (251, 35) */
            call assert(n = 39, 'for x in range(4, 10)');
            /* CIF task (290, 1283), (70, 35) */
            task n := 0;
            /* CIF task (221, 1333), (208, 56) */
            task for x in range(4, 10, 2):
    n := n + x mod 255
endfor;
            /* CIF PROCEDURECALL (191, 1404), (269, 35) */
            call assert(n = 18, 'for x in range(4, 10, 2)');
            /* CIF task (250, 1454), (150, 35) */
            task seq1 := {7, 8, 9, 10};
            /* CIF task (290, 1504), (70, 35) */
            task n := 0;
            /* CIF task (245, 1554), (160, 56) */
            task for x in seq1:
  n := n + x mod 255
endfor;
            /* CIF PROCEDURECALL (220, 1625), (210, 35) */
            call assert(n = 34, 'for x in seq1' );
            /* CIF task (163, 1675), (325, 35) */
            task '------------------------------- Join -------------------------------  ';
            /* CIF join (308, 1725), (35, 35) */
            join label1;
    endstate;
endprocess controlflow;