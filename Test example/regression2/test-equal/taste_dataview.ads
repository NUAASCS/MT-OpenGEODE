-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_Dataview with SPARK_Mode
IS


SUBTYPE T_Bool is adaasn1rtl.Asn1Boolean;


function T_Bool_Equal(val1, val2: in T_Bool) return Boolean;

function T_Bool_Init return T_Bool;

ERR_T_BOOL:CONSTANT INTEGER := 1; -- 
FUNCTION T_Bool_IsConstraintValid(val : in T_Bool) return adaasn1rtl.ASN1_RESULT;
SUBTYPE My_OctStr_index is integer range 1..20;
SUBTYPE My_OctStr_array IS adaasn1rtl.OctetBuffer(My_OctStr_index);
SUBTYPE My_OctStr_length_index is integer range 0..20;
TYPE My_OctStr IS  RECORD
    Length : My_OctStr_length_index;
    Data  : My_OctStr_array;
END RECORD;

function My_OctStr_Equal(val1, val2: in My_OctStr) return Boolean;

function My_OctStr_Init return My_OctStr;

ERR_MY_OCTSTR:CONSTANT INTEGER := 8; -- 
FUNCTION My_OctStr_IsConstraintValid(val : in My_OctStr) return adaasn1rtl.ASN1_RESULT;
-- SeqOf --------------------------------------------
SUBTYPE SeqOf_index is integer range 1..100;
TYPE SeqOf_array IS ARRAY (SeqOf_index) OF My_OctStr;
SUBTYPE SeqOf_length_index is integer range 0..100;
TYPE SeqOf IS  RECORD
    Length : SeqOf_length_index;
    Data  : SeqOf_array;
END RECORD;

function SeqOf_Equal(val1, val2: in SeqOf) return Boolean;

function SeqOf_Init return SeqOf;

ERR_SEQOF_ELM:CONSTANT INTEGER := 15; 
ERR_SEQOF:CONSTANT INTEGER := 26; 
FUNCTION SeqOf_IsConstraintValid(val : in SeqOf) return adaasn1rtl.ASN1_RESULT;
-- Toto --------------------------------------------

TYPE Toto_EXIST IS RECORD
    elem_2:adaasn1rtl.BIT;
END RECORD;
TYPE Toto IS RECORD 
    elem_1 : My_OctStr;
    elem_2 : SeqOf;
    
    Exist : Toto_EXIST;

END RECORD;

function Toto_Equal(val1, val2: in Toto) return Boolean;

function Toto_Init return Toto;

ERR_TOTO_ELEM_1:CONSTANT INTEGER := 33; 
ERR_TOTO_ELEM_2_ELM:CONSTANT INTEGER := 44; 
ERR_TOTO_ELEM_2:CONSTANT INTEGER := 55; 
FUNCTION Toto_IsConstraintValid(val : in Toto) return adaasn1rtl.ASN1_RESULT;
-- AChoice --------------------------------------------

SUBTYPE AChoice_index_range is integer range 0..1;

TYPE AChoice_selection IS (a_PRESENT, b_PRESENT);
for AChoice_selection use
    (a_PRESENT => 1, b_PRESENT => 2);
for AChoice_selection'Size use 32;

TYPE AChoice(kind : AChoice_selection:= a_PRESENT) IS 
RECORD
    case kind is
    when a_PRESENT =>
            a: T_Bool;
    when b_PRESENT =>
            b: SeqOf;
    end case;
END RECORD;

FOR AChoice USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

function AChoice_Equal(val1, val2: in AChoice) return Boolean;

function AChoice_Init return AChoice;

ERR_ACHOICE:CONSTANT INTEGER := 105; 
ERR_ACHOICE_A:CONSTANT INTEGER := 72; 
ERR_ACHOICE_B_ELM:CONSTANT INTEGER := 83; 
ERR_ACHOICE_B:CONSTANT INTEGER := 94; 
FUNCTION AChoice_IsConstraintValid(val : in AChoice) return adaasn1rtl.ASN1_RESULT;
-- SeqBool --------------------------------------------
SUBTYPE SeqBool_index is integer range 1..5;
TYPE SeqBool_array IS ARRAY (SeqBool_index) OF adaasn1rtl.Asn1Boolean;
SUBTYPE SeqBool_length_index is integer range 1..5;
TYPE SeqBool IS  RECORD
    Length : SeqBool_length_index;
    Data  : SeqBool_array;
END RECORD;

function SeqBool_Equal(val1, val2: in SeqBool) return Boolean;

function SeqBool_Init return SeqBool;

ERR_SEQBOOL_ELM:CONSTANT INTEGER := 112; 
ERR_SEQBOOL:CONSTANT INTEGER := 119; 
FUNCTION SeqBool_IsConstraintValid(val : in SeqBool) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyReal is adaasn1rtl.Asn1Real;


function MyReal_Equal(val1, val2: in MyReal) return Boolean;

function MyReal_Init return MyReal;

ERR_MYREAL:CONSTANT INTEGER := 126; -- 
FUNCTION MyReal_IsConstraintValid(val : in MyReal) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyOtherReal is adaasn1rtl.Asn1Real;


function MyOtherReal_Equal(val1, val2: in MyOtherReal) return Boolean;

function MyOtherReal_Init return MyOtherReal;

ERR_MYOTHERREAL:CONSTANT INTEGER := 133; -- 
FUNCTION MyOtherReal_IsConstraintValid(val : in MyOtherReal) return adaasn1rtl.ASN1_RESULT;
-- Nested --------------------------------------------
-- Nested_a --------------------------------------------

TYPE Nested_a IS RECORD 
    b : adaasn1rtl.Asn1Boolean;
END RECORD;

TYPE Nested IS RECORD 
    a : Nested_a;
END RECORD;

function Nested_a_Equal(val1, val2: in Nested_a) return Boolean;

function Nested_Equal(val1, val2: in Nested) return Boolean;

function Nested_a_Init return Nested_a;
function Nested_Init return Nested;

ERR_NESTED_A_B:CONSTANT INTEGER := 140; 
FUNCTION Nested_IsConstraintValid(val : in Nested) return adaasn1rtl.ASN1_RESULT;
-- NestedArray --------------------------------------------
-- NestedArray_elem --------------------------------------------

TYPE NestedArray_elem IS RECORD 
    a : adaasn1rtl.Asn1Boolean;
END RECORD;
SUBTYPE NestedArray_index is integer range 1..2;
TYPE NestedArray_array IS ARRAY (NestedArray_index) OF NestedArray_elem;
SUBTYPE NestedArray_length_index is integer range 1..2;
TYPE NestedArray IS  RECORD
    Length : NestedArray_length_index;
    Data  : NestedArray_array;
END RECORD;

function NestedArray_elem_Equal(val1, val2: in NestedArray_elem) return Boolean;

function NestedArray_Equal(val1, val2: in NestedArray) return Boolean;

function NestedArray_elem_Init return NestedArray_elem;
function NestedArray_Init return NestedArray;

ERR_NESTEDARRAY_ELM_A:CONSTANT INTEGER := 159; 
ERR_NESTEDARRAY:CONSTANT INTEGER := 172; 
FUNCTION NestedArray_IsConstraintValid(val : in NestedArray) return adaasn1rtl.ASN1_RESULT;

 

private
   --# hide TASTE_Dataview;


END TASTE_Dataview;