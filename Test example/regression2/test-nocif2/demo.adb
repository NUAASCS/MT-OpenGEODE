-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
WITH CcsdsSoisSubnetwork;
use type CcsdsSoisSubnetwork.CcsdsSoisSubnetworkOctet;
use type CcsdsSoisSubnetwork.CcsdsSoisSubnetworkOctet;
use type CcsdsSoisSubnetwork.CcsdsSoisSubnetworkOctet;
use type CcsdsSoisSubnetwork.CcsdsSoisSubnetworkOctet;
use type CcsdsSoisSubnetwork.CcsdsSoisSubnetworkOctet;
use type CcsdsSoisSubnetwork.CcsdsSoisSubnetworkOctet;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;


PACKAGE BODY Demo with SPARK_Mode IS




function DemoTelecommandUserDataType_fldUserData_Equal(val1, val2: in DemoTelecommandUserDataType_fldUserData)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        
    i1:Integer;

begin
    ret := (val1.Length = val2.Length);
    i1 := val1.Data'First;
    while ret and i1 <= val1.Length loop
        pragma Loop_Invariant (i1 >= val1.Data'First and i1 >= val2.Data'First and i1 <= val1.Length  and val1.Length = val2.Length);
        ret := (val1.Data(i1) = val2.Data(i1));
        i1 := i1+1;
    end loop;

	return ret;

end DemoTelecommandUserDataType_fldUserData_Equal;

function DemoTelecommandUserDataType_Equal(val1, val2: in DemoTelecommandUserDataType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldUserDataLength = val2.fldUserDataLength);

    if ret then
        ret := DemoTelecommandUserDataType_fldUserData_Equal(val1.fldUserData, val2.fldUserData);

    end if;
	return ret;

end DemoTelecommandUserDataType_Equal;

function DemoTelecommandUserDataType_fldUserData_Init return DemoTelecommandUserDataType_fldUserData
is
    val: DemoTelecommandUserDataType_fldUserData;
    i1:Integer;
begin
    i1 := 1;
    while i1<= 255 loop
        pragma Loop_Invariant (i1 >=1 and i1<=255);
        val.Data(i1) := CcsdsSoisSubnetwork.CcsdsSoisSubnetworkOctet_Init;
        i1 := i1 + 1;
    end loop;
    val.Length := 0;
    return val;
end DemoTelecommandUserDataType_fldUserData_Init;
function DemoTelecommandUserDataType_Init return DemoTelecommandUserDataType
is
    val: DemoTelecommandUserDataType;
begin

    --set fldUserDataLength 
    val.fldUserDataLength := CcsdsSoisSubnetwork.CcsdsSoisSubnetworkOctet_Init;
    --set fldUserData 
    val.fldUserData := DemoTelecommandUserDataType_fldUserData_Init;
    return val;
end DemoTelecommandUserDataType_Init;

FUNCTION DemoTelecommandUserDataType_IsConstraintValid(val : in DemoTelecommandUserDataType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
    i1:Integer;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldUserDataLength <= 255), ErrorCode => ERR_DEMOTELECOMMANDUSERDATATYPE_FLDUSERDATALENGTH);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => ((0 <= val.fldUserData.Length) AND (val.fldUserData.Length <= 255)), ErrorCode => ERR_DEMOTELECOMMANDUSERDATATYPE_FLDUSERDATA);
        i1 := val.fldUserData.Data'First;
        while ret.Success and i1 <= val.fldUserData.Length loop
            pragma Loop_Invariant (i1 >= val.fldUserData.Data'First and i1 <= val.fldUserData.Length);
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldUserData.Data(i1) <= 255), ErrorCode => ERR_DEMOTELECOMMANDUSERDATATYPE_FLDUSERDATA_ELM);
            i1 := i1+1;
        end loop;

    end if;

    RETURN ret;
END DemoTelecommandUserDataType_IsConstraintValid;



function DemoStatusFlag1Type_Equal(val1, val2: in DemoStatusFlag1Type)
    return Boolean 
is
begin
	return val1 = val2;

end DemoStatusFlag1Type_Equal;

function DemoStatusFlag1Type_Init return DemoStatusFlag1Type
is
    val: DemoStatusFlag1Type;
begin
    val := FALSE;
    return val;
end DemoStatusFlag1Type_Init;

FUNCTION DemoStatusFlag1Type_IsConstraintValid(val : in DemoStatusFlag1Type) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEMOSTATUSFLAG1TYPE);
    RETURN ret;
END DemoStatusFlag1Type_IsConstraintValid;



function DemoStatusFlag2Type_Equal(val1, val2: in DemoStatusFlag2Type)
    return Boolean 
is
begin
	return val1 = val2;

end DemoStatusFlag2Type_Equal;

function DemoStatusFlag2Type_Init return DemoStatusFlag2Type
is
    val: DemoStatusFlag2Type;
begin
    val := FALSE;
    return val;
end DemoStatusFlag2Type_Init;

FUNCTION DemoStatusFlag2Type_IsConstraintValid(val : in DemoStatusFlag2Type) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEMOSTATUSFLAG2TYPE);
    RETURN ret;
END DemoStatusFlag2Type_IsConstraintValid;



function DemoCalibratedHK1Type_Equal(val1, val2: in DemoCalibratedHK1Type)
    return Boolean 
is
begin
	return val1 = val2;

end DemoCalibratedHK1Type_Equal;

function DemoCalibratedHK1Type_Init return DemoCalibratedHK1Type
is
    val: DemoCalibratedHK1Type;
begin
    val := 0;
    return val;
end DemoCalibratedHK1Type_Init;

FUNCTION DemoCalibratedHK1Type_IsConstraintValid(val : in DemoCalibratedHK1Type) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_DEMOCALIBRATEDHK1TYPE);
    RETURN ret;
END DemoCalibratedHK1Type_IsConstraintValid;



function DemoCalibratedHK2Type_Equal(val1, val2: in DemoCalibratedHK2Type)
    return Boolean 
is
begin
	return val1 = val2;

end DemoCalibratedHK2Type_Equal;

function DemoCalibratedHK2Type_Init return DemoCalibratedHK2Type
is
    val: DemoCalibratedHK2Type;
begin
    val := 0;
    return val;
end DemoCalibratedHK2Type_Init;

FUNCTION DemoCalibratedHK2Type_IsConstraintValid(val : in DemoCalibratedHK2Type) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_DEMOCALIBRATEDHK2TYPE);
    RETURN ret;
END DemoCalibratedHK2Type_IsConstraintValid;



function DemoQueryCountType_Equal(val1, val2: in DemoQueryCountType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoQueryCountType_Equal;

function DemoQueryCountType_Init return DemoQueryCountType
is
    val: DemoQueryCountType;
begin
    val := 0;
    return val;
end DemoQueryCountType_Init;

FUNCTION DemoQueryCountType_IsConstraintValid(val : in DemoQueryCountType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_DEMOQUERYCOUNTTYPE);
    RETURN ret;
END DemoQueryCountType_IsConstraintValid;



function DemoExtendedModeType_Equal(val1, val2: in DemoExtendedModeType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoExtendedModeType_Equal;

function DemoExtendedModeType_Init return DemoExtendedModeType
is
    val: DemoExtendedModeType;
begin
    val := 0;
    return val;
end DemoExtendedModeType_Init;

FUNCTION DemoExtendedModeType_IsConstraintValid(val : in DemoExtendedModeType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_DEMOEXTENDEDMODETYPE);
    RETURN ret;
END DemoExtendedModeType_IsConstraintValid;



function DemoExtendedModeUnionType_Equal(val1, val2: in DemoExtendedModeUnionType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldMode = val2.fldMode);

	return ret;

end DemoExtendedModeUnionType_Equal;

function DemoExtendedModeUnionType_Init return DemoExtendedModeUnionType
is
    val: DemoExtendedModeUnionType;
begin

    --set fldMode 
    val.fldMode := DemoExtendedModeType_Init;
    return val;
end DemoExtendedModeUnionType_Init;

FUNCTION DemoExtendedModeUnionType_IsConstraintValid(val : in DemoExtendedModeUnionType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldMode <= 255), ErrorCode => ERR_DEMOEXTENDEDMODEUNIONTYPE_FLDMODE);
    RETURN ret;
END DemoExtendedModeUnionType_IsConstraintValid;



function DemoExtendedStatusType_Equal(val1, val2: in DemoExtendedStatusType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoExtendedStatusType_Equal;

function DemoExtendedStatusType_Init return DemoExtendedStatusType
is
    val: DemoExtendedStatusType;
begin
    val := 0;
    return val;
end DemoExtendedStatusType_Init;

FUNCTION DemoExtendedStatusType_IsConstraintValid(val : in DemoExtendedStatusType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_DEMOEXTENDEDSTATUSTYPE);
    RETURN ret;
END DemoExtendedStatusType_IsConstraintValid;



function DemoExtendedStatusUnionType_Equal(val1, val2: in DemoExtendedStatusUnionType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldStatus = val2.fldStatus);

	return ret;

end DemoExtendedStatusUnionType_Equal;

function DemoExtendedStatusUnionType_Init return DemoExtendedStatusUnionType
is
    val: DemoExtendedStatusUnionType;
begin

    --set fldStatus 
    val.fldStatus := DemoExtendedStatusType_Init;
    return val;
end DemoExtendedStatusUnionType_Init;

FUNCTION DemoExtendedStatusUnionType_IsConstraintValid(val : in DemoExtendedStatusUnionType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldStatus <= 255), ErrorCode => ERR_DEMOEXTENDEDSTATUSUNIONTYPE_FLDSTATUS);
    RETURN ret;
END DemoExtendedStatusUnionType_IsConstraintValid;



function DemoExtendedstatusormodetype_BODY_CHOICE_Equal(val1, val2: in DemoExtendedstatusormodetype_BODY_CHOICE)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when fldExtendedModeUnionType_PRESENT =>
                ret := DemoExtendedModeUnionType_Equal(val1.fldExtendedModeUnionType, val2.fldExtendedModeUnionType);
            when fldExtendedStatusUnionType_PRESENT =>
                ret := DemoExtendedStatusUnionType_Equal(val1.fldExtendedStatusUnionType, val2.fldExtendedStatusUnionType);
        end case;
    end if;
	return ret;

end DemoExtendedstatusormodetype_BODY_CHOICE_Equal;

function DemoExtendedstatusormodetype_BODY_CHOICE_Init return DemoExtendedstatusormodetype_BODY_CHOICE
is
    val: DemoExtendedstatusormodetype_BODY_CHOICE;
begin
    --set fldExtendedModeUnionType 
    declare
        fldExtendedModeUnionType_tmp:DemoExtendedModeUnionType;
    begin
        fldExtendedModeUnionType_tmp := DemoExtendedModeUnionType_Init;
        val := DemoExtendedstatusormodetype_BODY_CHOICE'(kind => fldExtendedModeUnionType_PRESENT, fldExtendedModeUnionType => fldExtendedModeUnionType_tmp);
    end;
    return val;
end DemoExtendedstatusormodetype_BODY_CHOICE_Init;

FUNCTION DemoExtendedstatusormodetype_BODY_CHOICE_IsConstraintValid(val : in DemoExtendedstatusormodetype_BODY_CHOICE) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    case val.kind is
        WHEN fldExtendedModeUnionType_PRESENT =>
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldExtendedModeUnionType.fldMode <= 255), ErrorCode => ERR_DEMOEXTENDEDSTATUSORMODETYPE_BODY_CHOICE_FLDEXTENDEDMODEUNIONTYPE_FLDMODE_2);
        WHEN fldExtendedStatusUnionType_PRESENT =>
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldExtendedStatusUnionType.fldStatus <= 255), ErrorCode => ERR_DEMOEXTENDEDSTATUSORMODETYPE_BODY_CHOICE_FLDEXTENDEDSTATUSUNIONTYPE_FLDSTATUS_2);
    end case;
    RETURN ret;
END DemoExtendedstatusormodetype_BODY_CHOICE_IsConstraintValid;



function DemoHK1Type_Equal(val1, val2: in DemoHK1Type)
    return Boolean 
is
begin
	return val1 = val2;

end DemoHK1Type_Equal;

function DemoHK1Type_Init return DemoHK1Type
is
    val: DemoHK1Type;
begin
    val := 0;
    return val;
end DemoHK1Type_Init;

FUNCTION DemoHK1Type_IsConstraintValid(val : in DemoHK1Type) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_DEMOHK1TYPE);
    RETURN ret;
END DemoHK1Type_IsConstraintValid;



function DemoHK2Type_Equal(val1, val2: in DemoHK2Type)
    return Boolean 
is
begin
	return val1 = val2;

end DemoHK2Type_Equal;

function DemoHK2Type_Init return DemoHK2Type
is
    val: DemoHK2Type;
begin
    val := 0;
    return val;
end DemoHK2Type_Init;

FUNCTION DemoHK2Type_IsConstraintValid(val : in DemoHK2Type) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_DEMOHK2TYPE);
    RETURN ret;
END DemoHK2Type_IsConstraintValid;



function DemoTelemetrySet1Type_Equal(val1, val2: in DemoTelemetrySet1Type)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldHk1 = val2.fldHk1);

    if ret then
        ret := (val1.fldHk2 = val2.fldHk2);

    end if;
	return ret;

end DemoTelemetrySet1Type_Equal;

function DemoTelemetrySet1Type_Init return DemoTelemetrySet1Type
is
    val: DemoTelemetrySet1Type;
begin

    --set fldHk1 
    val.fldHk1 := DemoHK1Type_Init;
    --set fldHk2 
    val.fldHk2 := DemoHK2Type_Init;
    return val;
end DemoTelemetrySet1Type_Init;

FUNCTION DemoTelemetrySet1Type_IsConstraintValid(val : in DemoTelemetrySet1Type) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldHk1 <= 255), ErrorCode => ERR_DEMOTELEMETRYSET1TYPE_FLDHK1);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldHk2 <= 255), ErrorCode => ERR_DEMOTELEMETRYSET1TYPE_FLDHK2);
    end if;

    RETURN ret;
END DemoTelemetrySet1Type_IsConstraintValid;



function DemoTelemetry1Type_Equal(val1, val2: in DemoTelemetry1Type)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := DemoTelemetrySet1Type_Equal(val1.fldTelemetrySet, val2.fldTelemetrySet);

	return ret;

end DemoTelemetry1Type_Equal;

function DemoTelemetry1Type_Init return DemoTelemetry1Type
is
    val: DemoTelemetry1Type;
begin

    --set fldTelemetrySet 
    val.fldTelemetrySet := DemoTelemetrySet1Type_Init;
    return val;
end DemoTelemetry1Type_Init;

FUNCTION DemoTelemetry1Type_IsConstraintValid(val : in DemoTelemetry1Type) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelemetrySet.fldHk1 <= 255), ErrorCode => ERR_DEMOTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK1);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelemetrySet.fldHk2 <= 255), ErrorCode => ERR_DEMOTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK2);
    end if;

    RETURN ret;
END DemoTelemetry1Type_IsConstraintValid;



function DemoHK3Type_Equal(val1, val2: in DemoHK3Type)
    return Boolean 
is
begin
	return val1 = val2;

end DemoHK3Type_Equal;

function DemoHK3Type_Init return DemoHK3Type
is
    val: DemoHK3Type;
begin
    val := 0;
    return val;
end DemoHK3Type_Init;

FUNCTION DemoHK3Type_IsConstraintValid(val : in DemoHK3Type) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_DEMOHK3TYPE);
    RETURN ret;
END DemoHK3Type_IsConstraintValid;



function DemoHK4Type_Equal(val1, val2: in DemoHK4Type)
    return Boolean 
is
begin
	return val1 = val2;

end DemoHK4Type_Equal;

function DemoHK4Type_Init return DemoHK4Type
is
    val: DemoHK4Type;
begin
    val := 0;
    return val;
end DemoHK4Type_Init;

FUNCTION DemoHK4Type_IsConstraintValid(val : in DemoHK4Type) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_DEMOHK4TYPE);
    RETURN ret;
END DemoHK4Type_IsConstraintValid;



function DemoTelemetrySet2Type_Equal(val1, val2: in DemoTelemetrySet2Type)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldHk3 = val2.fldHk3);

    if ret then
        ret := (val1.fldHk4 = val2.fldHk4);

    end if;
	return ret;

end DemoTelemetrySet2Type_Equal;

function DemoTelemetrySet2Type_Init return DemoTelemetrySet2Type
is
    val: DemoTelemetrySet2Type;
begin

    --set fldHk3 
    val.fldHk3 := DemoHK3Type_Init;
    --set fldHk4 
    val.fldHk4 := DemoHK4Type_Init;
    return val;
end DemoTelemetrySet2Type_Init;

FUNCTION DemoTelemetrySet2Type_IsConstraintValid(val : in DemoTelemetrySet2Type) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldHk3 <= 255), ErrorCode => ERR_DEMOTELEMETRYSET2TYPE_FLDHK3);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldHk4 <= 255), ErrorCode => ERR_DEMOTELEMETRYSET2TYPE_FLDHK4);
    end if;

    RETURN ret;
END DemoTelemetrySet2Type_IsConstraintValid;



function DemoTelemetry2Type_Equal(val1, val2: in DemoTelemetry2Type)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := DemoTelemetrySet2Type_Equal(val1.fldTelemetrySet, val2.fldTelemetrySet);

	return ret;

end DemoTelemetry2Type_Equal;

function DemoTelemetry2Type_Init return DemoTelemetry2Type
is
    val: DemoTelemetry2Type;
begin

    --set fldTelemetrySet 
    val.fldTelemetrySet := DemoTelemetrySet2Type_Init;
    return val;
end DemoTelemetry2Type_Init;

FUNCTION DemoTelemetry2Type_IsConstraintValid(val : in DemoTelemetry2Type) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelemetrySet.fldHk3 <= 255), ErrorCode => ERR_DEMOTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK3);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelemetrySet.fldHk4 <= 255), ErrorCode => ERR_DEMOTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK4);
    end if;

    RETURN ret;
END DemoTelemetry2Type_IsConstraintValid;



function DemoCommandStatusType_Equal(val1, val2: in DemoCommandStatusType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoCommandStatusType_Equal;

function DemoCommandStatusType_Init return DemoCommandStatusType
is
    val: DemoCommandStatusType;
begin
    val := 0;
    return val;
end DemoCommandStatusType_Init;

FUNCTION DemoCommandStatusType_IsConstraintValid(val : in DemoCommandStatusType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 65535), ErrorCode => ERR_DEMOCOMMANDSTATUSTYPE);
    RETURN ret;
END DemoCommandStatusType_IsConstraintValid;



function DemoTelemetryAckType_Equal(val1, val2: in DemoTelemetryAckType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldStatus = val2.fldStatus);

	return ret;

end DemoTelemetryAckType_Equal;

function DemoTelemetryAckType_Init return DemoTelemetryAckType
is
    val: DemoTelemetryAckType;
begin

    --set fldStatus 
    val.fldStatus := DemoCommandStatusType_Init;
    return val;
end DemoTelemetryAckType_Init;

FUNCTION DemoTelemetryAckType_IsConstraintValid(val : in DemoTelemetryAckType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldStatus <= 65535), ErrorCode => ERR_DEMOTELEMETRYACKTYPE_FLDSTATUS);
    RETURN ret;
END DemoTelemetryAckType_IsConstraintValid;



function DemoEventDataType_Equal(val1, val2: in DemoEventDataType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoEventDataType_Equal;

function DemoEventDataType_Init return DemoEventDataType
is
    val: DemoEventDataType;
begin
    val := 0;
    return val;
end DemoEventDataType_Init;

FUNCTION DemoEventDataType_IsConstraintValid(val : in DemoEventDataType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_DEMOEVENTDATATYPE);
    RETURN ret;
END DemoEventDataType_IsConstraintValid;



function DemoUserDataLengthType_Equal(val1, val2: in DemoUserDataLengthType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoUserDataLengthType_Equal;

function DemoUserDataLengthType_Init return DemoUserDataLengthType
is
    val: DemoUserDataLengthType;
begin
    val := 0;
    return val;
end DemoUserDataLengthType_Init;

FUNCTION DemoUserDataLengthType_IsConstraintValid(val : in DemoUserDataLengthType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 65535), ErrorCode => ERR_DEMOUSERDATALENGTHTYPE);
    RETURN ret;
END DemoUserDataLengthType_IsConstraintValid;



function DemoModeType_Equal(val1, val2: in DemoModeType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoModeType_Equal;

function DemoModeType_Init return DemoModeType
is
    val: DemoModeType;
begin
    val := reset;
    return val;
end DemoModeType_Init;

FUNCTION DemoModeType_IsConstraintValid(val : in DemoModeType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((((val = reset)) OR ((val = do_a_little_bit_of_stuff)))) OR ((val = do_lots_of_stuff)))) OR ((val = do_tonnes_of_stuff_badly)))) OR ((val = reveal_a_bug_and_malfunction))), ErrorCode => ERR_DEMOMODETYPE);
    RETURN ret;
END DemoModeType_IsConstraintValid;



function DemoTelecommandModeType_Equal(val1, val2: in DemoTelecommandModeType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldMode = val2.fldMode);

	return ret;

end DemoTelecommandModeType_Equal;

function DemoTelecommandModeType_Init return DemoTelecommandModeType
is
    val: DemoTelecommandModeType;
begin

    --set fldMode 
    val.fldMode := DemoModeType_Init;
    return val;
end DemoTelecommandModeType_Init;

FUNCTION DemoTelecommandModeType_IsConstraintValid(val : in DemoTelecommandModeType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((((val.fldMode = reset)) OR ((val.fldMode = do_a_little_bit_of_stuff)))) OR ((val.fldMode = do_lots_of_stuff)))) OR ((val.fldMode = do_tonnes_of_stuff_badly)))) OR ((val.fldMode = reveal_a_bug_and_malfunction))), ErrorCode => ERR_DEMOTELECOMMANDMODETYPE_FLDMODE);
    RETURN ret;
END DemoTelecommandModeType_IsConstraintValid;



function DemoTelecommandtype_BODY_CHOICE_Equal(val1, val2: in DemoTelecommandtype_BODY_CHOICE)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when fldTelecommandModeType_PRESENT =>
                ret := DemoTelecommandModeType_Equal(val1.fldTelecommandModeType, val2.fldTelecommandModeType);
            when fldTelecommandUserDataType_PRESENT =>
                ret := DemoTelecommandUserDataType_Equal(val1.fldTelecommandUserDataType, val2.fldTelecommandUserDataType);
        end case;
    end if;
	return ret;

end DemoTelecommandtype_BODY_CHOICE_Equal;

function DemoTelecommandtype_BODY_CHOICE_Init return DemoTelecommandtype_BODY_CHOICE
is
    val: DemoTelecommandtype_BODY_CHOICE;
begin
    --set fldTelecommandModeType 
    declare
        fldTelecommandModeType_tmp:DemoTelecommandModeType;
    begin
        fldTelecommandModeType_tmp := DemoTelecommandModeType_Init;
        val := DemoTelecommandtype_BODY_CHOICE'(kind => fldTelecommandModeType_PRESENT, fldTelecommandModeType => fldTelecommandModeType_tmp);
    end;
    return val;
end DemoTelecommandtype_BODY_CHOICE_Init;

FUNCTION DemoTelecommandtype_BODY_CHOICE_IsConstraintValid(val : in DemoTelecommandtype_BODY_CHOICE) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
    i1:Integer;
BEGIN
    case val.kind is
        WHEN fldTelecommandModeType_PRESENT =>
            ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((((val.fldTelecommandModeType.fldMode = reset)) OR ((val.fldTelecommandModeType.fldMode = do_a_little_bit_of_stuff)))) OR ((val.fldTelecommandModeType.fldMode = do_lots_of_stuff)))) OR ((val.fldTelecommandModeType.fldMode = do_tonnes_of_stuff_badly)))) OR ((val.fldTelecommandModeType.fldMode = reveal_a_bug_and_malfunction))), ErrorCode => ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDMODETYPE_FLDMODE_2);
        WHEN fldTelecommandUserDataType_PRESENT =>
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelecommandUserDataType.fldUserDataLength <= 255), ErrorCode => ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATALENGTH_2);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => ((0 <= val.fldTelecommandUserDataType.fldUserData.Length) AND (val.fldTelecommandUserDataType.fldUserData.Length <= 255)), ErrorCode => ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATA_2);
                i1 := val.fldTelecommandUserDataType.fldUserData.Data'First;
                while ret.Success and i1 <= val.fldTelecommandUserDataType.fldUserData.Length loop
                    pragma Loop_Invariant (i1 >= val.fldTelecommandUserDataType.fldUserData.Data'First and i1 <= val.fldTelecommandUserDataType.fldUserData.Length);
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelecommandUserDataType.fldUserData.Data(i1) <= 255), ErrorCode => ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATA_ELM_2);
                    i1 := i1+1;
                end loop;

            end if;

    end case;
    RETURN ret;
END DemoTelecommandtype_BODY_CHOICE_IsConstraintValid;



function DemoEventTypeType_Equal(val1, val2: in DemoEventTypeType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoEventTypeType_Equal;

function DemoEventTypeType_Init return DemoEventTypeType
is
    val: DemoEventTypeType;
begin
    val := event1;
    return val;
end DemoEventTypeType_Init;

FUNCTION DemoEventTypeType_IsConstraintValid(val : in DemoEventTypeType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((((val = event1)) OR ((val = event2)))) OR ((val = event3))), ErrorCode => ERR_DEMOEVENTTYPETYPE);
    RETURN ret;
END DemoEventTypeType_IsConstraintValid;



function DemoEventType_Equal(val1, val2: in DemoEventType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldType = val2.fldType);

    if ret then
        ret := (val1.fldData = val2.fldData);

    end if;
	return ret;

end DemoEventType_Equal;

function DemoEventType_Init return DemoEventType
is
    val: DemoEventType;
begin

    --set fldType 
    val.fldType := DemoEventTypeType_Init;
    --set fldData 
    val.fldData := DemoEventDataType_Init;
    return val;
end DemoEventType_Init;

FUNCTION DemoEventType_IsConstraintValid(val : in DemoEventType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((((val.fldType = event1)) OR ((val.fldType = event2)))) OR ((val.fldType = event3))), ErrorCode => ERR_DEMOEVENTTYPE_FLDTYPE);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldData <= 255), ErrorCode => ERR_DEMOEVENTTYPE_FLDDATA);
    end if;

    RETURN ret;
END DemoEventType_IsConstraintValid;



function DemoTelemetryEventType_Equal(val1, val2: in DemoTelemetryEventType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldEventType = val2.fldEventType);

    if ret then
        ret := (val1.fldEventData = val2.fldEventData);

    end if;
	return ret;

end DemoTelemetryEventType_Equal;

function DemoTelemetryEventType_Init return DemoTelemetryEventType
is
    val: DemoTelemetryEventType;
begin

    --set fldEventType 
    val.fldEventType := DemoEventTypeType_Init;
    --set fldEventData 
    val.fldEventData := DemoEventDataType_Init;
    return val;
end DemoTelemetryEventType_Init;

FUNCTION DemoTelemetryEventType_IsConstraintValid(val : in DemoTelemetryEventType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((((val.fldEventType = event1)) OR ((val.fldEventType = event2)))) OR ((val.fldEventType = event3))), ErrorCode => ERR_DEMOTELEMETRYEVENTTYPE_FLDEVENTTYPE);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldEventData <= 255), ErrorCode => ERR_DEMOTELEMETRYEVENTTYPE_FLDEVENTDATA);
    end if;

    RETURN ret;
END DemoTelemetryEventType_IsConstraintValid;



function DemoTelemetrytype_BODY_CHOICE_Equal(val1, val2: in DemoTelemetrytype_BODY_CHOICE)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when fldTelemetry1Type_PRESENT =>
                ret := DemoTelemetry1Type_Equal(val1.fldTelemetry1Type, val2.fldTelemetry1Type);
            when fldTelemetry2Type_PRESENT =>
                ret := DemoTelemetry2Type_Equal(val1.fldTelemetry2Type, val2.fldTelemetry2Type);
            when fldTelemetryAckType_PRESENT =>
                ret := DemoTelemetryAckType_Equal(val1.fldTelemetryAckType, val2.fldTelemetryAckType);
            when fldTelemetryEventType_PRESENT =>
                ret := DemoTelemetryEventType_Equal(val1.fldTelemetryEventType, val2.fldTelemetryEventType);
        end case;
    end if;
	return ret;

end DemoTelemetrytype_BODY_CHOICE_Equal;

function DemoTelemetrytype_BODY_CHOICE_Init return DemoTelemetrytype_BODY_CHOICE
is
    val: DemoTelemetrytype_BODY_CHOICE;
begin
    --set fldTelemetry1Type 
    declare
        fldTelemetry1Type_tmp:DemoTelemetry1Type;
    begin
        fldTelemetry1Type_tmp := DemoTelemetry1Type_Init;
        val := DemoTelemetrytype_BODY_CHOICE'(kind => fldTelemetry1Type_PRESENT, fldTelemetry1Type => fldTelemetry1Type_tmp);
    end;
    return val;
end DemoTelemetrytype_BODY_CHOICE_Init;

FUNCTION DemoTelemetrytype_BODY_CHOICE_IsConstraintValid(val : in DemoTelemetrytype_BODY_CHOICE) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    case val.kind is
        WHEN fldTelemetry1Type_PRESENT =>
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelemetry1Type.fldTelemetrySet.fldHk1 <= 255), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK1_2);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelemetry1Type.fldTelemetrySet.fldHk2 <= 255), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK2_2);
            end if;

        WHEN fldTelemetry2Type_PRESENT =>
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelemetry2Type.fldTelemetrySet.fldHk3 <= 255), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK3_2);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelemetry2Type.fldTelemetrySet.fldHk4 <= 255), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK4_2);
            end if;

        WHEN fldTelemetryAckType_PRESENT =>
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelemetryAckType.fldStatus <= 65535), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYACKTYPE_FLDSTATUS_2);
        WHEN fldTelemetryEventType_PRESENT =>
            ret := adaasn1rtl.ASN1_RESULT'(Success => (((((val.fldTelemetryEventType.fldEventType = event1)) OR ((val.fldTelemetryEventType.fldEventType = event2)))) OR ((val.fldTelemetryEventType.fldEventType = event3))), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYEVENTTYPE_FLDEVENTTYPE_2);
            if ret.Success then
                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTelemetryEventType.fldEventData <= 255), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYEVENTTYPE_FLDEVENTDATA_2);
            end if;

    end case;
    RETURN ret;
END DemoTelemetrytype_BODY_CHOICE_IsConstraintValid;



function DemoReadStatusModeCommandType_Equal(val1, val2: in DemoReadStatusModeCommandType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoReadStatusModeCommandType_Equal;

function DemoReadStatusModeCommandType_Init return DemoReadStatusModeCommandType
is
    val: DemoReadStatusModeCommandType;
begin
    val := read_status;
    return val;
end DemoReadStatusModeCommandType_Init;

FUNCTION DemoReadStatusModeCommandType_IsConstraintValid(val : in DemoReadStatusModeCommandType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val = read_status)) OR ((val = read_mode))), ErrorCode => ERR_DEMOREADSTATUSMODECOMMANDTYPE);
    RETURN ret;
END DemoReadStatusModeCommandType_IsConstraintValid;



function DemoExtendedStatusModeEnumType_Equal(val1, val2: in DemoExtendedStatusModeEnumType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoExtendedStatusModeEnumType_Equal;

function DemoExtendedStatusModeEnumType_Init return DemoExtendedStatusModeEnumType
is
    val: DemoExtendedStatusModeEnumType;
begin
    val := DemoExtendedStatusModeEnumType_mode;
    return val;
end DemoExtendedStatusModeEnumType_Init;

FUNCTION DemoExtendedStatusModeEnumType_IsConstraintValid(val : in DemoExtendedStatusModeEnumType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val = DemoExtendedStatusModeEnumType_mode)) OR ((val = status))), ErrorCode => ERR_DEMOEXTENDEDSTATUSMODEENUMTYPE);
    RETURN ret;
END DemoExtendedStatusModeEnumType_IsConstraintValid;



function DemoExtendedStatusOrModeType_Equal(val1, val2: in DemoExtendedStatusOrModeType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldQueryCount = val2.fldQueryCount);

    if ret then
        ret := (val1.fldType = val2.fldType);

        if ret then
            ret := DemoExtendedstatusormodetype_BODY_CHOICE_Equal(val1.body_choice, val2.body_choice);

        end if;
    end if;
	return ret;

end DemoExtendedStatusOrModeType_Equal;

function DemoExtendedStatusOrModeType_Init return DemoExtendedStatusOrModeType
is
    val: DemoExtendedStatusOrModeType;
begin

    --set fldQueryCount 
    val.fldQueryCount := DemoQueryCountType_Init;
    --set fldType 
    val.fldType := DemoExtendedStatusModeEnumType_Init;
    --set body_choice 
    val.body_choice := DemoExtendedstatusormodetype_BODY_CHOICE_Init;
    return val;
end DemoExtendedStatusOrModeType_Init;

FUNCTION DemoExtendedStatusOrModeType_IsConstraintValid(val : in DemoExtendedStatusOrModeType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldQueryCount <= 255), ErrorCode => ERR_DEMOEXTENDEDSTATUSORMODETYPE_FLDQUERYCOUNT);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.fldType = DemoExtendedStatusModeEnumType_mode)) OR ((val.fldType = status))), ErrorCode => ERR_DEMOEXTENDEDSTATUSORMODETYPE_FLDTYPE);
        if ret.Success then
            case val.body_choice.kind is
                WHEN fldExtendedModeUnionType_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.body_choice.fldExtendedModeUnionType.fldMode <= 255), ErrorCode => ERR_DEMOEXTENDEDSTATUSORMODETYPE_BODY_CHOICE_FLDEXTENDEDMODEUNIONTYPE_FLDMODE);
                WHEN fldExtendedStatusUnionType_PRESENT =>
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.body_choice.fldExtendedStatusUnionType.fldStatus <= 255), ErrorCode => ERR_DEMOEXTENDEDSTATUSORMODETYPE_BODY_CHOICE_FLDEXTENDEDSTATUSUNIONTYPE_FLDSTATUS);
            end case;
        end if;

    end if;

    RETURN ret;
END DemoExtendedStatusOrModeType_IsConstraintValid;



function DemoTelecommandTypeEnumType_Equal(val1, val2: in DemoTelecommandTypeEnumType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoTelecommandTypeEnumType_Equal;

function DemoTelecommandTypeEnumType_Init return DemoTelecommandTypeEnumType
is
    val: DemoTelecommandTypeEnumType;
begin
    val := DemoTelecommandTypeEnumType_mode;
    return val;
end DemoTelecommandTypeEnumType_Init;

FUNCTION DemoTelecommandTypeEnumType_IsConstraintValid(val : in DemoTelecommandTypeEnumType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val = DemoTelecommandTypeEnumType_mode)) OR ((val = user_data))), ErrorCode => ERR_DEMOTELECOMMANDTYPEENUMTYPE);
    RETURN ret;
END DemoTelecommandTypeEnumType_IsConstraintValid;



function DemoTelecommandType_Equal(val1, val2: in DemoTelecommandType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldType = val2.fldType);

    if ret then
        ret := DemoTelecommandtype_BODY_CHOICE_Equal(val1.body_choice, val2.body_choice);

    end if;
	return ret;

end DemoTelecommandType_Equal;

function DemoTelecommandType_Init return DemoTelecommandType
is
    val: DemoTelecommandType;
begin

    --set fldType 
    val.fldType := DemoTelecommandTypeEnumType_Init;
    --set body_choice 
    val.body_choice := DemoTelecommandtype_BODY_CHOICE_Init;
    return val;
end DemoTelecommandType_Init;

FUNCTION DemoTelecommandType_IsConstraintValid(val : in DemoTelecommandType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
    i1:Integer;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val.fldType = DemoTelecommandTypeEnumType_mode)) OR ((val.fldType = user_data))), ErrorCode => ERR_DEMOTELECOMMANDTYPE_FLDTYPE);
    if ret.Success then
        case val.body_choice.kind is
            WHEN fldTelecommandModeType_PRESENT =>
                ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((((val.body_choice.fldTelecommandModeType.fldMode = reset)) OR ((val.body_choice.fldTelecommandModeType.fldMode = do_a_little_bit_of_stuff)))) OR ((val.body_choice.fldTelecommandModeType.fldMode = do_lots_of_stuff)))) OR ((val.body_choice.fldTelecommandModeType.fldMode = do_tonnes_of_stuff_badly)))) OR ((val.body_choice.fldTelecommandModeType.fldMode = reveal_a_bug_and_malfunction))), ErrorCode => ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDMODETYPE_FLDMODE);
            WHEN fldTelecommandUserDataType_PRESENT =>
                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.body_choice.fldTelecommandUserDataType.fldUserDataLength <= 255), ErrorCode => ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATALENGTH);
                if ret.Success then
                    ret := adaasn1rtl.ASN1_RESULT'(Success => ((0 <= val.body_choice.fldTelecommandUserDataType.fldUserData.Length) AND (val.body_choice.fldTelecommandUserDataType.fldUserData.Length <= 255)), ErrorCode => ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATA);
                    i1 := val.body_choice.fldTelecommandUserDataType.fldUserData.Data'First;
                    while ret.Success and i1 <= val.body_choice.fldTelecommandUserDataType.fldUserData.Length loop
                        pragma Loop_Invariant (i1 >= val.body_choice.fldTelecommandUserDataType.fldUserData.Data'First and i1 <= val.body_choice.fldTelecommandUserDataType.fldUserData.Length);
                        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.body_choice.fldTelecommandUserDataType.fldUserData.Data(i1) <= 255), ErrorCode => ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATA_ELM);
                        i1 := i1+1;
                    end loop;

                end if;

        end case;
    end if;

    RETURN ret;
END DemoTelecommandType_IsConstraintValid;



function DemoTelemetryTypeEnumType_Equal(val1, val2: in DemoTelemetryTypeEnumType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoTelemetryTypeEnumType_Equal;

function DemoTelemetryTypeEnumType_Init return DemoTelemetryTypeEnumType
is
    val: DemoTelemetryTypeEnumType;
begin
    val := ack;
    return val;
end DemoTelemetryTypeEnumType_Init;

FUNCTION DemoTelemetryTypeEnumType_IsConstraintValid(val : in DemoTelemetryTypeEnumType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((val = ack)) OR ((val = type1)))) OR ((val = type2)))) OR ((val = event))), ErrorCode => ERR_DEMOTELEMETRYTYPEENUMTYPE);
    RETURN ret;
END DemoTelemetryTypeEnumType_IsConstraintValid;



function DemoTelemetryType_Equal(val1, val2: in DemoTelemetryType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldType = val2.fldType);

    if ret then
        ret := DemoTelemetrytype_BODY_CHOICE_Equal(val1.body_choice, val2.body_choice);

    end if;
	return ret;

end DemoTelemetryType_Equal;

function DemoTelemetryType_Init return DemoTelemetryType
is
    val: DemoTelemetryType;
begin

    --set fldType 
    val.fldType := DemoTelemetryTypeEnumType_Init;
    --set body_choice 
    val.body_choice := DemoTelemetrytype_BODY_CHOICE_Init;
    return val;
end DemoTelemetryType_Init;

FUNCTION DemoTelemetryType_IsConstraintValid(val : in DemoTelemetryType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((((((val.fldType = ack)) OR ((val.fldType = type1)))) OR ((val.fldType = type2)))) OR ((val.fldType = event))), ErrorCode => ERR_DEMOTELEMETRYTYPE_FLDTYPE);
    if ret.Success then
        case val.body_choice.kind is
            WHEN fldTelemetry1Type_PRESENT =>
                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.body_choice.fldTelemetry1Type.fldTelemetrySet.fldHk1 <= 255), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK1);
                if ret.Success then
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.body_choice.fldTelemetry1Type.fldTelemetrySet.fldHk2 <= 255), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK2);
                end if;

            WHEN fldTelemetry2Type_PRESENT =>
                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.body_choice.fldTelemetry2Type.fldTelemetrySet.fldHk3 <= 255), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK3);
                if ret.Success then
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.body_choice.fldTelemetry2Type.fldTelemetrySet.fldHk4 <= 255), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK4);
                end if;

            WHEN fldTelemetryAckType_PRESENT =>
                ret := adaasn1rtl.ASN1_RESULT'(Success => (val.body_choice.fldTelemetryAckType.fldStatus <= 65535), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYACKTYPE_FLDSTATUS);
            WHEN fldTelemetryEventType_PRESENT =>
                ret := adaasn1rtl.ASN1_RESULT'(Success => (((((val.body_choice.fldTelemetryEventType.fldEventType = event1)) OR ((val.body_choice.fldTelemetryEventType.fldEventType = event2)))) OR ((val.body_choice.fldTelemetryEventType.fldEventType = event3))), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYEVENTTYPE_FLDEVENTTYPE);
                if ret.Success then
                    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.body_choice.fldTelemetryEventType.fldEventData <= 255), ErrorCode => ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYEVENTTYPE_FLDEVENTDATA);
                end if;

        end case;
    end if;

    RETURN ret;
END DemoTelemetryType_IsConstraintValid;



function DemoOpCountType_Equal(val1, val2: in DemoOpCountType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoOpCountType_Equal;

function DemoOpCountType_Init return DemoOpCountType
is
    val: DemoOpCountType;
begin
    val := 0;
    return val;
end DemoOpCountType_Init;

FUNCTION DemoOpCountType_IsConstraintValid(val : in DemoOpCountType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 39), ErrorCode => ERR_DEMOOPCOUNTTYPE);
    RETURN ret;
END DemoOpCountType_IsConstraintValid;



function DemoStatusType_Equal(val1, val2: in DemoStatusType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldStatusFlag1 = val2.fldStatusFlag1);

    if ret then
        ret := (val1.fldStatusFlag2 = val2.fldStatusFlag2);

        if ret then
            ret := (val1.fldOpCount = val2.fldOpCount);

        end if;
    end if;
	return ret;

end DemoStatusType_Equal;

function DemoStatusType_Init return DemoStatusType
is
    val: DemoStatusType;
begin

    --set fldStatusFlag1 
    val.fldStatusFlag1 := DemoStatusFlag1Type_Init;
    --set fldStatusFlag2 
    val.fldStatusFlag2 := DemoStatusFlag2Type_Init;
    --set fldOpCount 
    val.fldOpCount := DemoOpCountType_Init;
    return val;
end DemoStatusType_Init;

FUNCTION DemoStatusType_IsConstraintValid(val : in DemoStatusType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEMOSTATUSTYPE_FLDSTATUSFLAG1);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_DEMOSTATUSTYPE_FLDSTATUSFLAG2);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldOpCount <= 39), ErrorCode => ERR_DEMOSTATUSTYPE_FLDOPCOUNT);
        end if;

    end if;

    RETURN ret;
END DemoStatusType_IsConstraintValid;


 

END Demo;