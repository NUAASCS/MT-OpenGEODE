-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
WITH Seds;
use type Seds.SedsSecondsSinceTAI;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;


PACKAGE BODY DemoPres with SPARK_Mode IS




function DemoPresUInt12_Equal(val1, val2: in DemoPresUInt12)
    return Boolean 
is
begin
	return val1 = val2;

end DemoPresUInt12_Equal;

function DemoPresUInt12_Init return DemoPresUInt12
is
    val: DemoPresUInt12;
begin
    val := 0;
    return val;
end DemoPresUInt12_Init;

FUNCTION DemoPresUInt12_IsConstraintValid(val : in DemoPresUInt12) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 4095), ErrorCode => ERR_DEMOPRESUINT12);
    RETURN ret;
END DemoPresUInt12_IsConstraintValid;



function DemoPresScoreType_Equal(val1, val2: in DemoPresScoreType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldScoreTeamHome = val2.fldScoreTeamHome);

    if ret then
        ret := (val1.fldScoreTeamAway = val2.fldScoreTeamAway);

    end if;
	return ret;

end DemoPresScoreType_Equal;

function DemoPresScoreType_Init return DemoPresScoreType
is
    val: DemoPresScoreType;
begin

    --set fldScoreTeamHome 
    val.fldScoreTeamHome := DemoPresUInt12_Init;
    --set fldScoreTeamAway 
    val.fldScoreTeamAway := DemoPresUInt12_Init;
    return val;
end DemoPresScoreType_Init;

FUNCTION DemoPresScoreType_IsConstraintValid(val : in DemoPresScoreType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldScoreTeamHome <= 4095), ErrorCode => ERR_DEMOPRESSCORETYPE_FLDSCORETEAMHOME);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldScoreTeamAway <= 4095), ErrorCode => ERR_DEMOPRESSCORETYPE_FLDSCORETEAMAWAY);
    end if;

    RETURN ret;
END DemoPresScoreType_IsConstraintValid;



function DemoPresGameInfoType_Equal(val1, val2: in DemoPresGameInfoType)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        

begin
    ret := (val1.fldTime = val2.fldTime);

    if ret then
        ret := DemoPresScoreType_Equal(val1.fldScore, val2.fldScore);

    end if;
	return ret;

end DemoPresGameInfoType_Equal;

function DemoPresGameInfoType_Init return DemoPresGameInfoType
is
    val: DemoPresGameInfoType;
begin

    --set fldTime 
    val.fldTime := Seds.SedsSecondsSinceTAI_Init;
    --set fldScore 
    val.fldScore := DemoPresScoreType_Init;
    return val;
end DemoPresGameInfoType_Init;

FUNCTION DemoPresGameInfoType_IsConstraintValid(val : in DemoPresGameInfoType) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldTime <= 4294967295), ErrorCode => ERR_DEMOPRESGAMEINFOTYPE_FLDTIME);
    if ret.Success then
        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldScore.fldScoreTeamHome <= 4095), ErrorCode => ERR_DEMOPRESGAMEINFOTYPE_FLDSCORE_FLDSCORETEAMHOME);
        if ret.Success then
            ret := adaasn1rtl.ASN1_RESULT'(Success => (val.fldScore.fldScoreTeamAway <= 4095), ErrorCode => ERR_DEMOPRESGAMEINFOTYPE_FLDSCORE_FLDSCORETEAMAWAY);
        end if;

    end if;

    RETURN ret;
END DemoPresGameInfoType_IsConstraintValid;



function DemoPresTeamType_Equal(val1, val2: in DemoPresTeamType)
    return Boolean 
is
begin
	return val1 = val2;

end DemoPresTeamType_Equal;

function DemoPresTeamType_Init return DemoPresTeamType
is
    val: DemoPresTeamType;
begin
    val := home_team;
    return val;
end DemoPresTeamType_Init;

FUNCTION DemoPresTeamType_IsConstraintValid(val : in DemoPresTeamType) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (((val = home_team)) OR ((val = away_team))), ErrorCode => ERR_DEMOPRESTEAMTYPE);
    RETURN ret;
END DemoPresTeamType_IsConstraintValid;


 

END DemoPres;