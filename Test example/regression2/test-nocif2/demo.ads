-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
WITH CcsdsSoisSubnetwork; use CcsdsSoisSubnetwork;
--# inherit CcsdsSoisSubnetwork;


PACKAGE Demo with SPARK_Mode
IS


-- DemoTelecommandUserDataType --------------------------------------------
-- DemoTelecommandUserDataType_fldUserData --------------------------------------------
SUBTYPE DemoTelecommandUserDataType_fldUserData_index is integer range 1..255;
TYPE DemoTelecommandUserDataType_fldUserData_array IS ARRAY (DemoTelecommandUserDataType_fldUserData_index) OF CcsdsSoisSubnetwork.CcsdsSoisSubnetworkOctet;
SUBTYPE DemoTelecommandUserDataType_fldUserData_length_index is integer range 0..255;
TYPE DemoTelecommandUserDataType_fldUserData IS  RECORD
    Length : DemoTelecommandUserDataType_fldUserData_length_index;
    Data  : DemoTelecommandUserDataType_fldUserData_array;
END RECORD;

TYPE DemoTelecommandUserDataType IS RECORD 
    fldUserDataLength : CcsdsSoisSubnetwork.CcsdsSoisSubnetworkOctet;
    fldUserData : DemoTelecommandUserDataType_fldUserData;
END RECORD;

function DemoTelecommandUserDataType_fldUserData_Equal(val1, val2: in DemoTelecommandUserDataType_fldUserData) return Boolean;

function DemoTelecommandUserDataType_Equal(val1, val2: in DemoTelecommandUserDataType) return Boolean;

function DemoTelecommandUserDataType_fldUserData_Init return DemoTelecommandUserDataType_fldUserData;
function DemoTelecommandUserDataType_Init return DemoTelecommandUserDataType;

ERR_DEMOTELECOMMANDUSERDATATYPE_FLDUSERDATALENGTH:CONSTANT INTEGER := 634; 
ERR_DEMOTELECOMMANDUSERDATATYPE_FLDUSERDATA_ELM:CONSTANT INTEGER := 645; 
ERR_DEMOTELECOMMANDUSERDATATYPE_FLDUSERDATA:CONSTANT INTEGER := 656; 
FUNCTION DemoTelecommandUserDataType_IsConstraintValid(val : in DemoTelecommandUserDataType) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoStatusFlag1Type is adaasn1rtl.Asn1Boolean;


function DemoStatusFlag1Type_Equal(val1, val2: in DemoStatusFlag1Type) return Boolean;

function DemoStatusFlag1Type_Init return DemoStatusFlag1Type;

ERR_DEMOSTATUSFLAG1TYPE:CONSTANT INTEGER := 28; -- 
FUNCTION DemoStatusFlag1Type_IsConstraintValid(val : in DemoStatusFlag1Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoStatusFlag2Type is adaasn1rtl.Asn1Boolean;


function DemoStatusFlag2Type_Equal(val1, val2: in DemoStatusFlag2Type) return Boolean;

function DemoStatusFlag2Type_Init return DemoStatusFlag2Type;

ERR_DEMOSTATUSFLAG2TYPE:CONSTANT INTEGER := 35; -- 
FUNCTION DemoStatusFlag2Type_IsConstraintValid(val : in DemoStatusFlag2Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoCalibratedHK1Type is adaasn1rtl.Asn1UInt range 0 .. 255;


function DemoCalibratedHK1Type_Equal(val1, val2: in DemoCalibratedHK1Type) return Boolean;

function DemoCalibratedHK1Type_Init return DemoCalibratedHK1Type;

ERR_DEMOCALIBRATEDHK1TYPE:CONSTANT INTEGER := 42; -- 
FUNCTION DemoCalibratedHK1Type_IsConstraintValid(val : in DemoCalibratedHK1Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoCalibratedHK2Type is adaasn1rtl.Asn1UInt range 0 .. 255;


function DemoCalibratedHK2Type_Equal(val1, val2: in DemoCalibratedHK2Type) return Boolean;

function DemoCalibratedHK2Type_Init return DemoCalibratedHK2Type;

ERR_DEMOCALIBRATEDHK2TYPE:CONSTANT INTEGER := 49; -- 
FUNCTION DemoCalibratedHK2Type_IsConstraintValid(val : in DemoCalibratedHK2Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoQueryCountType is adaasn1rtl.Asn1UInt range 0 .. 255;


function DemoQueryCountType_Equal(val1, val2: in DemoQueryCountType) return Boolean;

function DemoQueryCountType_Init return DemoQueryCountType;

ERR_DEMOQUERYCOUNTTYPE:CONSTANT INTEGER := 56; -- 
FUNCTION DemoQueryCountType_IsConstraintValid(val : in DemoQueryCountType) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoExtendedModeType is adaasn1rtl.Asn1UInt range 0 .. 255;


function DemoExtendedModeType_Equal(val1, val2: in DemoExtendedModeType) return Boolean;

function DemoExtendedModeType_Init return DemoExtendedModeType;

ERR_DEMOEXTENDEDMODETYPE:CONSTANT INTEGER := 63; -- 
FUNCTION DemoExtendedModeType_IsConstraintValid(val : in DemoExtendedModeType) return adaasn1rtl.ASN1_RESULT;
-- DemoExtendedModeUnionType --------------------------------------------

TYPE DemoExtendedModeUnionType IS RECORD 
    fldMode : DemoExtendedModeType;
END RECORD;

function DemoExtendedModeUnionType_Equal(val1, val2: in DemoExtendedModeUnionType) return Boolean;

function DemoExtendedModeUnionType_Init return DemoExtendedModeUnionType;

ERR_DEMOEXTENDEDMODEUNIONTYPE_FLDMODE:CONSTANT INTEGER := 445; 
FUNCTION DemoExtendedModeUnionType_IsConstraintValid(val : in DemoExtendedModeUnionType) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoExtendedStatusType is adaasn1rtl.Asn1UInt range 0 .. 255;


function DemoExtendedStatusType_Equal(val1, val2: in DemoExtendedStatusType) return Boolean;

function DemoExtendedStatusType_Init return DemoExtendedStatusType;

ERR_DEMOEXTENDEDSTATUSTYPE:CONSTANT INTEGER := 70; -- 
FUNCTION DemoExtendedStatusType_IsConstraintValid(val : in DemoExtendedStatusType) return adaasn1rtl.ASN1_RESULT;
-- DemoExtendedStatusUnionType --------------------------------------------

TYPE DemoExtendedStatusUnionType IS RECORD 
    fldStatus : DemoExtendedStatusType;
END RECORD;

function DemoExtendedStatusUnionType_Equal(val1, val2: in DemoExtendedStatusUnionType) return Boolean;

function DemoExtendedStatusUnionType_Init return DemoExtendedStatusUnionType;

ERR_DEMOEXTENDEDSTATUSUNIONTYPE_FLDSTATUS:CONSTANT INTEGER := 428; 
FUNCTION DemoExtendedStatusUnionType_IsConstraintValid(val : in DemoExtendedStatusUnionType) return adaasn1rtl.ASN1_RESULT;
-- DemoExtendedstatusormodetype_BODY_CHOICE --------------------------------------------

SUBTYPE DemoExtendedstatusormodetype_BODY_CHOICE_index_range is integer range 0..1;

TYPE DemoExtendedstatusormodetype_BODY_CHOICE_selection IS (fldExtendedModeUnionType_PRESENT, fldExtendedStatusUnionType_PRESENT);
for DemoExtendedstatusormodetype_BODY_CHOICE_selection use
    (fldExtendedModeUnionType_PRESENT => 1, fldExtendedStatusUnionType_PRESENT => 2);
for DemoExtendedstatusormodetype_BODY_CHOICE_selection'Size use 32;

TYPE DemoExtendedstatusormodetype_BODY_CHOICE(kind : DemoExtendedstatusormodetype_BODY_CHOICE_selection:= fldExtendedModeUnionType_PRESENT) IS 
RECORD
    case kind is
    when fldExtendedModeUnionType_PRESENT =>
            fldExtendedModeUnionType: DemoExtendedModeUnionType;
    when fldExtendedStatusUnionType_PRESENT =>
            fldExtendedStatusUnionType: DemoExtendedStatusUnionType;
    end case;
END RECORD;

FOR DemoExtendedstatusormodetype_BODY_CHOICE USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

function DemoExtendedstatusormodetype_BODY_CHOICE_Equal(val1, val2: in DemoExtendedstatusormodetype_BODY_CHOICE) return Boolean;

function DemoExtendedstatusormodetype_BODY_CHOICE_Init return DemoExtendedstatusormodetype_BODY_CHOICE;

ERR_DEMOEXTENDEDSTATUSORMODETYPE_BODY_CHOICE_2:CONSTANT INTEGER := 421; 
ERR_DEMOEXTENDEDSTATUSORMODETYPE_BODY_CHOICE_FLDEXTENDEDMODEUNIONTYPE_FLDMODE_2:CONSTANT INTEGER := 379; 
ERR_DEMOEXTENDEDSTATUSORMODETYPE_BODY_CHOICE_FLDEXTENDEDSTATUSUNIONTYPE_FLDSTATUS_2:CONSTANT INTEGER := 400; 
FUNCTION DemoExtendedstatusormodetype_BODY_CHOICE_IsConstraintValid(val : in DemoExtendedstatusormodetype_BODY_CHOICE) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoHK1Type is adaasn1rtl.Asn1UInt range 0 .. 255;


function DemoHK1Type_Equal(val1, val2: in DemoHK1Type) return Boolean;

function DemoHK1Type_Init return DemoHK1Type;

ERR_DEMOHK1TYPE:CONSTANT INTEGER := 77; -- 
FUNCTION DemoHK1Type_IsConstraintValid(val : in DemoHK1Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoHK2Type is adaasn1rtl.Asn1UInt range 0 .. 255;


function DemoHK2Type_Equal(val1, val2: in DemoHK2Type) return Boolean;

function DemoHK2Type_Init return DemoHK2Type;

ERR_DEMOHK2TYPE:CONSTANT INTEGER := 84; -- 
FUNCTION DemoHK2Type_IsConstraintValid(val : in DemoHK2Type) return adaasn1rtl.ASN1_RESULT;
-- DemoTelemetrySet1Type --------------------------------------------

TYPE DemoTelemetrySet1Type IS RECORD 
    fldHk1 : DemoHK1Type;
    fldHk2 : DemoHK2Type;
END RECORD;

function DemoTelemetrySet1Type_Equal(val1, val2: in DemoTelemetrySet1Type) return Boolean;

function DemoTelemetrySet1Type_Init return DemoTelemetrySet1Type;

ERR_DEMOTELEMETRYSET1TYPE_FLDHK1:CONSTANT INTEGER := 214; 
ERR_DEMOTELEMETRYSET1TYPE_FLDHK2:CONSTANT INTEGER := 225; 
FUNCTION DemoTelemetrySet1Type_IsConstraintValid(val : in DemoTelemetrySet1Type) return adaasn1rtl.ASN1_RESULT;
-- DemoTelemetry1Type --------------------------------------------

TYPE DemoTelemetry1Type IS RECORD 
    fldTelemetrySet : DemoTelemetrySet1Type;
END RECORD;

function DemoTelemetry1Type_Equal(val1, val2: in DemoTelemetry1Type) return Boolean;

function DemoTelemetry1Type_Init return DemoTelemetry1Type;

ERR_DEMOTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK1:CONSTANT INTEGER := 995; 
ERR_DEMOTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK2:CONSTANT INTEGER := 1006; 
FUNCTION DemoTelemetry1Type_IsConstraintValid(val : in DemoTelemetry1Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoHK3Type is adaasn1rtl.Asn1UInt range 0 .. 255;


function DemoHK3Type_Equal(val1, val2: in DemoHK3Type) return Boolean;

function DemoHK3Type_Init return DemoHK3Type;

ERR_DEMOHK3TYPE:CONSTANT INTEGER := 91; -- 
FUNCTION DemoHK3Type_IsConstraintValid(val : in DemoHK3Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoHK4Type is adaasn1rtl.Asn1UInt range 0 .. 255;


function DemoHK4Type_Equal(val1, val2: in DemoHK4Type) return Boolean;

function DemoHK4Type_Init return DemoHK4Type;

ERR_DEMOHK4TYPE:CONSTANT INTEGER := 98; -- 
FUNCTION DemoHK4Type_IsConstraintValid(val : in DemoHK4Type) return adaasn1rtl.ASN1_RESULT;
-- DemoTelemetrySet2Type --------------------------------------------

TYPE DemoTelemetrySet2Type IS RECORD 
    fldHk3 : DemoHK3Type;
    fldHk4 : DemoHK4Type;
END RECORD;

function DemoTelemetrySet2Type_Equal(val1, val2: in DemoTelemetrySet2Type) return Boolean;

function DemoTelemetrySet2Type_Init return DemoTelemetrySet2Type;

ERR_DEMOTELEMETRYSET2TYPE_FLDHK3:CONSTANT INTEGER := 242; 
ERR_DEMOTELEMETRYSET2TYPE_FLDHK4:CONSTANT INTEGER := 253; 
FUNCTION DemoTelemetrySet2Type_IsConstraintValid(val : in DemoTelemetrySet2Type) return adaasn1rtl.ASN1_RESULT;
-- DemoTelemetry2Type --------------------------------------------

TYPE DemoTelemetry2Type IS RECORD 
    fldTelemetrySet : DemoTelemetrySet2Type;
END RECORD;

function DemoTelemetry2Type_Equal(val1, val2: in DemoTelemetry2Type) return Boolean;

function DemoTelemetry2Type_Init return DemoTelemetry2Type;

ERR_DEMOTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK3:CONSTANT INTEGER := 1033; 
ERR_DEMOTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK4:CONSTANT INTEGER := 1044; 
FUNCTION DemoTelemetry2Type_IsConstraintValid(val : in DemoTelemetry2Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoCommandStatusType is adaasn1rtl.Asn1UInt range 0 .. 65535;


function DemoCommandStatusType_Equal(val1, val2: in DemoCommandStatusType) return Boolean;

function DemoCommandStatusType_Init return DemoCommandStatusType;

ERR_DEMOCOMMANDSTATUSTYPE:CONSTANT INTEGER := 105; -- 
FUNCTION DemoCommandStatusType_IsConstraintValid(val : in DemoCommandStatusType) return adaasn1rtl.ASN1_RESULT;
-- DemoTelemetryAckType --------------------------------------------

TYPE DemoTelemetryAckType IS RECORD 
    fldStatus : DemoCommandStatusType;
END RECORD;

function DemoTelemetryAckType_Equal(val1, val2: in DemoTelemetryAckType) return Boolean;

function DemoTelemetryAckType_Init return DemoTelemetryAckType;

ERR_DEMOTELEMETRYACKTYPE_FLDSTATUS:CONSTANT INTEGER := 978; 
FUNCTION DemoTelemetryAckType_IsConstraintValid(val : in DemoTelemetryAckType) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoEventDataType is adaasn1rtl.Asn1UInt range 0 .. 255;


function DemoEventDataType_Equal(val1, val2: in DemoEventDataType) return Boolean;

function DemoEventDataType_Init return DemoEventDataType;

ERR_DEMOEVENTDATATYPE:CONSTANT INTEGER := 112; -- 
FUNCTION DemoEventDataType_IsConstraintValid(val : in DemoEventDataType) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoUserDataLengthType is adaasn1rtl.Asn1UInt range 0 .. 65535;


function DemoUserDataLengthType_Equal(val1, val2: in DemoUserDataLengthType) return Boolean;

function DemoUserDataLengthType_Init return DemoUserDataLengthType;

ERR_DEMOUSERDATALENGTHTYPE:CONSTANT INTEGER := 119; -- 
FUNCTION DemoUserDataLengthType_IsConstraintValid(val : in DemoUserDataLengthType) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoModeType_index_range is integer range 0..4;
TYPE DemoModeType IS (reset, do_a_little_bit_of_stuff, do_lots_of_stuff, do_tonnes_of_stuff_badly, reveal_a_bug_and_malfunction) with Convention => C;
for DemoModeType use
    (reset => 0, do_a_little_bit_of_stuff => 1, do_lots_of_stuff => 4, do_tonnes_of_stuff_badly => 6, reveal_a_bug_and_malfunction => 9);

function DemoModeType_Equal(val1, val2: in DemoModeType) return Boolean;

function DemoModeType_Init return DemoModeType;

ERR_DEMOMODETYPE:CONSTANT INTEGER := 126; -- 
FUNCTION DemoModeType_IsConstraintValid(val : in DemoModeType) return adaasn1rtl.ASN1_RESULT;
-- DemoTelecommandModeType --------------------------------------------

TYPE DemoTelecommandModeType IS RECORD 
    fldMode : DemoModeType;
END RECORD;

function DemoTelecommandModeType_Equal(val1, val2: in DemoTelecommandModeType) return Boolean;

function DemoTelecommandModeType_Init return DemoTelecommandModeType;

ERR_DEMOTELECOMMANDMODETYPE_FLDMODE:CONSTANT INTEGER := 617; 
FUNCTION DemoTelecommandModeType_IsConstraintValid(val : in DemoTelecommandModeType) return adaasn1rtl.ASN1_RESULT;
-- DemoTelecommandtype_BODY_CHOICE --------------------------------------------

SUBTYPE DemoTelecommandtype_BODY_CHOICE_index_range is integer range 0..1;

TYPE DemoTelecommandtype_BODY_CHOICE_selection IS (fldTelecommandModeType_PRESENT, fldTelecommandUserDataType_PRESENT);
for DemoTelecommandtype_BODY_CHOICE_selection use
    (fldTelecommandModeType_PRESENT => 1, fldTelecommandUserDataType_PRESENT => 2);
for DemoTelecommandtype_BODY_CHOICE_selection'Size use 32;

TYPE DemoTelecommandtype_BODY_CHOICE(kind : DemoTelecommandtype_BODY_CHOICE_selection:= fldTelecommandModeType_PRESENT) IS 
RECORD
    case kind is
    when fldTelecommandModeType_PRESENT =>
            fldTelecommandModeType: DemoTelecommandModeType;
    when fldTelecommandUserDataType_PRESENT =>
            fldTelecommandUserDataType: DemoTelecommandUserDataType;
    end case;
END RECORD;

FOR DemoTelecommandtype_BODY_CHOICE USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

function DemoTelecommandtype_BODY_CHOICE_Equal(val1, val2: in DemoTelecommandtype_BODY_CHOICE) return Boolean;

function DemoTelecommandtype_BODY_CHOICE_Init return DemoTelecommandtype_BODY_CHOICE;

ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_2:CONSTANT INTEGER := 610; 
ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDMODETYPE_FLDMODE_2:CONSTANT INTEGER := 550; 
ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATALENGTH_2:CONSTANT INTEGER := 571; 
ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATA_ELM_2:CONSTANT INTEGER := 582; 
ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATA_2:CONSTANT INTEGER := 593; 
FUNCTION DemoTelecommandtype_BODY_CHOICE_IsConstraintValid(val : in DemoTelecommandtype_BODY_CHOICE) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoEventTypeType_index_range is integer range 0..2;
TYPE DemoEventTypeType IS (event1, event2, event3) with Convention => C;
for DemoEventTypeType use
    (event1 => 0, event2 => 1, event3 => 2);

function DemoEventTypeType_Equal(val1, val2: in DemoEventTypeType) return Boolean;

function DemoEventTypeType_Init return DemoEventTypeType;

ERR_DEMOEVENTTYPETYPE:CONSTANT INTEGER := 133; -- 
FUNCTION DemoEventTypeType_IsConstraintValid(val : in DemoEventTypeType) return adaasn1rtl.ASN1_RESULT;
-- DemoEventType --------------------------------------------

TYPE DemoEventType IS RECORD 
    fldType : DemoEventTypeType;
    fldData : DemoEventDataType;
END RECORD;

function DemoEventType_Equal(val1, val2: in DemoEventType) return Boolean;

function DemoEventType_Init return DemoEventType;

ERR_DEMOEVENTTYPE_FLDTYPE:CONSTANT INTEGER := 270; 
ERR_DEMOEVENTTYPE_FLDDATA:CONSTANT INTEGER := 281; 
FUNCTION DemoEventType_IsConstraintValid(val : in DemoEventType) return adaasn1rtl.ASN1_RESULT;
-- DemoTelemetryEventType --------------------------------------------

TYPE DemoTelemetryEventType IS RECORD 
    fldEventType : DemoEventTypeType;
    fldEventData : DemoEventDataType;
END RECORD;

function DemoTelemetryEventType_Equal(val1, val2: in DemoTelemetryEventType) return Boolean;

function DemoTelemetryEventType_Init return DemoTelemetryEventType;

ERR_DEMOTELEMETRYEVENTTYPE_FLDEVENTTYPE:CONSTANT INTEGER := 1071; 
ERR_DEMOTELEMETRYEVENTTYPE_FLDEVENTDATA:CONSTANT INTEGER := 1082; 
FUNCTION DemoTelemetryEventType_IsConstraintValid(val : in DemoTelemetryEventType) return adaasn1rtl.ASN1_RESULT;
-- DemoTelemetrytype_BODY_CHOICE --------------------------------------------

SUBTYPE DemoTelemetrytype_BODY_CHOICE_index_range is integer range 0..3;

TYPE DemoTelemetrytype_BODY_CHOICE_selection IS (fldTelemetry1Type_PRESENT, fldTelemetry2Type_PRESENT, fldTelemetryAckType_PRESENT, fldTelemetryEventType_PRESENT);
for DemoTelemetrytype_BODY_CHOICE_selection use
    (fldTelemetry1Type_PRESENT => 1, fldTelemetry2Type_PRESENT => 2, fldTelemetryAckType_PRESENT => 3, fldTelemetryEventType_PRESENT => 4);
for DemoTelemetrytype_BODY_CHOICE_selection'Size use 32;

TYPE DemoTelemetrytype_BODY_CHOICE(kind : DemoTelemetrytype_BODY_CHOICE_selection:= fldTelemetry1Type_PRESENT) IS 
RECORD
    case kind is
    when fldTelemetry1Type_PRESENT =>
            fldTelemetry1Type: DemoTelemetry1Type;
    when fldTelemetry2Type_PRESENT =>
            fldTelemetry2Type: DemoTelemetry2Type;
    when fldTelemetryAckType_PRESENT =>
            fldTelemetryAckType: DemoTelemetryAckType;
    when fldTelemetryEventType_PRESENT =>
            fldTelemetryEventType: DemoTelemetryEventType;
    end case;
END RECORD;

FOR DemoTelemetrytype_BODY_CHOICE USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

function DemoTelemetrytype_BODY_CHOICE_Equal(val1, val2: in DemoTelemetrytype_BODY_CHOICE) return Boolean;

function DemoTelemetrytype_BODY_CHOICE_Init return DemoTelemetrytype_BODY_CHOICE;

ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_2:CONSTANT INTEGER := 971; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK1_2:CONSTANT INTEGER := 834; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK2_2:CONSTANT INTEGER := 845; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK3_2:CONSTANT INTEGER := 876; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK4_2:CONSTANT INTEGER := 887; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYACKTYPE_FLDSTATUS_2:CONSTANT INTEGER := 918; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYEVENTTYPE_FLDEVENTTYPE_2:CONSTANT INTEGER := 939; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYEVENTTYPE_FLDEVENTDATA_2:CONSTANT INTEGER := 950; 
FUNCTION DemoTelemetrytype_BODY_CHOICE_IsConstraintValid(val : in DemoTelemetrytype_BODY_CHOICE) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoReadStatusModeCommandType_index_range is integer range 0..1;
TYPE DemoReadStatusModeCommandType IS (read_status, read_mode) with Convention => C;
for DemoReadStatusModeCommandType use
    (read_status => 1, read_mode => 2);

function DemoReadStatusModeCommandType_Equal(val1, val2: in DemoReadStatusModeCommandType) return Boolean;

function DemoReadStatusModeCommandType_Init return DemoReadStatusModeCommandType;

ERR_DEMOREADSTATUSMODECOMMANDTYPE:CONSTANT INTEGER := 140; -- 
FUNCTION DemoReadStatusModeCommandType_IsConstraintValid(val : in DemoReadStatusModeCommandType) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoExtendedStatusModeEnumType_index_range is integer range 0..1;
TYPE DemoExtendedStatusModeEnumType IS (DemoExtendedStatusModeEnumType_mode, status) with Convention => C;
for DemoExtendedStatusModeEnumType use
    (DemoExtendedStatusModeEnumType_mode => 0, status => 1);

function DemoExtendedStatusModeEnumType_Equal(val1, val2: in DemoExtendedStatusModeEnumType) return Boolean;

function DemoExtendedStatusModeEnumType_Init return DemoExtendedStatusModeEnumType;

ERR_DEMOEXTENDEDSTATUSMODEENUMTYPE:CONSTANT INTEGER := 147; -- 
FUNCTION DemoExtendedStatusModeEnumType_IsConstraintValid(val : in DemoExtendedStatusModeEnumType) return adaasn1rtl.ASN1_RESULT;
-- DemoExtendedStatusOrModeType --------------------------------------------

TYPE DemoExtendedStatusOrModeType IS RECORD 
    fldQueryCount : DemoQueryCountType;
    fldType : DemoExtendedStatusModeEnumType;
    body_choice : DemoExtendedstatusormodetype_BODY_CHOICE;
END RECORD;

function DemoExtendedStatusOrModeType_Equal(val1, val2: in DemoExtendedStatusOrModeType) return Boolean;

function DemoExtendedStatusOrModeType_Init return DemoExtendedStatusOrModeType;

ERR_DEMOEXTENDEDSTATUSORMODETYPE_FLDQUERYCOUNT:CONSTANT INTEGER := 298; 
ERR_DEMOEXTENDEDSTATUSORMODETYPE_FLDTYPE:CONSTANT INTEGER := 309; 
ERR_DEMOEXTENDEDSTATUSORMODETYPE_BODY_CHOICE:CONSTANT INTEGER := 362; 
ERR_DEMOEXTENDEDSTATUSORMODETYPE_BODY_CHOICE_FLDEXTENDEDMODEUNIONTYPE_FLDMODE:CONSTANT INTEGER := 320; 
ERR_DEMOEXTENDEDSTATUSORMODETYPE_BODY_CHOICE_FLDEXTENDEDSTATUSUNIONTYPE_FLDSTATUS:CONSTANT INTEGER := 341; 
FUNCTION DemoExtendedStatusOrModeType_IsConstraintValid(val : in DemoExtendedStatusOrModeType) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoTelecommandTypeEnumType_index_range is integer range 0..1;
TYPE DemoTelecommandTypeEnumType IS (DemoTelecommandTypeEnumType_mode, user_data) with Convention => C;
for DemoTelecommandTypeEnumType use
    (DemoTelecommandTypeEnumType_mode => 0, user_data => 1);

function DemoTelecommandTypeEnumType_Equal(val1, val2: in DemoTelecommandTypeEnumType) return Boolean;

function DemoTelecommandTypeEnumType_Init return DemoTelecommandTypeEnumType;

ERR_DEMOTELECOMMANDTYPEENUMTYPE:CONSTANT INTEGER := 154; -- 
FUNCTION DemoTelecommandTypeEnumType_IsConstraintValid(val : in DemoTelecommandTypeEnumType) return adaasn1rtl.ASN1_RESULT;
-- DemoTelecommandType --------------------------------------------

TYPE DemoTelecommandType IS RECORD 
    fldType : DemoTelecommandTypeEnumType;
    body_choice : DemoTelecommandtype_BODY_CHOICE;
END RECORD;

function DemoTelecommandType_Equal(val1, val2: in DemoTelecommandType) return Boolean;

function DemoTelecommandType_Init return DemoTelecommandType;

ERR_DEMOTELECOMMANDTYPE_FLDTYPE:CONSTANT INTEGER := 462; 
ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE:CONSTANT INTEGER := 533; 
ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDMODETYPE_FLDMODE:CONSTANT INTEGER := 473; 
ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATALENGTH:CONSTANT INTEGER := 494; 
ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATA_ELM:CONSTANT INTEGER := 505; 
ERR_DEMOTELECOMMANDTYPE_BODY_CHOICE_FLDTELECOMMANDUSERDATATYPE_FLDUSERDATA:CONSTANT INTEGER := 516; 
FUNCTION DemoTelecommandType_IsConstraintValid(val : in DemoTelecommandType) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoTelemetryTypeEnumType_index_range is integer range 0..3;
TYPE DemoTelemetryTypeEnumType IS (ack, type1, type2, event) with Convention => C;
for DemoTelemetryTypeEnumType use
    (ack => 0, type1 => 1, type2 => 2, event => 3);

function DemoTelemetryTypeEnumType_Equal(val1, val2: in DemoTelemetryTypeEnumType) return Boolean;

function DemoTelemetryTypeEnumType_Init return DemoTelemetryTypeEnumType;

ERR_DEMOTELEMETRYTYPEENUMTYPE:CONSTANT INTEGER := 161; -- 
FUNCTION DemoTelemetryTypeEnumType_IsConstraintValid(val : in DemoTelemetryTypeEnumType) return adaasn1rtl.ASN1_RESULT;
-- DemoTelemetryType --------------------------------------------

TYPE DemoTelemetryType IS RECORD 
    fldType : DemoTelemetryTypeEnumType;
    body_choice : DemoTelemetrytype_BODY_CHOICE;
END RECORD;

function DemoTelemetryType_Equal(val1, val2: in DemoTelemetryType) return Boolean;

function DemoTelemetryType_Init return DemoTelemetryType;

ERR_DEMOTELEMETRYTYPE_FLDTYPE:CONSTANT INTEGER := 669; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE:CONSTANT INTEGER := 817; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK1:CONSTANT INTEGER := 680; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY1TYPE_FLDTELEMETRYSET_FLDHK2:CONSTANT INTEGER := 691; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK3:CONSTANT INTEGER := 722; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRY2TYPE_FLDTELEMETRYSET_FLDHK4:CONSTANT INTEGER := 733; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYACKTYPE_FLDSTATUS:CONSTANT INTEGER := 764; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYEVENTTYPE_FLDEVENTTYPE:CONSTANT INTEGER := 785; 
ERR_DEMOTELEMETRYTYPE_BODY_CHOICE_FLDTELEMETRYEVENTTYPE_FLDEVENTDATA:CONSTANT INTEGER := 796; 
FUNCTION DemoTelemetryType_IsConstraintValid(val : in DemoTelemetryType) return adaasn1rtl.ASN1_RESULT;
SUBTYPE DemoOpCountType is adaasn1rtl.Asn1UInt range 0 .. 39;


function DemoOpCountType_Equal(val1, val2: in DemoOpCountType) return Boolean;

function DemoOpCountType_Init return DemoOpCountType;

ERR_DEMOOPCOUNTTYPE:CONSTANT INTEGER := 168; -- 
FUNCTION DemoOpCountType_IsConstraintValid(val : in DemoOpCountType) return adaasn1rtl.ASN1_RESULT;
-- DemoStatusType --------------------------------------------

TYPE DemoStatusType IS RECORD 
    fldStatusFlag1 : DemoStatusFlag1Type;
    fldStatusFlag2 : DemoStatusFlag2Type;
    fldOpCount : DemoOpCountType;
END RECORD;

function DemoStatusType_Equal(val1, val2: in DemoStatusType) return Boolean;

function DemoStatusType_Init return DemoStatusType;

ERR_DEMOSTATUSTYPE_FLDSTATUSFLAG1:CONSTANT INTEGER := 175; 
ERR_DEMOSTATUSTYPE_FLDSTATUSFLAG2:CONSTANT INTEGER := 186; 
ERR_DEMOSTATUSTYPE_FLDOPCOUNT:CONSTANT INTEGER := 197; 
FUNCTION DemoStatusType_IsConstraintValid(val : in DemoStatusType) return adaasn1rtl.ASN1_RESULT;

 

private
   --# hide Demo;


END Demo;