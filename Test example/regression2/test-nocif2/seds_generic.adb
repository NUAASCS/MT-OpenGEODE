-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
WITH Seds;
use type Seds.SedsUint8;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;


PACKAGE BODY SEDS_Generic with SPARK_Mode IS




function GenericArray_Equal(val1, val2: in GenericArray)
    return Boolean 
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : Boolean := TRUE;
    pragma Warnings (On, "initialization of ret has no effect");        
    i1:Integer;

begin
    i1 := val1.Data'First;
    while ret and i1 <= 1 loop
        pragma Loop_Invariant (i1 >= val1.Data'First and i1 >= val2.Data'First);
        ret := (val1.Data(i1) = val2.Data(i1));
        i1 := i1+1;
    end loop;
	return ret;

end GenericArray_Equal;

function GenericArray_Init return GenericArray
is
    val: GenericArray;
    i1:Integer;
begin
    i1 := 1;
    while i1<= 1 loop
        pragma Loop_Invariant (i1 >=1 and i1<=1);
        val.Data(i1) := Seds.SedsUint8_Init;
        i1 := i1 + 1;
    end loop;

    return val;
end GenericArray_Init;

FUNCTION GenericArray_IsConstraintValid(val : in GenericArray) return adaasn1rtl.ASN1_RESULT
IS
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
    i1:Integer;
BEGIN
    i1 := val.Data'First;
    while ret.Success and i1 <= 1 loop
        pragma Loop_Invariant (i1 >= val.Data'First and i1 <= 1);
        ret := adaasn1rtl.ASN1_RESULT'(Success => (val.Data(i1) <= 255), ErrorCode => ERR_GENERICARRAY_ELM);
        i1 := i1+1;
    end loop;

    RETURN ret;
END GenericArray_IsConstraintValid;


 

END SEDS_Generic;