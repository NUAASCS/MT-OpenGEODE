/* CIF PROCESS (295, 57), (150, 75) */
PROCESS orchestrator
/* CIF COMMENT (405, 193), (71, 35) */
COMMENT 'Hello';
    /* CIF TEXT (39, 94), (293, 263) */
    dcl fixed FixedString := 'Helo';

dcl variable variableString := 'Hop';

dcl seqof seqbool;
    /* CIF ENDTEXT */
    /* CIF START (456, 110), (70, 35) */
    START;
        /* CIF TASK (372, 160), (235, 35) */
        TASK seqof := {true} // {false} // {false};
        /* CIF TASK (409, 210), (163, 53) */
        TASK for each in seqof:
    call writeln(each);
endfor;
        /* CIF PROCEDURECALL (368, 278), (244, 35) */
        CALL writeln('(1) -> ', seqof(0), seqof(1));
        /* CIF TASK (388, 328), (205, 33) */
        TASK seqof := seqof // {true};
        /* CIF PROCEDURECALL (368, 376), (244, 35) */
        CALL writeln('(2) -> ', seqof(0), seqof(3));
        /* CIF TASK (409, 426), (163, 53) */
        TASK 'for each in seqof:
    call writeln(each);
endfor';
        /* CIF PROCEDURECALL (357, 494), (267, 35) */
        CALL writeln(fixed(0,2)//fixed(2,3)// ' word');
        /* CIF PROCEDURECALL (410, 544), (162, 35) */
        CALL writeln(variable);
        /* CIF TASK (397, 594), (188, 35) */
        TASK variable := variable // '!!';
        /* CIF PROCEDURECALL (410, 644), (162, 35) */
        CALL writeln(variable);
        /* CIF PROCEDURECALL (406, 694), (170, 35) */
        CALL writeln(variable//':-)');
        /* CIF TASK (401, 744), (180, 35) */
        TASK variable := variable(0,2);
        /* CIF PROCEDURECALL (361, 794), (259, 35) */
        CALL writeln(variable(0, 2));
        /* CIF DECISION (380, 844), (221, 50) */
        DECISION variable // variable = 'HopHop';
                /* CIF ANSWER (371, 914), (70, 23) */
                (true):
                    /* CIF PROCEDURECALL (347, 952), (117, 35) */
                    CALL writeln('OK');
                /* CIF ANSWER (543, 914), (70, 23) */
                (false):
                    /* CIF PROCEDURECALL (474, 952), (207, 35) */
                    CALL writeln(variable // variable);
        ENDDECISION;
        /* CIF NEXTSTATE (455, 1002), (70, 35) */
        NEXTSTATE wait;
    /* CIF STATE (272, 359), (70, 35) */
    STATE wait;
    ENDSTATE;
ENDPROCESS orchestrator;