-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_Dataview with SPARK_Mode
IS


SUBTYPE MyInteger is adaasn1rtl.Asn1UInt range 0 .. 255;


function MyInteger_Equal(val1, val2: in MyInteger) return Boolean;

function MyInteger_Init return MyInteger;

ERR_MYINTEGER:CONSTANT INTEGER := 1; -- 
FUNCTION MyInteger_IsConstraintValid(val : in MyInteger) return adaasn1rtl.ASN1_RESULT;
-- SeqOf --------------------------------------------
SUBTYPE SeqOf_index is integer range 1..100;
TYPE SeqOf_array IS ARRAY (SeqOf_index) OF MyInteger;
SUBTYPE SeqOf_length_index is integer range 0..100;
TYPE SeqOf IS  RECORD
    Length : SeqOf_length_index;
    Data  : SeqOf_array;
END RECORD;

function SeqOf_Equal(val1, val2: in SeqOf) return Boolean;

function SeqOf_Init return SeqOf;

ERR_SEQOF_ELM:CONSTANT INTEGER := 22; 
ERR_SEQOF:CONSTANT INTEGER := 33; 
FUNCTION SeqOf_IsConstraintValid(val : in SeqOf) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyReal is adaasn1rtl.Asn1Real;


function MyReal_Equal(val1, val2: in MyReal) return Boolean;

function MyReal_Init return MyReal;

ERR_MYREAL:CONSTANT INTEGER := 8; -- 
FUNCTION MyReal_IsConstraintValid(val : in MyReal) return adaasn1rtl.ASN1_RESULT;
SUBTYPE My_OctStr_index is integer range 1..20;
SUBTYPE My_OctStr_array IS adaasn1rtl.OctetBuffer(My_OctStr_index);
SUBTYPE My_OctStr_length_index is integer range 0..20;
TYPE My_OctStr IS  RECORD
    Length : My_OctStr_length_index;
    Data  : My_OctStr_array;
END RECORD;

function My_OctStr_Equal(val1, val2: in My_OctStr) return Boolean;

function My_OctStr_Init return My_OctStr;

ERR_MY_OCTSTR:CONSTANT INTEGER := 15; -- 
FUNCTION My_OctStr_IsConstraintValid(val : in My_OctStr) return adaasn1rtl.ASN1_RESULT;

 

private
   --# hide TASTE_Dataview;


END TASTE_Dataview;