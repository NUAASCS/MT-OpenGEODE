-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_Dataview with SPARK_Mode
IS


-- MyChoice --------------------------------------------
-- MyChoice_a --------------------------------------------
-- MyChoice_a_b --------------------------------------------

SUBTYPE MyChoice_a_b_index_range is integer range 0..1;

TYPE MyChoice_a_b_selection IS (c_PRESENT, d_PRESENT);
for MyChoice_a_b_selection use
    (c_PRESENT => 1, d_PRESENT => 2);
for MyChoice_a_b_selection'Size use 32;

TYPE MyChoice_a_b(kind : MyChoice_a_b_selection:= c_PRESENT) IS 
RECORD
    case kind is
    when c_PRESENT =>
            c: adaasn1rtl.Asn1Boolean;
    when d_PRESENT =>
            d: adaasn1rtl.Asn1Boolean;
    end case;
END RECORD;

FOR MyChoice_a_b USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

SUBTYPE MyChoice_a_index_range is integer range 0..1;

TYPE MyChoice_a_selection IS (b_PRESENT, e_PRESENT);
for MyChoice_a_selection use
    (b_PRESENT => 1, e_PRESENT => 2);
for MyChoice_a_selection'Size use 32;

TYPE MyChoice_a(kind : MyChoice_a_selection:= b_PRESENT) IS 
RECORD
    case kind is
    when b_PRESENT =>
            b: MyChoice_a_b;
    when e_PRESENT =>
            e: adaasn1rtl.Asn1Boolean;
    end case;
END RECORD;

FOR MyChoice_a USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

SUBTYPE MyChoice_index_range is integer range 0..1;

TYPE MyChoice_selection IS (a_PRESENT, f_PRESENT);
for MyChoice_selection use
    (a_PRESENT => 1, f_PRESENT => 2);
for MyChoice_selection'Size use 32;

TYPE MyChoice(kind : MyChoice_selection:= a_PRESENT) IS 
RECORD
    case kind is
    when a_PRESENT =>
            a: MyChoice_a;
    when f_PRESENT =>
            f: adaasn1rtl.Asn1Boolean;
    end case;
END RECORD;

FOR MyChoice USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

function MyChoice_a_b_Equal(val1, val2: in MyChoice_a_b) return Boolean;

function MyChoice_a_Equal(val1, val2: in MyChoice_a) return Boolean;

function MyChoice_Equal(val1, val2: in MyChoice) return Boolean;

function MyChoice_a_b_Init return MyChoice_a_b;
function MyChoice_a_Init return MyChoice_a;
function MyChoice_Init return MyChoice;

ERR_MYCHOICE:CONSTANT INTEGER := 43; 
ERR_MYCHOICE_A:CONSTANT INTEGER := 29; 
ERR_MYCHOICE_A_B:CONSTANT INTEGER := 15; 
ERR_MYCHOICE_A_B_C:CONSTANT INTEGER := 1; 
ERR_MYCHOICE_A_B_D:CONSTANT INTEGER := 8; 
ERR_MYCHOICE_A_E:CONSTANT INTEGER := 22; 
ERR_MYCHOICE_F:CONSTANT INTEGER := 36; 
FUNCTION MyChoice_IsConstraintValid(val : in MyChoice) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyInteger is adaasn1rtl.Asn1UInt range 0 .. 255;


function MyInteger_Equal(val1, val2: in MyInteger) return Boolean;

function MyInteger_Init return MyInteger;

ERR_MYINTEGER:CONSTANT INTEGER := 61; -- 
FUNCTION MyInteger_IsConstraintValid(val : in MyInteger) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Some_Thing is MyInteger range 0 .. 255;


function Some_Thing_Equal(val1, val2: in Some_Thing) return Boolean;

function Some_Thing_Init return Some_Thing;

ERR_SOME_THING:CONSTANT INTEGER := 50; -- 
FUNCTION Some_Thing_IsConstraintValid(val : in Some_Thing) return adaasn1rtl.ASN1_RESULT;
-- SeqOf --------------------------------------------
SUBTYPE SeqOf_index is integer range 1..100;
TYPE SeqOf_array IS ARRAY (SeqOf_index) OF MyInteger;
SUBTYPE SeqOf_length_index is integer range 0..100;
TYPE SeqOf IS  RECORD
    Length : SeqOf_length_index;
    Data  : SeqOf_array;
END RECORD;

function SeqOf_Equal(val1, val2: in SeqOf) return Boolean;

function SeqOf_Init return SeqOf;

ERR_SEQOF_ELM:CONSTANT INTEGER := 75; 
ERR_SEQOF:CONSTANT INTEGER := 86; 
FUNCTION SeqOf_IsConstraintValid(val : in SeqOf) return adaasn1rtl.ASN1_RESULT;
SUBTYPE My_OctStr_index is integer range 1..20;
SUBTYPE My_OctStr_array IS adaasn1rtl.OctetBuffer(My_OctStr_index);
SUBTYPE My_OctStr_length_index is integer range 0..20;
TYPE My_OctStr IS  RECORD
    Length : My_OctStr_length_index;
    Data  : My_OctStr_array;
END RECORD;

function My_OctStr_Equal(val1, val2: in My_OctStr) return Boolean;

function My_OctStr_Init return My_OctStr;

ERR_MY_OCTSTR:CONSTANT INTEGER := 68; -- 
FUNCTION My_OctStr_IsConstraintValid(val : in My_OctStr) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Type1 is adaasn1rtl.Asn1UInt range 0 .. 1;


function Type1_Equal(val1, val2: in Type1) return Boolean;

function Type1_Init return Type1;

ERR_TYPE1:CONSTANT INTEGER := 93; -- 
FUNCTION Type1_IsConstraintValid(val : in Type1) return adaasn1rtl.ASN1_RESULT;
SUBTYPE Type2 is adaasn1rtl.Asn1Boolean;


function Type2_Equal(val1, val2: in Type2) return Boolean;

function Type2_Init return Type2;

ERR_TYPE2:CONSTANT INTEGER := 100; -- 
FUNCTION Type2_IsConstraintValid(val : in Type2) return adaasn1rtl.ASN1_RESULT;
-- Toto --------------------------------------------

TYPE Toto IS RECORD 
    elem_1 : Type1;
    elem_2 : Type2;
END RECORD;

function Toto_Equal(val1, val2: in Toto) return Boolean;

function Toto_Init return Toto;

ERR_TOTO_ELEM_1:CONSTANT INTEGER := 107; 
ERR_TOTO_ELEM_2:CONSTANT INTEGER := 118; 
FUNCTION Toto_IsConstraintValid(val : in Toto) return adaasn1rtl.ASN1_RESULT;
-- SeqBool --------------------------------------------
SUBTYPE SeqBool_index is integer range 1..5;
TYPE SeqBool_array IS ARRAY (SeqBool_index) OF adaasn1rtl.Asn1Boolean;
SUBTYPE SeqBool_length_index is integer range 1..5;
TYPE SeqBool IS  RECORD
    Length : SeqBool_length_index;
    Data  : SeqBool_array;
END RECORD;

function SeqBool_Equal(val1, val2: in SeqBool) return Boolean;

function SeqBool_Init return SeqBool;

ERR_SEQBOOL_ELM:CONSTANT INTEGER := 135; 
ERR_SEQBOOL:CONSTANT INTEGER := 142; 
FUNCTION SeqBool_IsConstraintValid(val : in SeqBool) return adaasn1rtl.ASN1_RESULT;

default_seqof : CONSTANT TASTE_Dataview.SeqOf:= SeqOf'(Length => 3,Data => SeqOf_array'(1=>4, 2=>7, 3=>9, others => 0));
default_str : CONSTANT TASTE_Dataview.My_OctStr:= My_OctStr'(Length => 4,Data => My_OctStr_array'(1=>16#DE#, 2=>16#AD#, 3=>16#BE#, 
                                                4=>16#EF#, others=> 16#0#)) ; 

private
   --# hide TASTE_Dataview;


END TASTE_Dataview;