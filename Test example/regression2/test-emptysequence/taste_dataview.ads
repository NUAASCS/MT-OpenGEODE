-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_Dataview with SPARK_Mode
IS


-- EmptySeq --------------------------------------------

TYPE EmptySeq IS RECORD 
    null;
END RECORD;

function EmptySeq_Equal(val1, val2: in EmptySeq) return Boolean;

function EmptySeq_Init return EmptySeq;
-- AnotherEmptySeq --------------------------------------------

TYPE AnotherEmptySeq IS RECORD 
    null;
END RECORD;

function AnotherEmptySeq_Equal(val1, val2: in AnotherEmptySeq) return Boolean;

function AnotherEmptySeq_Init return AnotherEmptySeq;
SUBTYPE NullType is adaasn1rtl.Asn1NullType;


function NullType_Equal(val1, val2: in NullType) return Boolean;

function NullType_Init return NullType;
-- ChoiceWithEmptySeq --------------------------------------------

SUBTYPE ChoiceWithEmptySeq_index_range is integer range 0..2;

TYPE ChoiceWithEmptySeq_selection IS (a_PRESENT, b_PRESENT, c_PRESENT);
for ChoiceWithEmptySeq_selection use
    (a_PRESENT => 1, b_PRESENT => 2, c_PRESENT => 3);
for ChoiceWithEmptySeq_selection'Size use 32;

TYPE ChoiceWithEmptySeq(kind : ChoiceWithEmptySeq_selection:= a_PRESENT) IS 
RECORD
    case kind is
    when a_PRESENT =>
            a: adaasn1rtl.Asn1NullType;
    when b_PRESENT =>
            b: EmptySeq;
    when c_PRESENT =>
            c: NullType;
    end case;
END RECORD;

FOR ChoiceWithEmptySeq USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

function ChoiceWithEmptySeq_Equal(val1, val2: in ChoiceWithEmptySeq) return Boolean;

function ChoiceWithEmptySeq_Init return ChoiceWithEmptySeq;

ERR_CHOICEWITHEMPTYSEQ:CONSTANT INTEGER := 45; 
FUNCTION ChoiceWithEmptySeq_IsConstraintValid(val : in ChoiceWithEmptySeq) return adaasn1rtl.ASN1_RESULT;

c1 : CONSTANT TASTE_Dataview.EmptySeq:= EmptySeq'(
null record
    );
n1 : CONSTANT TASTE_Dataview.NullType:= 0;
c2 : CONSTANT TASTE_Dataview.ChoiceWithEmptySeq:= ChoiceWithEmptySeq'(kind => a_PRESENT, a => 0);
c3 : CONSTANT TASTE_Dataview.ChoiceWithEmptySeq:= ChoiceWithEmptySeq'(kind => b_PRESENT, b => EmptySeq'(
null record
    ));
c4 : CONSTANT TASTE_Dataview.ChoiceWithEmptySeq:= ChoiceWithEmptySeq'(kind => c_PRESENT, c => 0);
c5 : CONSTANT TASTE_Dataview.AnotherEmptySeq:= AnotherEmptySeq'(
null record
    ); 

private
   --# hide TASTE_Dataview;


END TASTE_Dataview;