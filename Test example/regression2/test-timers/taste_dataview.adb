-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;


PACKAGE BODY TASTE_Dataview with SPARK_Mode IS




function T_UInt32_Equal(val1, val2: in T_UInt32)
    return Boolean 
is
begin
	return val1 = val2;

end T_UInt32_Equal;

function T_UInt32_Init return T_UInt32
is
    val: T_UInt32;
begin
    val := 0;
    return val;
end T_UInt32_Init;

FUNCTION T_UInt32_IsConstraintValid(val : in T_UInt32) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 65535), ErrorCode => ERR_T_UINT32);
    RETURN ret;
END T_UInt32_IsConstraintValid;



function Signed_Int_Equal(val1, val2: in Signed_Int)
    return Boolean 
is
begin
	return val1 = val2;

end Signed_Int_Equal;

function Signed_Int_Init return Signed_Int
is
    val: Signed_Int;
begin
    val := 0;
    return val;
end Signed_Int_Init;

FUNCTION Signed_Int_IsConstraintValid(val : in Signed_Int) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => ((-1000 <= val) AND (val <= 1000)), ErrorCode => ERR_SIGNED_INT);
    RETURN ret;
END Signed_Int_IsConstraintValid;



function Unsigned_Int_Equal(val1, val2: in Unsigned_Int)
    return Boolean 
is
begin
	return val1 = val2;

end Unsigned_Int_Equal;

function Unsigned_Int_Init return Unsigned_Int
is
    val: Unsigned_Int;
begin
    val := 0;
    return val;
end Unsigned_Int_Init;

FUNCTION Unsigned_Int_IsConstraintValid(val : in Unsigned_Int) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 100), ErrorCode => ERR_UNSIGNED_INT);
    RETURN ret;
END Unsigned_Int_IsConstraintValid;


 

END TASTE_Dataview;