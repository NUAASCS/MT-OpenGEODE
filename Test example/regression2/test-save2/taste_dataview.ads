-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_Dataview with SPARK_Mode
IS


-- BoolType --------------------------------------------

TYPE BoolType IS RECORD 
    a : adaasn1rtl.Asn1Boolean;
    b : adaasn1rtl.Asn1Boolean;
END RECORD;

function BoolType_Equal(val1, val2: in BoolType) return Boolean;

function BoolType_Init return BoolType;

ERR_BOOLTYPE_A:CONSTANT INTEGER := 32; 
ERR_BOOLTYPE_B:CONSTANT INTEGER := 39; 
FUNCTION BoolType_IsConstraintValid(val : in BoolType) return adaasn1rtl.ASN1_RESULT;
-- SeqOf --------------------------------------------
SUBTYPE SeqOf_index is integer range 1..10;
TYPE SeqOf_array IS ARRAY (SeqOf_index) OF BoolType;
SUBTYPE SeqOf_length_index is integer range 0..10;
TYPE SeqOf IS  RECORD
    Length : SeqOf_length_index;
    Data  : SeqOf_array;
END RECORD;

function SeqOf_Equal(val1, val2: in SeqOf) return Boolean;

function SeqOf_Init return SeqOf;

ERR_SEQOF_ELM_A:CONSTANT INTEGER := 1; 
ERR_SEQOF_ELM_B:CONSTANT INTEGER := 8; 
ERR_SEQOF:CONSTANT INTEGER := 25; 
FUNCTION SeqOf_IsConstraintValid(val : in SeqOf) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyInteger is adaasn1rtl.Asn1UInt range 0 .. 10;


function MyInteger_Equal(val1, val2: in MyInteger) return Boolean;

function MyInteger_Init return MyInteger;

ERR_MYINTEGER:CONSTANT INTEGER := 52; -- 
FUNCTION MyInteger_IsConstraintValid(val : in MyInteger) return adaasn1rtl.ASN1_RESULT;

 

private
   --# hide TASTE_Dataview;


END TASTE_Dataview;