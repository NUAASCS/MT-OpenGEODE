-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE My_Project with SPARK_Mode
IS


SUBTYPE TYPE_ID is adaasn1rtl.Asn1UInt range 0 .. 255;


function TYPE_ID_Equal(val1, val2: in TYPE_ID) return Boolean;

function TYPE_ID_Init return TYPE_ID;

ERR_TYPE_ID:CONSTANT INTEGER := 1; -- 
FUNCTION TYPE_ID_IsConstraintValid(val : in TYPE_ID) return adaasn1rtl.ASN1_RESULT;
SUBTYPE SEQ_COUNT_OR_NAME is adaasn1rtl.Asn1UInt range 0 .. 16383;


function SEQ_COUNT_OR_NAME_Equal(val1, val2: in SEQ_COUNT_OR_NAME) return Boolean;

function SEQ_COUNT_OR_NAME_Init return SEQ_COUNT_OR_NAME;

ERR_SEQ_COUNT_OR_NAME:CONSTANT INTEGER := 8; -- 
FUNCTION SEQ_COUNT_OR_NAME_IsConstraintValid(val : in SEQ_COUNT_OR_NAME) return adaasn1rtl.ASN1_RESULT;
SUBTYPE APID_index_range is integer range 0..1;
TYPE APID IS (flight, ground) with Convention => C;
for APID use
    (flight => 2046, ground => 2047);

function APID_Equal(val1, val2: in APID) return Boolean;

function APID_Init return APID;

ERR_APID:CONSTANT INTEGER := 15; -- 
FUNCTION APID_IsConstraintValid(val : in APID) return adaasn1rtl.ASN1_RESULT;
SUBTYPE CPDU_OUTPUT_ID is adaasn1rtl.Asn1UInt range 0 .. 4095;


function CPDU_OUTPUT_ID_Equal(val1, val2: in CPDU_OUTPUT_ID) return Boolean;

function CPDU_OUTPUT_ID_Init return CPDU_OUTPUT_ID;

ERR_CPDU_OUTPUT_ID:CONSTANT INTEGER := 22; -- 
FUNCTION CPDU_OUTPUT_ID_IsConstraintValid(val : in CPDU_OUTPUT_ID) return adaasn1rtl.ASN1_RESULT;
-- PULSE_INST --------------------------------------------
SUBTYPE PULSE_INST_duration_value is adaasn1rtl.Asn1UInt range 0 .. 7;


TYPE PULSE_INST IS RECORD 
    output_line_id : CPDU_OUTPUT_ID;
    duration_value : PULSE_INST_duration_value;
END RECORD;

function PULSE_INST_duration_value_Equal(val1, val2: in PULSE_INST_duration_value) return Boolean;

function PULSE_INST_Equal(val1, val2: in PULSE_INST) return Boolean;

function PULSE_INST_duration_value_Init return PULSE_INST_duration_value;
function PULSE_INST_Init return PULSE_INST;

ERR_PULSE_INST_OUTPUT_LINE_ID:CONSTANT INTEGER := 36; 
ERR_PULSE_INST_DURATION_VALUE:CONSTANT INTEGER := 47; 
FUNCTION PULSE_INST_IsConstraintValid(val : in PULSE_INST) return adaasn1rtl.ASN1_RESULT;
-- Seq_Pulse_Inst --------------------------------------------
SUBTYPE Seq_Pulse_Inst_index is integer range 1..12;
TYPE Seq_Pulse_Inst_array IS ARRAY (Seq_Pulse_Inst_index) OF PULSE_INST;
SUBTYPE Seq_Pulse_Inst_length_index is integer range 1..12;
TYPE Seq_Pulse_Inst IS  RECORD
    Length : Seq_Pulse_Inst_length_index;
    Data  : Seq_Pulse_Inst_array;
END RECORD;

function Seq_Pulse_Inst_Equal(val1, val2: in Seq_Pulse_Inst) return Boolean;

function Seq_Pulse_Inst_Init return Seq_Pulse_Inst;

ERR_SEQ_PULSE_INST_ELM_OUTPUT_LINE_ID:CONSTANT INTEGER := 60; 
ERR_SEQ_PULSE_INST_ELM_DURATION_VALUE:CONSTANT INTEGER := 71; 
ERR_SEQ_PULSE_INST:CONSTANT INTEGER := 88; 
FUNCTION Seq_Pulse_Inst_IsConstraintValid(val : in Seq_Pulse_Inst) return adaasn1rtl.ASN1_RESULT;
SUBTYPE CPDU_Identifiers_index_range is integer range 0..1;
TYPE CPDU_Identifiers IS (cpdu_id_1, cpdu_id_2) with Convention => C;
for CPDU_Identifiers use
    (cpdu_id_1 => 0, cpdu_id_2 => 1);

function CPDU_Identifiers_Equal(val1, val2: in CPDU_Identifiers) return Boolean;

function CPDU_Identifiers_Init return CPDU_Identifiers;

ERR_CPDU_IDENTIFIERS:CONSTANT INTEGER := 29; -- 
FUNCTION CPDU_Identifiers_IsConstraintValid(val : in CPDU_Identifiers) return adaasn1rtl.ASN1_RESULT;
-- CPDU_Cmd --------------------------------------------

TYPE CPDU_Cmd_EXIST IS RECORD
    cpdu_id:adaasn1rtl.BIT;
END RECORD;
TYPE CPDU_Cmd IS RECORD 
    cpdu_id : CPDU_Identifiers;
    cmd_pulse_instr : Seq_Pulse_Inst;
    
    Exist : CPDU_Cmd_EXIST;

END RECORD;

function CPDU_Cmd_Equal(val1, val2: in CPDU_Cmd) return Boolean;

function CPDU_Cmd_Init return CPDU_Cmd;

ERR_CPDU_CMD_CPDU_ID_IS_ABSENT:CONSTANT INTEGER := 152; 
ERR_CPDU_CMD_CPDU_ID:CONSTANT INTEGER := 102; 
ERR_CPDU_CMD_CMD_PULSE_INSTR_ELM_OUTPUT_LINE_ID:CONSTANT INTEGER := 113; 
ERR_CPDU_CMD_CMD_PULSE_INSTR_ELM_DURATION_VALUE:CONSTANT INTEGER := 124; 
ERR_CPDU_CMD_CMD_PULSE_INSTR:CONSTANT INTEGER := 141; 
FUNCTION CPDU_Cmd_IsConstraintValid(val : in CPDU_Cmd) return adaasn1rtl.ASN1_RESULT;
-- TC_2_4 --------------------------------------------
SUBTYPE TC_2_4_index is integer range 1..2;
TYPE TC_2_4_array IS ARRAY (TC_2_4_index) OF CPDU_Cmd;
SUBTYPE TC_2_4_length_index is integer range 1..2;
TYPE TC_2_4 IS  RECORD
    Length : TC_2_4_length_index;
    Data  : TC_2_4_array;
END RECORD;

function TC_2_4_Equal(val1, val2: in TC_2_4) return Boolean;

function TC_2_4_Init return TC_2_4;

ERR_TC_2_4_ELM_CPDU_ID_IS_ABSENT:CONSTANT INTEGER := 209; 
ERR_TC_2_4_ELM_CPDU_ID:CONSTANT INTEGER := 159; 
ERR_TC_2_4_ELM_CMD_PULSE_INSTR_ELM_OUTPUT_LINE_ID:CONSTANT INTEGER := 170; 
ERR_TC_2_4_ELM_CMD_PULSE_INSTR_ELM_DURATION_VALUE:CONSTANT INTEGER := 181; 
ERR_TC_2_4_ELM_CMD_PULSE_INSTR:CONSTANT INTEGER := 198; 
ERR_TC_2_4:CONSTANT INTEGER := 220; 
FUNCTION TC_2_4_IsConstraintValid(val : in TC_2_4) return adaasn1rtl.ASN1_RESULT;
-- TCs --------------------------------------------

SUBTYPE TCs_index_range is integer range 0..0;

TYPE TCs_selection IS (tc2_4_PRESENT);
for TCs_selection use
    (tc2_4_PRESENT => 1);
for TCs_selection'Size use 32;

TYPE TCs(kind : TCs_selection:= tc2_4_PRESENT) IS 
RECORD
    case kind is
    when tc2_4_PRESENT =>
            tc2_4: TC_2_4;
    end case;
END RECORD;

FOR TCs USE 
RECORD
    kind AT 0 RANGE 0..31;
END RECORD;

function TCs_Equal(val1, val2: in TCs) return Boolean;

function TCs_Init return TCs;

ERR_TCS:CONSTANT INTEGER := 299; 
ERR_TCS_TC2_4_ELM_CPDU_ID_IS_ABSENT:CONSTANT INTEGER := 277; 
ERR_TCS_TC2_4_ELM_CPDU_ID:CONSTANT INTEGER := 227; 
ERR_TCS_TC2_4_ELM_CMD_PULSE_INSTR_ELM_OUTPUT_LINE_ID:CONSTANT INTEGER := 238; 
ERR_TCS_TC2_4_ELM_CMD_PULSE_INSTR_ELM_DURATION_VALUE:CONSTANT INTEGER := 249; 
ERR_TCS_TC2_4_ELM_CMD_PULSE_INSTR:CONSTANT INTEGER := 266; 
ERR_TCS_TC2_4:CONSTANT INTEGER := 288; 
FUNCTION TCs_IsConstraintValid(val : in TCs) return adaasn1rtl.ASN1_RESULT;
-- Telecommand --------------------------------------------
-- Telecommand_secondary_header --------------------------------------------

TYPE Telecommand_secondary_header IS RECORD 
    ack_successful_completion : adaasn1rtl.Asn1Boolean;
    ack_successful_progress : adaasn1rtl.Asn1Boolean;
    ack_successful_start : adaasn1rtl.Asn1Boolean;
    ack_successful_acceptance : adaasn1rtl.Asn1Boolean;
    source_id : APID;
END RECORD;

TYPE Telecommand IS RECORD 
    dest_apid : APID;
    packet_seq_count : SEQ_COUNT_OR_NAME;
    secondary_header : Telecommand_secondary_header;
    packet_data : TCs;
END RECORD;

function Telecommand_secondary_header_Equal(val1, val2: in Telecommand_secondary_header) return Boolean;

function Telecommand_Equal(val1, val2: in Telecommand) return Boolean;

function Telecommand_secondary_header_Init return Telecommand_secondary_header;
function Telecommand_Init return Telecommand;

ERR_TELECOMMAND_DEST_APID:CONSTANT INTEGER := 306; 
ERR_TELECOMMAND_PACKET_SEQ_COUNT:CONSTANT INTEGER := 317; 
ERR_TELECOMMAND_SECONDARY_HEADER_ACK_SUCCESSFUL_COMPLETION:CONSTANT INTEGER := 328; 
ERR_TELECOMMAND_SECONDARY_HEADER_ACK_SUCCESSFUL_PROGRESS:CONSTANT INTEGER := 335; 
ERR_TELECOMMAND_SECONDARY_HEADER_ACK_SUCCESSFUL_START:CONSTANT INTEGER := 342; 
ERR_TELECOMMAND_SECONDARY_HEADER_ACK_SUCCESSFUL_ACCEPTANCE:CONSTANT INTEGER := 349; 
ERR_TELECOMMAND_SECONDARY_HEADER_SOURCE_ID:CONSTANT INTEGER := 356; 
ERR_TELECOMMAND_PACKET_DATA:CONSTANT INTEGER := 445; 
ERR_TELECOMMAND_PACKET_DATA_TC2_4_ELM_CPDU_ID_IS_ABSENT:CONSTANT INTEGER := 423; 
ERR_TELECOMMAND_PACKET_DATA_TC2_4_ELM_CPDU_ID:CONSTANT INTEGER := 373; 
ERR_TELECOMMAND_PACKET_DATA_TC2_4_ELM_CMD_PULSE_INSTR_ELM_OUTPUT_LINE_ID:CONSTANT INTEGER := 384; 
ERR_TELECOMMAND_PACKET_DATA_TC2_4_ELM_CMD_PULSE_INSTR_ELM_DURATION_VALUE:CONSTANT INTEGER := 395; 
ERR_TELECOMMAND_PACKET_DATA_TC2_4_ELM_CMD_PULSE_INSTR:CONSTANT INTEGER := 412; 
ERR_TELECOMMAND_PACKET_DATA_TC2_4:CONSTANT INTEGER := 434; 
FUNCTION Telecommand_IsConstraintValid(val : in Telecommand) return adaasn1rtl.ASN1_RESULT;
SUBTYPE CPDU_Index is adaasn1rtl.Asn1UInt range 0 .. 1;


function CPDU_Index_Equal(val1, val2: in CPDU_Index) return Boolean;

function CPDU_Index_Init return CPDU_Index;

ERR_CPDU_INDEX:CONSTANT INTEGER := 95; -- 
FUNCTION CPDU_Index_IsConstraintValid(val : in CPDU_Index) return adaasn1rtl.ASN1_RESULT;

max_Instr : CONSTANT adaasn1rtl.Asn1UInt:= 12;
max_Cpdu_Cmds : CONSTANT adaasn1rtl.Asn1UInt:= 2;
CPDU_OUTPUT_ID_output_1 : CONSTANT My_Project.CPDU_OUTPUT_ID:= 42;
CPDU_OUTPUT_ID_output_2 : CONSTANT My_Project.CPDU_OUTPUT_ID:= 4090; 

private
   --# hide My_Project;


END My_Project;