/* CIF PROCESS (296, 59), (150, 75) */
process orchestrator
/* CIF comment (406, 195), (78, 35) */
comment 'Hello';
    state wait;
    substructure
            /* CIF START (116, 38), (70, 35) */
            START;
                /* CIF NEXTSTATE (89, 88), (124, 35) */
                NEXTSTATE entering_wait;
            /* CIF state (83, 193), (134, 35) */
            state waiting_in_wait;
                /* CIF input (114, 248), (73, 35) */
                input other;
                    /* CIF NEXTSTATE (83, 298), (134, 35) */
                    NEXTSTATE entering_wait;
            endstate;
            /* CIF state (89, 88), (124, 35) */
            state entering_wait;
                /* CIF input (114, 143), (73, 35) */
                input other;
                    /* CIF NEXTSTATE (83, 193), (134, 35) */
                    NEXTSTATE waiting_in_wait;
            endstate;
    endsubstructure;
    /* CIF TEXT (0, 138), (448, 448) */
    dcl seq tastE_Peek_id_list := { 1,2,3,4,5};
    
    dcl a myEnum;
    
    dcl fixed fixedIntList := { 1,2,3};
    
    dcl anInt T_UInt32 :=0;
    
    dcl simpleseq MySimpleSeq := {a 42, b true, c three};
    
    timer myTimer;
    
    dcl counter T_UInt32 := 0;
    
    
    procedure VDM comment '#hello';
       fpar in inp fixedIntList,
                 in/out outp fixedIntList;
    external comment '#vdm #classname=RemoteCall';
    
    procedure VDM2;
       fpar in inp T_Uint32,
                 in/out outp MySimpleSeq;
    external comment '#vdm #classname=RemoteCall';
    /* CIF ENDTEXT */
    /* CIF START (1091, 150), (80, 36) */
    START;
        /* CIF PROCEDURECALL (1025, 201), (211, 35) */
        call writeln('Simulation startup');
        /* CIF NEXTSTATE (1095, 251), (72, 34) */
        NEXTSTATE Wait;
    /* CIF state (1674, 125), (100, 35) */
    state timeout;
        /* CIF input (1651, 180), (147, 35) */
        input Paramless_TC;
            /* CIF PROCEDURECALL (1600, 230), (249, 35) */
            call SET_timer(1000, mytimer);
            /* CIF NEXTSTATE (1687, 280), (74, 35) */
            NEXTSTATE next;
    endstate;
    /* CIF state (1680, 345), (74, 35) */
    state next;
        /* CIF input (1680, 400), (71, 35) */
        input pulse(a);
            /* CIF PROCEDURECALL (1609, 450), (213, 35) */
            call reset_timer(mytimer);
            /* CIF NEXTSTATE (1681, 500), (70, 35) */
            NEXTSTATE wait;
    endstate;
    /* CIF state (1095, 251), (72, 34) */
    state Wait;
        /* CIF input (807, 305), (101, 35) */
        input pulse(a);
            /* CIF task (772, 355), (170, 48) */
            task seq := {0,1,0,1,0},
anint := 478;
            /* CIF PROCEDURECALL (728, 418), (259, 35) */
            call writeln('Input param', anint);
            /* CIF PROCEDURECALL (738, 468), (238, 35) */
            call ExternalProc(anint, anint);
            /* CIF PROCEDURECALL (720, 518), (275, 35) */
            call writeln('Output param', anint);
            /* CIF PROCEDURECALL (714, 568), (286, 35) */
            call write('Calling VDM with data');
            /* CIF task (664, 618), (386, 48) */
            task for each in fixed: call write(each, ' '); endfor;
            /* CIF PROCEDURECALL (772, 681), (170, 40) */
            call writeln('');
            /* CIF PROCEDURECALL (771, 736), (172, 35) */
            call vdm(fixed, fixed);
            /* CIF PROCEDURECALL (772, 786), (170, 40) */
            call write('Result:');
            /* CIF task (666, 841), (383, 35) */
            task for each in fixed: call write(each, ' '); endfor;
            /* CIF PROCEDURECALL (799, 891), (116, 40) */
            call writeln('');
            /* CIF PROCEDURECALL (667, 946), (381, 35) */
            call writeln('Calling VDM2 with value', fixed(0));
            /* CIF PROCEDURECALL (736, 996), (242, 35) */
            call vdm2(fixed(0), simpleseq);
            /* CIF PROCEDURECALL (602, 1046), (511, 40) */
            call writeln('Result:', simpleseq!a, ' ', simpleseq!b, ' ', simpleseq!c);
            /* CIF output (788, 1101), (138, 35) */
            output telemetry(a);
            /* CIF output (784, 1151), (147, 35) */
            output peek_list(seq);
            /* CIF output (769, 1201), (177, 35) */
            output peek_fixed(fixed);
            /* CIF NEXTSTATE (820, 1251), (74, 35) */
            NEXTSTATE next;
        /* CIF input (1219, 305), (147, 35) */
        input Paramless_TC;
            /* CIF task (1183, 360), (219, 35) */
            task counter := (counter + 1)  mod 500;
            /* CIF PROCEDURECALL (1166, 410), (253, 35) */
            call writeln('Got Paramless TC');
            /* CIF PROCEDURECALL (1168, 460), (249, 35) */
            call SET_timer(1000, mytimer);
            /* CIF output (1217, 510), (150, 35) */
            output Paramless_TM;
            /* CIF task (1191, 560), (202, 35) */
            task anint := (anint + 1) mod 100;
            /* CIF NEXTSTATE (1257, 610), (70, 35) */
            NEXTSTATE wait;
        /* CIF input (1429, 305), (104, 35) */
        input mytimer;
            /* CIF NEXTSTATE (1430, 355), (102, 35) */
            NEXTSTATE Timeout;
    endstate;
endprocess orchestrator;