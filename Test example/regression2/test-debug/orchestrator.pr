/* CIF PROCESS (295, 56), (150, 75) */
PROCESS orchestrator
/* CIF COMMENT (405, 192), (71, 35) */
COMMENT 'Hello';
    /* CIF TEXT (0, 94), (450, 353) */
    dcl seq tastE_Peek_id_list := { 1,2,3,4,5};

dcl fixed FixedString := 'Hello';
dcl variable VariableString := 'Hello';
dcl seqboolean SeqBool := { true, false };

dcl seqbool2 SeqBoolFix := { true, false };

dcl seqen SeqEnum := { hello2, world2};

dcl seqen2 SeqEnumFix := { hello, world };

dcl myenum MyEnum := a;
dcl turlututu MyEnum := a;

dcl check tasTE_Peek_id := 42;

dcl choice Mychoice := c1:TRUE ;

dcl opt SeqOpt := { A TRUE, b FALSE }; -- test optional fields
dcl somebool boolean := true;

-- dcl opt2 SeqOpt := { a somebool, b false }; SHOULD REPORT AND ERROR
    /* CIF ENDTEXT */
    /* CIF PROCEDURE (1306, 371), (91, 35) */
    PROCEDURE numProc;
        /* CIF START (161, 82), (70, 35) */
        START;
            /* CIF DECISION (135, 132), (122, 50) */
            DECISION num(myenum);
                    /* CIF ANSWER (163, 202), (70, 23) */
                    else:
            ENDDECISION;
            /* CIF DECISION (135, 240), (122, 50) */
            DECISION num(myenum);
                    /* CIF ANSWER (163, 310), (70, 23) */
                    else:
            ENDDECISION;
            /* CIF RETURN (178, 348), (35, 35) */
            RETURN ;
    ENDPROCEDURE;
    /* CIF PROCEDURE (1273, 175), (106, 35) */
    PROCEDURE emptyproc;
    ENDPROCEDURE;
    /* CIF START (596, 224), (80, 36) */
    START;
        /* CIF TASK (564, 275), (144, 35) */
        TASK opt := { B TRUE }
        /* CIF COMMENT (728, 275), (155, 35) */
        COMMENT 'Test optional fields';
        /* CIF DECISION (575, 325), (122, 50) */
        DECISION num(myenum);
                /* CIF ANSWER (563, 395), (70, 23) */
                (0):
                /* CIF ANSWER (635, 395), (70, 23) */
                else:
        ENDDECISION;
        /* CIF DECISION (575, 433), (122, 50) */
        DECISION num(myenum);
                /* CIF ANSWER (564, 503), (70, 23) */
                (0):
                /* CIF ANSWER (644, 503), (70, 23) */
                else:
        ENDDECISION;
        /* CIF DECISION (586, 541), (99, 50) */
        DECISION 'informal'
        /* CIF COMMENT (746, 540), (179, 53) */
        COMMENT 'Informal decision -
check that it is ignored
by the code generator';
                /* CIF ANSWER (572, 611), (70, 33) */
                ('a'):
                /* CIF ANSWER (652, 611), (70, 33) */
                ('2'):
        ENDDECISION;
        /* CIF TASK (524, 659), (223, 38) */
        TASK seqboolean := {true, false},
seqboolean := not {true, false};
        /* CIF TASK (532, 712), (208, 83) */
        TASK for x in seqen:
 call writeln(num(x));
 call writeln(num(myenum));
 call writeln(num(myenum));
endfor
        /* CIF COMMENT (774, 734), (174, 38) */
        COMMENT 'Check that num is not
declared twice';
        /* CIF TASK (554, 810), (164, 53) */
        TASK for x in seqen2:
 call writeln(num(x));
endfor;
        /* CIF TASK (555, 878), (162, 53) */
        TASK for x in seqboolean:
    call writeln(x);
endfor
        /* CIF COMMENT (747, 885), (168, 38) */
        COMMENT 'FOR with a basic type';
        /* CIF TASK (525, 946), (222, 35) */
        TASK seqboolean := not seqboolean
        /* CIF COMMENT (781, 946), (279, 35) */
        COMMENT 'check NOT on a SEQUENCE of BOOLEAN';
        /* CIF TASK (555, 996), (162, 53) */
        TASK for x in seqboolean:
    call writeln(x);
endfor;
        /* CIF TASK (573, 1064), (126, 38) */
        TASK fixed := 'hello';
        /* CIF TASK (561, 1117), (149, 35) */
        TASK variable := 'HELLO';
        /* CIF PROCEDURECALL (548, 1167), (176, 35) */
        CALL writeln(variable // '!!!');
        /* CIF PROCEDURECALL (500, 1217), (272, 35) */
        CALL writeln(variable // variable // variable);
        /* CIF TASK (590, 1267), (91, 35) */
        TASK seq := {1};
        /* CIF TASK (559, 1317), (153, 35) */
        TASK seq := {1} // {2} // {3};
        /* CIF TASK (550, 1367), (172, 35) */
        TASK seq := seq // {2} // {1};
        /* CIF DECISION (601, 1417), (70, 50) */
        DECISION any;
                /* CIF ANSWER (560, 1487), (70, 23) */
                ('a'):
                /* CIF ANSWER (655, 1487), (70, 23) */
                ('b'):
        ENDDECISION;
        /* CIF DECISION (591, 1525), (89, 50) */
        DECISION myenum
        /* CIF COMMENT (718, 1533), (183, 35) */
        COMMENT 'Check case insensitivity';
                /* CIF ANSWER (528, 1595), (70, 23) */
                (a):
                /* CIF ANSWER (608, 1595), (70, 23) */
                (B):
                /* CIF ANSWER (688, 1595), (70, 23) */
                (c):
                /* CIF ANSWER (768, 1595), (70, 23) */
                (d):
                /* CIF ANSWER (848, 1595), (70, 23) */
                (Ee):
        ENDDECISION;
        /* CIF DECISION (567, 1633), (138, 50) */
        DECISION present(choice)
        /* CIF COMMENT (743, 1641), (183, 35) */
        COMMENT 'Check case insensitivity';
                /* CIF ANSWER (555, 1703), (70, 23) */
                (cde2):
                /* CIF ANSWER (635, 1703), (70, 23) */
                ELSE:
        ENDDECISION;
        /* CIF NEXTSTATE (578, 1741), (116, 33) */
        NEXTSTATE Wait_for_GUI;
    /* CIF STATE (1083, 427), (70, 35) */
    STATE Third;
        /* CIF INPUT (1054, 482), (130, 35) */
        INPUT pulse(myenum);
            /* CIF NEXTSTATE (1062, 532), (113, 35) */
            NEXTSTATE Wait_for_gui;
    ENDSTATE;
    /* CIF STATE (1059, 322), (123, 35) */
    STATE AnotherState;
        /* CIF INPUT (1053, 377), (130, 35) */
        INPUT pulse(myenum);
            /* CIF NEXTSTATE (1083, 427), (70, 35) */
            NEXTSTATE Third;
    ENDSTATE;
    /* CIF STATE (1063, 119), (116, 33) */
    STATE Wait_for_GUI;
        /* CIF INPUT (1056, 172), (130, 35) */
        INPUT pulse(myenum);
            /* CIF PROCEDURECALL (994, 222), (253, 35) */
            CALL writeln('Got PULSE', num(myenum));
            /* CIF OUTPUT (1041, 272), (160, 35) */
            OUTPUT telemetry(myenum);
            /* CIF NEXTSTATE (1059, 322), (123, 35) */
            NEXTSTATE AnotherState;
    ENDSTATE;
ENDPROCESS orchestrator;