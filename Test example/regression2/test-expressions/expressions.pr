/* CIF PROCESS (144, 159), (150, 75) */
process expressions;
    /* CIF TEXT (832, 175), (303, 232) */
    DCL i Integer;
    DCL f Real;
    DCL b Boolean;
    DCL s CharString;
    DCL fixSeqOf1 FixSeqof;
    DCL fixSeqOf2 FixSeqof;
    DCL varSeqOf1 VarSeqof;
    DCL varSeqOf2 VarSeqof;
    DCL seq Seq;
    DCL nestedSeq NestedSeq;
    DCL bs1 BoolSeqOf;
    DCL bs2 BoolSeqOf;
    DCL bs3 BoolSeqOf;
    /* CIF ENDTEXT */
    /* CIF START (482, 0), (100, 50) */
    START;
        /* CIF NEXTSTATE (482, 65), (100, 50) */
        NEXTSTATE Wait;
    /* CIF state (482, 65), (100, 50) */
    state Wait;
        /* CIF input (483, 135), (100, 50) */
        input run;
            /* CIF task (300, 200), (466, 35) */
            task '------------------------------- Binary expressions -------------------------------';
            /* CIF task (482, 250), (102, 35) */
            task b := true;
            /* CIF PROCEDURECALL (421, 300), (223, 35) */
            call assert(b and true, 'b and true');
            /* CIF PROCEDURECALL (428, 350), (210, 35) */
            call assert(b or false, 'b or false');
            /* CIF PROCEDURECALL (421, 400), (224, 35) */
            call assert(b xor false, 'b xor false');
            /* CIF PROCEDURECALL (430, 450), (206, 35) */
            call assert(b => true, 'b => true');
            /* CIF task (496, 500), (73, 35) */
            task i := 10;
            /* CIF PROCEDURECALL (431, 550), (203, 35) */
            call assert(i + 1 = 11, 'i + 1 = 11');
            /* CIF PROCEDURECALL (439, 600), (188, 35) */
            call assert(i - 1 = 9, 'i - 1 = 9');
            /* CIF PROCEDURECALL (432, 650), (201, 35) */
            call assert(i * 2 = 20, 'i * 2 = 20');
            /* CIF PROCEDURECALL (439, 700), (188, 35) */
            call assert(i / 2 = 5, 'i / 2 = 5');
            /* CIF PROCEDURECALL (418, 750), (230, 35) */
            call assert(i  mod 2 = 0, 'i mod 2 = 0');
            /* CIF PROCEDURECALL (421, 800), (224, 35) */
            call assert(i  rem 2 = 0, 'i rem 2 = 0');
            /* CIF PROCEDURECALL (452, 850), (161, 35) */
            call assert(i < 20, 'i < 20');
            /* CIF PROCEDURECALL (445, 900), (176, 35) */
            call assert(i <= 10, 'i <= 10');
            /* CIF PROCEDURECALL (445, 950), (176, 35) */
            call assert(i >= 10, 'i >= 10');
            /* CIF PROCEDURECALL (445, 1000), (176, 35) */
            call assert(i > 5, 'i > 5');
            /* CIF PROCEDURECALL (452, 1050), (161, 35) */
            call assert(i = 10, 'i = 10');
            /* CIF PROCEDURECALL (455, 1100), (156, 35) */
            call assert(i /= 9, 'i /= 9');
            /* CIF task (490, 1150), (85, 35) */
            task f := 10.0;
            /* CIF PROCEDURECALL (408, 1200), (250, 35) */
            call assert(f + 1.0 = 11.0, 'f + 1.0 = 11.0');
            /* CIF PROCEDURECALL (419, 1250), (228, 35) */
            call assert(f - 1.0 = 9.0, 'f - 1.0 = 9.0');
            /* CIF PROCEDURECALL (409, 1300), (248, 35) */
            call assert(f * 2.0 = 20.0, 'f * 2.0 = 20.0');
            /* CIF PROCEDURECALL (418, 1350), (230, 35) */
            call assert(f / 2.0 = 5.0, 'f / 2.0 = 5.0');
            /* CIF PROCEDURECALL (432, 1400), (201, 35) */
            call assert(f < 20.0, 'f < 20.0');
            /* CIF PROCEDURECALL (432, 1450), (201, 35) */
            call assert(f <= 10.0, 'f <= 10.0');
            /* CIF PROCEDURECALL (432, 1500), (201, 35) */
            call assert(f >= 10.0, 'f >= 10.0');
            /* CIF PROCEDURECALL (432, 1550), (201, 35) */
            call assert(f > 5.0, 'f > 5.0');
            /* CIF PROCEDURECALL (440, 1600), (186, 35) */
            call assert(f = 10.0, 'f = 10.0');
            /* CIF PROCEDURECALL (437, 1650), (191, 35) */
            call assert(f /= 9.0, 'f /= 9.0');
            /* CIF task (453, 1700), (160, 35) */
            task fixSeqOf1 := {1, 2, 3};
            /* CIF task (453, 1750), (160, 35) */
            task fixSeqOf2 := {3, 4, 5};
            /* CIF PROCEDURECALL (399, 1800), (267, 35) */
            call assert(2 in fixSeqOf1, '2 in fixSeqOf1');
            /* CIF PROCEDURECALL (370, 1850), (326, 35) */
            call assert(not(4 in fixSeqOf1), 'not(4 in fixSeqOf1)');
            /* CIF PROCEDURECALL (344, 1900), (377, 35) */
            call assert(fixSeqOf1 /= fixSeqOf2, 'fixSeqOf1 /= fixSeqOf2');
            /* CIF task (453, 1950), (160, 35) */
            task fixSeqOf2 := {1, 2, 3};
            /* CIF PROCEDURECALL (349, 2000), (367, 35) */
            call assert(fixSeqOf1 = fixSeqOf2, 'fixSeqOf1 = fixSeqOf2');
            /* CIF task (451, 2050), (164, 35) */
            task varSeqOf1 := {1, 2, 3};
            /* CIF task (451, 2100), (164, 35) */
            task varSeqOf2 := {4, 5, 6};
            /* CIF PROCEDURECALL (396, 2150), (274, 35) */
            call assert(2 in varSeqOf1, '2 in varSeqOf1');
            /* CIF PROCEDURECALL (366, 2200), (333, 35) */
            call assert(not(4 in varSeqOf1), 'not(4 in varSeqOf1)');
            /* CIF PROCEDURECALL (337, 2250), (391, 35) */
            call assert(varSeqOf1 /= varSeqOf2, 'varSeqOf1 /= varSeqOf2');
            /* CIF task (401, 2300), (263, 35) */
            task varSeqOf1 := varSeqOf1 // varSeqOf2;
            /* CIF PROCEDURECALL (351, 2350), (363, 35) */
            call assert(length(varSeqOf1) = 6, 'lenght(varSeqOf1) = 6');
            /* CIF PROCEDURECALL (383, 2400), (300, 35) */
            call assert(varSeqOf1(3) = 4, 'varSeqOf1(3) = 4');
            /* CIF PROCEDURECALL (383, 2450), (300, 35) */
            call assert(varSeqOf1(4) = 5, 'varSeqOf1(4) = 5');
            /* CIF PROCEDURECALL (383, 2500), (300, 35) */
            call assert(varSeqOf1(5) = 6, 'varSeqOf1(5) = 6');
            /* CIF task (450, 2550), (166, 35) */
            task varSeqOf1 := {1, 2, 3};
            /* CIF task (451, 2600), (164, 35) */
            task varSeqOf2 := {1, 2, 3};
            /* CIF PROCEDURECALL (342, 2650), (381, 35) */
            call assert(varSeqOf1 = varSeqOf2, 'varSeqOf1 = varSeqOf2');
            /* CIF task (479, 2700), (108, 35) */
            task s := 'HELLO';
            /* CIF task (396, 2750), (273, 35) */
            task bs1 := {false, true, false, true};
            /* CIF task (396, 2800), (273, 35) */
            task bs2 := {false, false, true, true};
            /* CIF task (382, 2850), (301, 35) */
            task bs3 := {false, false, false, true};
            /* CIF PROCEDURECALL (374, 2900), (318, 35) */
            call assert((bs1 and bs2) = bs3, 'bs1 and bs2 = bs3');
            /* CIF task (424, 2950), (217, 35) */
            task bs3 := {false, true, true, true};
            /* CIF PROCEDURECALL (383, 3000), (299, 35) */
            call assert((bs1 or bs2) = bs3, 'bs1 or bs2 = bs3');
            /* CIF task (422, 3050), (222, 35) */
            task bs3 := {false, true, true, false};
            /* CIF PROCEDURECALL (377, 3100), (312, 35) */
            call assert((bs1 xor bs2) = bs3, 'bs1 xor bs2 = bs3');
            /* CIF task (424, 3150), (217, 35) */
            task bs3 := {true, false, true, true};
            /* CIF PROCEDURECALL (380, 3200), (306, 35) */
            call assert((bs1 => bs2) = bs3, ' bs1 => bs2 = bs3');
            /* CIF task (301, 3250), (463, 35) */
            task '------------------------------- Unary expressions -------------------------------';
            /* CIF task (485, 3300), (95, 35) */
            task b := false;
            /* CIF PROCEDURECALL (453, 3350), (160, 35) */
            call assert(not b, 'not b');
            /* CIF task (396, 3400), (273, 35) */
            task bs1 := {false, true, false, true};
            /* CIF task (422, 3450), (222, 35) */
            task bs3 := {true, false, true, false};
            /* CIF PROCEDURECALL (372, 3500), (322, 35) */
            call assert(not bs1 = bs3, 'not bs1 = bs3');
            /* CIF task (496, 3550), (73, 35) */
            task i := 10;
            /* CIF PROCEDURECALL (444, 3600), (177, 35) */
            call assert(-i = -10, '-i = -10');
            /* CIF task (298, 3650), (470, 35) */
            task '------------------------------- Primary Expression -------------------------------';
            /* CIF PROCEDURECALL (397, 3700), (271, 35) */
            call assert(((1 + 1) * 4) = 8, '((1 + 1) * 4) = 8');
            /* CIF PROCEDURECALL (324, 3750), (417, 35) */
            call assert(1 = if true then 1 else 2 fi, 'if true then 1 else 2 fi = 1');
            /* CIF PROCEDURECALL (298, 3800), (469, 35) */
            call assert(2.0 = if false then 1.0 else 2.0 fi, 'if false then 1.0 else 2.0 fi = 2.0');
            /* CIF PROCEDURECALL (0, 3850), (1066, 35) */
            call assert(if false then false else (if true then (if false then false else true fi) else false fi) fi, 'if false then false else (if true then (if false then false else true fi) else false fi) fi');
            /* CIF task (267, 3900), (531, 35) */
            task '------------------------------- Extended Primary Expressions -------------------------------';
            /* CIF task (451, 3950), (163, 35) */
            task fixSeqOf1 := {2, 3, 4};
            /* CIF PROCEDURECALL (386, 4000), (293, 35) */
            call assert(fixSeqOf1(1) = 3, 'fixSeqOf1(1) = 3');
            /* CIF task (451, 4050), (164, 35) */
            task varSeqOf1 := {2, 3, 4};
            /* CIF PROCEDURECALL (383, 4100), (300, 35) */
            call assert(varSeqOf1(1) = 3, 'varSeqOf1(1) = 3');
            /* CIF task (413, 4150), (239, 35) */
            task seq := {i 1, b true, f 1.0, s 'HELLO'};
            /* CIF PROCEDURECALL (435, 4200), (196, 35) */
            call assert(seq!i = 1, 'seq!i = 1');
            /* CIF PROCEDURECALL (412, 4250), (242, 35) */
            call assert(seq!b = true, 'seq!b = true');
            /* CIF PROCEDURECALL (422, 4300), (221, 35) */
            call assert(seq!f = 1.0, 'seq!f = 1.0');
            /* CIF PROCEDURECALL (388, 4350), (289, 35) */
            call assert(seq!s = 'HELLO', 'seq!s = "HELLO"');
            /* CIF task (431, 4400), (204, 35) */
            task nestedSeq := {a {b {c {d 9}}}};
            /* CIF PROCEDURECALL (353, 4450), (360, 35) */
            call assert(nestedSeq!a!b!c!d = 9, 'nestedSeq!a!b!c!d = 9');
            /* CIF NEXTSTATE (483, 4500), (100, 50) */
            NEXTSTATE Wait;
    endstate;
endprocess expressions;