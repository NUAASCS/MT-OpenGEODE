-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_Dataview with SPARK_Mode
IS


SUBTYPE MyBoolean is adaasn1rtl.Asn1Boolean;


function MyBoolean_Equal(val1, val2: in MyBoolean) return Boolean;

function MyBoolean_Init return MyBoolean;

ERR_MYBOOLEAN:CONSTANT INTEGER := 1; -- 
FUNCTION MyBoolean_IsConstraintValid(val : in MyBoolean) return adaasn1rtl.ASN1_RESULT;
-- My4BitArray --------------------------------------------
SUBTYPE My4BitArray_index is integer range 1..4;
TYPE My4BitArray_array IS ARRAY (My4BitArray_index) OF adaasn1rtl.Asn1Boolean;
TYPE My4BitArray IS  RECORD
    Data  : My4BitArray_array;
END RECORD;

function My4BitArray_Equal(val1, val2: in My4BitArray) return Boolean;

function My4BitArray_Init return My4BitArray;

ERR_MY4BITARRAY_ELM:CONSTANT INTEGER := 8; 
FUNCTION My4BitArray_IsConstraintValid(val : in My4BitArray) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MySrcAddr is My4BitArray;
SUBTYPE MySrcAddr_index is My4BitArray_index;
SUBTYPE MySrcAddr_array is My4BitArray_array;

function MySrcAddr_Equal(val1, val2: in MySrcAddr) return Boolean;

function MySrcAddr_Init return MySrcAddr;

ERR_MYSRCADDR_ELM:CONSTANT INTEGER := 1214; 
FUNCTION MySrcAddr_IsConstraintValid(val : in MySrcAddr) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyDstAddr is My4BitArray;
SUBTYPE MyDstAddr_index is My4BitArray_index;
SUBTYPE MyDstAddr_array is My4BitArray_array;

function MyDstAddr_Equal(val1, val2: in MyDstAddr) return Boolean;

function MyDstAddr_Init return MyDstAddr;

ERR_MYDSTADDR_ELM:CONSTANT INTEGER := 1231; 
FUNCTION MyDstAddr_IsConstraintValid(val : in MyDstAddr) return adaasn1rtl.ASN1_RESULT;
-- MyBa --------------------------------------------

TYPE MyBa IS RECORD 
    srcAddr : MySrcAddr;
    dstAddr : MyDstAddr;
END RECORD;

function MyBa_Equal(val1, val2: in MyBa) return Boolean;

function MyBa_Init return MyBa;

ERR_MYBA_SRCADDR_ELM:CONSTANT INTEGER := 1166; 
ERR_MYBA_DSTADDR_ELM:CONSTANT INTEGER := 1187; 
FUNCTION MyBa_IsConstraintValid(val : in MyBa) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3SrcAddr is My4BitArray;
SUBTYPE MyL3SrcAddr_index is My4BitArray_index;
SUBTYPE MyL3SrcAddr_array is My4BitArray_array;

function MyL3SrcAddr_Equal(val1, val2: in MyL3SrcAddr) return Boolean;

function MyL3SrcAddr_Init return MyL3SrcAddr;

ERR_MYL3SRCADDR_ELM:CONSTANT INTEGER := 1745; 
FUNCTION MyL3SrcAddr_IsConstraintValid(val : in MyL3SrcAddr) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3DstAddr is My4BitArray;
SUBTYPE MyL3DstAddr_index is My4BitArray_index;
SUBTYPE MyL3DstAddr_array is My4BitArray_array;

function MyL3DstAddr_Equal(val1, val2: in MyL3DstAddr) return Boolean;

function MyL3DstAddr_Init return MyL3DstAddr;

ERR_MYL3DSTADDR_ELM:CONSTANT INTEGER := 1762; 
FUNCTION MyL3DstAddr_IsConstraintValid(val : in MyL3DstAddr) return adaasn1rtl.ASN1_RESULT;
-- MyL3Ba --------------------------------------------

TYPE MyL3Ba IS RECORD 
    l3SrcAddr : MyL3SrcAddr;
    l3DstAddr : MyL3DstAddr;
END RECORD;

function MyL3Ba_Equal(val1, val2: in MyL3Ba) return Boolean;

function MyL3Ba_Init return MyL3Ba;

ERR_MYL3BA_L3SRCADDR_ELM:CONSTANT INTEGER := 1697; 
ERR_MYL3BA_L3DSTADDR_ELM:CONSTANT INTEGER := 1718; 
FUNCTION MyL3Ba_IsConstraintValid(val : in MyL3Ba) return adaasn1rtl.ASN1_RESULT;
-- My8BitArray --------------------------------------------
SUBTYPE My8BitArray_index is integer range 1..8;
TYPE My8BitArray_array IS ARRAY (My8BitArray_index) OF adaasn1rtl.Asn1Boolean;
TYPE My8BitArray IS  RECORD
    Data  : My8BitArray_array;
END RECORD;

function My8BitArray_Equal(val1, val2: in My8BitArray) return Boolean;

function My8BitArray_Init return My8BitArray;

ERR_MY8BITARRAY_ELM:CONSTANT INTEGER := 21; 
FUNCTION My8BitArray_IsConstraintValid(val : in My8BitArray) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyFlag is My8BitArray;
SUBTYPE MyFlag_index is My8BitArray_index;
SUBTYPE MyFlag_array is My8BitArray_array;

function MyFlag_Equal(val1, val2: in MyFlag) return Boolean;

function MyFlag_Init return MyFlag;

ERR_MYFLAG_ELM:CONSTANT INTEGER := 839; 
FUNCTION MyFlag_IsConstraintValid(val : in MyFlag) return adaasn1rtl.ASN1_RESULT;
-- MyDestinationAddress --------------------------------------------
SUBTYPE MyDestinationAddress_index is integer range 1..7;
TYPE MyDestinationAddress_array IS ARRAY (MyDestinationAddress_index) OF My8BitArray;
TYPE MyDestinationAddress IS  RECORD
    Data  : MyDestinationAddress_array;
END RECORD;

function MyDestinationAddress_Equal(val1, val2: in MyDestinationAddress) return Boolean;

function MyDestinationAddress_Init return MyDestinationAddress;

ERR_MYDESTINATIONADDRESS_ELM_ELM:CONSTANT INTEGER := 916; 
FUNCTION MyDestinationAddress_IsConstraintValid(val : in MyDestinationAddress) return adaasn1rtl.ASN1_RESULT;
-- MySourceAddress --------------------------------------------
SUBTYPE MySourceAddress_index is integer range 1..7;
TYPE MySourceAddress_array IS ARRAY (MySourceAddress_index) OF My8BitArray;
TYPE MySourceAddress IS  RECORD
    Data  : MySourceAddress_array;
END RECORD;

function MySourceAddress_Equal(val1, val2: in MySourceAddress) return Boolean;

function MySourceAddress_Init return MySourceAddress;

ERR_MYSOURCEADDRESS_ELM_ELM:CONSTANT INTEGER := 939; 
FUNCTION MySourceAddress_IsConstraintValid(val : in MySourceAddress) return adaasn1rtl.ASN1_RESULT;
-- MyAddr --------------------------------------------

TYPE MyAddr IS RECORD 
    destinationAddress : MyDestinationAddress;
    sourceAddress : MySourceAddress;
END RECORD;

function MyAddr_Equal(val1, val2: in MyAddr) return Boolean;

function MyAddr_Init return MyAddr;

ERR_MYADDR_DESTINATIONADDRESS_ELM_ELM:CONSTANT INTEGER := 856; 
ERR_MYADDR_SOURCEADDRESS_ELM_ELM:CONSTANT INTEGER := 883; 
FUNCTION MyAddr_IsConstraintValid(val : in MyAddr) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyControl is My8BitArray;
SUBTYPE MyControl_index is My8BitArray_index;
SUBTYPE MyControl_array is My8BitArray_array;

function MyControl_Equal(val1, val2: in MyControl) return Boolean;

function MyControl_Init return MyControl;

ERR_MYCONTROL_ELM:CONSTANT INTEGER := 962; 
FUNCTION MyControl_IsConstraintValid(val : in MyControl) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyPid is My8BitArray;
SUBTYPE MyPid_index is My8BitArray_index;
SUBTYPE MyPid_array is My8BitArray_array;

function MyPid_Equal(val1, val2: in MyPid) return Boolean;

function MyPid_Init return MyPid;

ERR_MYPID_ELM:CONSTANT INTEGER := 979; 
FUNCTION MyPid_IsConstraintValid(val : in MyPid) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyCntrl is My8BitArray;
SUBTYPE MyCntrl_index is My8BitArray_index;
SUBTYPE MyCntrl_array is My8BitArray_array;

function MyCntrl_Equal(val1, val2: in MyCntrl) return Boolean;

function MyCntrl_Init return MyCntrl;

ERR_MYCNTRL_ELM:CONSTANT INTEGER := 1248; 
FUNCTION MyCntrl_IsConstraintValid(val : in MyCntrl) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyCode is My8BitArray;
SUBTYPE MyCode_index is My8BitArray_index;
SUBTYPE MyCode_array is My8BitArray_array;

function MyCode_Equal(val1, val2: in MyCode) return Boolean;

function MyCode_Init return MyCode;

ERR_MYCODE_ELM:CONSTANT INTEGER := 1265; 
FUNCTION MyCode_IsConstraintValid(val : in MyCode) return adaasn1rtl.ASN1_RESULT;
-- MyOperationData --------------------------------------------
SUBTYPE MyOperationData_index is integer range 1..250;
TYPE MyOperationData_array IS ARRAY (MyOperationData_index) OF My8BitArray;
SUBTYPE MyOperationData_length_index is integer range 0..250;
TYPE MyOperationData IS  RECORD
    Length : MyOperationData_length_index;
    Data  : MyOperationData_array;
END RECORD;

function MyOperationData_Equal(val1, val2: in MyOperationData) return Boolean;

function MyOperationData_Init return MyOperationData;

ERR_MYOPERATIONDATA_ELM_ELM:CONSTANT INTEGER := 1282; 
ERR_MYOPERATIONDATA:CONSTANT INTEGER := 1299; 
FUNCTION MyOperationData_IsConstraintValid(val : in MyOperationData) return adaasn1rtl.ASN1_RESULT;
-- MyL3MissingStack --------------------------------------------
SUBTYPE MyL3MissingStack_index is integer range 1..255;
TYPE MyL3MissingStack_array IS ARRAY (MyL3MissingStack_index) OF My8BitArray;
SUBTYPE MyL3MissingStack_length_index is integer range 0..255;
TYPE MyL3MissingStack IS  RECORD
    Length : MyL3MissingStack_length_index;
    Data  : MyL3MissingStack_array;
END RECORD;

function MyL3MissingStack_Equal(val1, val2: in MyL3MissingStack) return Boolean;

function MyL3MissingStack_Init return MyL3MissingStack;

ERR_MYL3MISSINGSTACK_ELM_ELM:CONSTANT INTEGER := 1413; 
ERR_MYL3MISSINGSTACK:CONSTANT INTEGER := 1430; 
FUNCTION MyL3MissingStack_IsConstraintValid(val : in MyL3MissingStack) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3Cntrl is My8BitArray;
SUBTYPE MyL3Cntrl_index is My8BitArray_index;
SUBTYPE MyL3Cntrl_array is My8BitArray_array;

function MyL3Cntrl_Equal(val1, val2: in MyL3Cntrl) return Boolean;

function MyL3Cntrl_Init return MyL3Cntrl;

ERR_MYL3CNTRL_ELM:CONSTANT INTEGER := 1779; 
FUNCTION MyL3Cntrl_IsConstraintValid(val : in MyL3Cntrl) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3Code is My8BitArray;
SUBTYPE MyL3Code_index is My8BitArray_index;
SUBTYPE MyL3Code_array is My8BitArray_array;

function MyL3Code_Equal(val1, val2: in MyL3Code) return Boolean;

function MyL3Code_Init return MyL3Code;

ERR_MYL3CODE_ELM:CONSTANT INTEGER := 1796; 
FUNCTION MyL3Code_IsConstraintValid(val : in MyL3Code) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3Fnum is My8BitArray;
SUBTYPE MyL3Fnum_index is My8BitArray_index;
SUBTYPE MyL3Fnum_array is My8BitArray_array;

function MyL3Fnum_Equal(val1, val2: in MyL3Fnum) return Boolean;

function MyL3Fnum_Init return MyL3Fnum;

ERR_MYL3FNUM_ELM:CONSTANT INTEGER := 1847; 
FUNCTION MyL3Fnum_IsConstraintValid(val : in MyL3Fnum) return adaasn1rtl.ASN1_RESULT;
-- MyL3Data --------------------------------------------
SUBTYPE MyL3Data_index is integer range 1..245;
TYPE MyL3Data_array IS ARRAY (MyL3Data_index) OF My8BitArray;
SUBTYPE MyL3Data_length_index is integer range 0..245;
TYPE MyL3Data IS  RECORD
    Length : MyL3Data_length_index;
    Data  : MyL3Data_array;
END RECORD;

function MyL3Data_Equal(val1, val2: in MyL3Data) return Boolean;

function MyL3Data_Init return MyL3Data;

ERR_MYL3DATA_ELM_ELM:CONSTANT INTEGER := 1864; 
ERR_MYL3DATA:CONSTANT INTEGER := 1881; 
FUNCTION MyL3Data_IsConstraintValid(val : in MyL3Data) return adaasn1rtl.ASN1_RESULT;
-- MyL3Stack --------------------------------------------
SUBTYPE MyL3Stack_index is integer range 1..255;
TYPE MyL3Stack_array IS ARRAY (MyL3Stack_index) OF MyL3Data;
SUBTYPE MyL3Stack_length_index is integer range 0..255;
TYPE MyL3Stack IS  RECORD
    Length : MyL3Stack_length_index;
    Data  : MyL3Stack_array;
END RECORD;

function MyL3Stack_Equal(val1, val2: in MyL3Stack) return Boolean;

function MyL3Stack_Init return MyL3Stack;

ERR_MYL3STACK_ELM_ELM_ELM:CONSTANT INTEGER := 1357; 
ERR_MYL3STACK_ELM:CONSTANT INTEGER := 1374; 
ERR_MYL3STACK:CONSTANT INTEGER := 1385; 
FUNCTION MyL3Stack_IsConstraintValid(val : in MyL3Stack) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3Lfn is My8BitArray;
SUBTYPE MyL3Lfn_index is My8BitArray_index;
SUBTYPE MyL3Lfn_array is My8BitArray_array;

function MyL3Lfn_Equal(val1, val2: in MyL3Lfn) return Boolean;

function MyL3Lfn_Init return MyL3Lfn;

ERR_MYL3LFN_ELM:CONSTANT INTEGER := 2194; 
FUNCTION MyL3Lfn_IsConstraintValid(val : in MyL3Lfn) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3Hfn is My8BitArray;
SUBTYPE MyL3Hfn_index is My8BitArray_index;
SUBTYPE MyL3Hfn_array is My8BitArray_array;

function MyL3Hfn_Equal(val1, val2: in MyL3Hfn) return Boolean;

function MyL3Hfn_Init return MyL3Hfn;

ERR_MYL3HFN_ELM:CONSTANT INTEGER := 2211; 
FUNCTION MyL3Hfn_IsConstraintValid(val : in MyL3Hfn) return adaasn1rtl.ASN1_RESULT;
-- MyL3Rrq --------------------------------------------
SUBTYPE MyL3Rrq_index is integer range 1..244;
TYPE MyL3Rrq_array IS ARRAY (MyL3Rrq_index) OF My8BitArray;
SUBTYPE MyL3Rrq_length_index is integer range 0..244;
TYPE MyL3Rrq IS  RECORD
    Length : MyL3Rrq_length_index;
    Data  : MyL3Rrq_array;
END RECORD;

function MyL3Rrq_Equal(val1, val2: in MyL3Rrq) return Boolean;

function MyL3Rrq_Init return MyL3Rrq;

ERR_MYL3RRQ_ELM_ELM:CONSTANT INTEGER := 2228; 
ERR_MYL3RRQ:CONSTANT INTEGER := 2245; 
FUNCTION MyL3Rrq_IsConstraintValid(val : in MyL3Rrq) return adaasn1rtl.ASN1_RESULT;
-- MyRawData --------------------------------------------
SUBTYPE MyRawData_index is integer range 1..62475;
TYPE MyRawData_array IS ARRAY (MyRawData_index) OF My8BitArray;
SUBTYPE MyRawData_length_index is integer range 0..62475;
TYPE MyRawData IS  RECORD
    Length : MyRawData_length_index;
    Data  : MyRawData_array;
END RECORD;

function MyRawData_Equal(val1, val2: in MyRawData) return Boolean;

function MyRawData_Init return MyRawData;

ERR_MYRAWDATA_ELM_ELM:CONSTANT INTEGER := 2405; 
ERR_MYRAWDATA:CONSTANT INTEGER := 2422; 
FUNCTION MyRawData_IsConstraintValid(val : in MyRawData) return adaasn1rtl.ASN1_RESULT;
SUBTYPE My8BitArrayInteger is adaasn1rtl.Asn1UInt range 0 .. 7;


function My8BitArrayInteger_Equal(val1, val2: in My8BitArrayInteger) return Boolean;

function My8BitArrayInteger_Init return My8BitArrayInteger;

ERR_MY8BITARRAYINTEGER:CONSTANT INTEGER := 34; -- 
FUNCTION My8BitArrayInteger_IsConstraintValid(val : in My8BitArrayInteger) return adaasn1rtl.ASN1_RESULT;
SUBTYPE My8BitArrayValueInteger is adaasn1rtl.Asn1UInt range 0 .. 255;


function My8BitArrayValueInteger_Equal(val1, val2: in My8BitArrayValueInteger) return Boolean;

function My8BitArrayValueInteger_Init return My8BitArrayValueInteger;

ERR_MY8BITARRAYVALUEINTEGER:CONSTANT INTEGER := 41; -- 
FUNCTION My8BitArrayValueInteger_IsConstraintValid(val : in My8BitArrayValueInteger) return adaasn1rtl.ASN1_RESULT;
-- My16BitArray --------------------------------------------
SUBTYPE My16BitArray_index is integer range 1..16;
TYPE My16BitArray_array IS ARRAY (My16BitArray_index) OF adaasn1rtl.Asn1Boolean;
TYPE My16BitArray IS  RECORD
    Data  : My16BitArray_array;
END RECORD;

function My16BitArray_Equal(val1, val2: in My16BitArray) return Boolean;

function My16BitArray_Init return My16BitArray;

ERR_MY16BITARRAY_ELM:CONSTANT INTEGER := 48; 
FUNCTION My16BitArray_IsConstraintValid(val : in My16BitArray) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyIfcs is My16BitArray;
SUBTYPE MyIfcs_index is My16BitArray_index;
SUBTYPE MyIfcs_array is My16BitArray_array;

function MyIfcs_Equal(val1, val2: in MyIfcs) return Boolean;

function MyIfcs_Init return MyIfcs;

ERR_MYIFCS_ELM:CONSTANT INTEGER := 1306; 
FUNCTION MyIfcs_IsConstraintValid(val : in MyIfcs) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyAuth is My16BitArray;
SUBTYPE MyAuth_index is My16BitArray_index;
SUBTYPE MyAuth_array is My16BitArray_array;

function MyAuth_Equal(val1, val2: in MyAuth) return Boolean;

function MyAuth_Init return MyAuth;

ERR_MYAUTH_ELM:CONSTANT INTEGER := 1323; 
FUNCTION MyAuth_IsConstraintValid(val : in MyAuth) return adaasn1rtl.ASN1_RESULT;
-- MyInfo --------------------------------------------

TYPE MyInfo_EXIST IS RECORD
    auth:adaasn1rtl.BIT;
END RECORD;
TYPE MyInfo IS RECORD 
    ba : MyBa;
    cntrl : MyCntrl;
    code : MyCode;
    operationData : MyOperationData;
    ifcs : MyIfcs;
    auth : MyAuth;
    
    Exist : MyInfo_EXIST;

END RECORD;

function MyInfo_Equal(val1, val2: in MyInfo) return Boolean;

function MyInfo_Init return MyInfo;

ERR_MYINFO_BA_SRCADDR_ELM:CONSTANT INTEGER := 996; 
ERR_MYINFO_BA_DSTADDR_ELM:CONSTANT INTEGER := 1017; 
ERR_MYINFO_CNTRL_ELM:CONSTANT INTEGER := 1048; 
ERR_MYINFO_CODE_ELM:CONSTANT INTEGER := 1069; 
ERR_MYINFO_OPERATIONDATA_ELM_ELM:CONSTANT INTEGER := 1090; 
ERR_MYINFO_OPERATIONDATA:CONSTANT INTEGER := 1107; 
ERR_MYINFO_IFCS_ELM:CONSTANT INTEGER := 1118; 
ERR_MYINFO_AUTH_ELM:CONSTANT INTEGER := 1139; 
FUNCTION MyInfo_IsConstraintValid(val : in MyInfo) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyFcs is My16BitArray;
SUBTYPE MyFcs_index is My16BitArray_index;
SUBTYPE MyFcs_array is My16BitArray_array;

function MyFcs_Equal(val1, val2: in MyFcs) return Boolean;

function MyFcs_Init return MyFcs;

ERR_MYFCS_ELM:CONSTANT INTEGER := 1340; 
FUNCTION MyFcs_IsConstraintValid(val : in MyFcs) return adaasn1rtl.ASN1_RESULT;
-- MyFrame --------------------------------------------

TYPE MyFrame IS RECORD 
    startFlag : MyFlag;
    addr : MyAddr;
    control : MyControl;
    pid : MyPid;
    info : MyInfo;
    fcs : MyFcs;
    endFlag : MyFlag;
END RECORD;

function MyFrame_Equal(val1, val2: in MyFrame) return Boolean;

function MyFrame_Init return MyFrame;

ERR_MYFRAME_STARTFLAG_ELM:CONSTANT INTEGER := 490; 
ERR_MYFRAME_ADDR_DESTINATIONADDRESS_ELM_ELM:CONSTANT INTEGER := 511; 
ERR_MYFRAME_ADDR_SOURCEADDRESS_ELM_ELM:CONSTANT INTEGER := 538; 
ERR_MYFRAME_CONTROL_ELM:CONSTANT INTEGER := 575; 
ERR_MYFRAME_PID_ELM:CONSTANT INTEGER := 596; 
ERR_MYFRAME_INFO_BA_SRCADDR_ELM:CONSTANT INTEGER := 617; 
ERR_MYFRAME_INFO_BA_DSTADDR_ELM:CONSTANT INTEGER := 638; 
ERR_MYFRAME_INFO_CNTRL_ELM:CONSTANT INTEGER := 669; 
ERR_MYFRAME_INFO_CODE_ELM:CONSTANT INTEGER := 690; 
ERR_MYFRAME_INFO_OPERATIONDATA_ELM_ELM:CONSTANT INTEGER := 711; 
ERR_MYFRAME_INFO_OPERATIONDATA:CONSTANT INTEGER := 728; 
ERR_MYFRAME_INFO_IFCS_ELM:CONSTANT INTEGER := 739; 
ERR_MYFRAME_INFO_AUTH_ELM:CONSTANT INTEGER := 760; 
ERR_MYFRAME_FCS_ELM:CONSTANT INTEGER := 791; 
ERR_MYFRAME_ENDFLAG_ELM:CONSTANT INTEGER := 812; 
FUNCTION MyFrame_IsConstraintValid(val : in MyFrame) return adaasn1rtl.ASN1_RESULT;
-- MyPacket --------------------------------------------
SUBTYPE MyPacket_index is integer range 1..255;
TYPE MyPacket_array IS ARRAY (MyPacket_index) OF MyFrame;
SUBTYPE MyPacket_length_index is integer range 0..255;
TYPE MyPacket IS  RECORD
    Length : MyPacket_length_index;
    Data  : MyPacket_array;
END RECORD;

function MyPacket_Equal(val1, val2: in MyPacket) return Boolean;

function MyPacket_Init return MyPacket;

ERR_MYPACKET_ELM_STARTFLAG_ELM:CONSTANT INTEGER := 75; 
ERR_MYPACKET_ELM_ADDR_DESTINATIONADDRESS_ELM_ELM:CONSTANT INTEGER := 96; 
ERR_MYPACKET_ELM_ADDR_SOURCEADDRESS_ELM_ELM:CONSTANT INTEGER := 123; 
ERR_MYPACKET_ELM_CONTROL_ELM:CONSTANT INTEGER := 160; 
ERR_MYPACKET_ELM_PID_ELM:CONSTANT INTEGER := 181; 
ERR_MYPACKET_ELM_INFO_BA_SRCADDR_ELM:CONSTANT INTEGER := 202; 
ERR_MYPACKET_ELM_INFO_BA_DSTADDR_ELM:CONSTANT INTEGER := 223; 
ERR_MYPACKET_ELM_INFO_CNTRL_ELM:CONSTANT INTEGER := 254; 
ERR_MYPACKET_ELM_INFO_CODE_ELM:CONSTANT INTEGER := 275; 
ERR_MYPACKET_ELM_INFO_OPERATIONDATA_ELM_ELM:CONSTANT INTEGER := 296; 
ERR_MYPACKET_ELM_INFO_OPERATIONDATA:CONSTANT INTEGER := 313; 
ERR_MYPACKET_ELM_INFO_IFCS_ELM:CONSTANT INTEGER := 324; 
ERR_MYPACKET_ELM_INFO_AUTH_ELM:CONSTANT INTEGER := 345; 
ERR_MYPACKET_ELM_FCS_ELM:CONSTANT INTEGER := 376; 
ERR_MYPACKET_ELM_ENDFLAG_ELM:CONSTANT INTEGER := 397; 
ERR_MYPACKET:CONSTANT INTEGER := 428; 
FUNCTION MyPacket_IsConstraintValid(val : in MyPacket) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3Tte is My16BitArray;
SUBTYPE MyL3Tte_index is My16BitArray_index;
SUBTYPE MyL3Tte_array is My16BitArray_array;

function MyL3Tte_Equal(val1, val2: in MyL3Tte) return Boolean;

function MyL3Tte_Init return MyL3Tte;

ERR_MYL3TTE_ELM:CONSTANT INTEGER := 1813; 
FUNCTION MyL3Tte_IsConstraintValid(val : in MyL3Tte) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3Mrt is My16BitArray;
SUBTYPE MyL3Mrt_index is My16BitArray_index;
SUBTYPE MyL3Mrt_array is My16BitArray_array;

function MyL3Mrt_Equal(val1, val2: in MyL3Mrt) return Boolean;

function MyL3Mrt_Init return MyL3Mrt;

ERR_MYL3MRT_ELM:CONSTANT INTEGER := 1830; 
FUNCTION MyL3Mrt_IsConstraintValid(val : in MyL3Mrt) return adaasn1rtl.ASN1_RESULT;
-- MyAckData --------------------------------------------

TYPE MyAckData IS RECORD 
    ba : MyBa;
    code : MyCode;
    l3Mrt : MyL3Mrt;
    l3Lfn : MyL3Lfn;
    l3Hfn : MyL3Hfn;
    l3MissingData : MyL3MissingStack;
END RECORD;

function MyAckData_Equal(val1, val2: in MyAckData) return Boolean;

function MyAckData_Init return MyAckData;

ERR_MYACKDATA_BA_SRCADDR_ELM:CONSTANT INTEGER := 2436; 
ERR_MYACKDATA_BA_DSTADDR_ELM:CONSTANT INTEGER := 2457; 
ERR_MYACKDATA_CODE_ELM:CONSTANT INTEGER := 2488; 
ERR_MYACKDATA_L3MRT_ELM:CONSTANT INTEGER := 2509; 
ERR_MYACKDATA_L3LFN_ELM:CONSTANT INTEGER := 2530; 
ERR_MYACKDATA_L3HFN_ELM:CONSTANT INTEGER := 2551; 
ERR_MYACKDATA_L3MISSINGDATA_ELM_ELM:CONSTANT INTEGER := 2572; 
ERR_MYACKDATA_L3MISSINGDATA:CONSTANT INTEGER := 2589; 
FUNCTION MyAckData_IsConstraintValid(val : in MyAckData) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3Fcs is My16BitArray;
SUBTYPE MyL3Fcs_index is My16BitArray_index;
SUBTYPE MyL3Fcs_array is My16BitArray_array;

function MyL3Fcs_Equal(val1, val2: in MyL3Fcs) return Boolean;

function MyL3Fcs_Init return MyL3Fcs;

ERR_MYL3FCS_ELM:CONSTANT INTEGER := 1944; 
FUNCTION MyL3Fcs_IsConstraintValid(val : in MyL3Fcs) return adaasn1rtl.ASN1_RESULT;
-- MyL3Frame --------------------------------------------

TYPE MyL3Frame IS RECORD 
    l3Ba : MyL3Ba;
    l3Cntrl : MyL3Cntrl;
    l3Code : MyL3Code;
    l3Tte : MyL3Tte;
    l3Mrt : MyL3Mrt;
    l3Fnum : MyL3Fnum;
    l3Data : MyL3Data;
    l3Fcs : MyL3Fcs;
END RECORD;

function MyL3Frame_Equal(val1, val2: in MyL3Frame) return Boolean;

function MyL3Frame_Init return MyL3Frame;

ERR_MYL3FRAME_L3BA_L3SRCADDR_ELM:CONSTANT INTEGER := 1485; 
ERR_MYL3FRAME_L3BA_L3DSTADDR_ELM:CONSTANT INTEGER := 1506; 
ERR_MYL3FRAME_L3CNTRL_ELM:CONSTANT INTEGER := 1537; 
ERR_MYL3FRAME_L3CODE_ELM:CONSTANT INTEGER := 1558; 
ERR_MYL3FRAME_L3TTE_ELM:CONSTANT INTEGER := 1579; 
ERR_MYL3FRAME_L3MRT_ELM:CONSTANT INTEGER := 1600; 
ERR_MYL3FRAME_L3FNUM_ELM:CONSTANT INTEGER := 1621; 
ERR_MYL3FRAME_L3DATA_ELM_ELM:CONSTANT INTEGER := 1642; 
ERR_MYL3FRAME_L3DATA:CONSTANT INTEGER := 1659; 
ERR_MYL3FRAME_L3FCS_ELM:CONSTANT INTEGER := 1670; 
FUNCTION MyL3Frame_IsConstraintValid(val : in MyL3Frame) return adaasn1rtl.ASN1_RESULT;
-- MyL3AckFrame --------------------------------------------

TYPE MyL3AckFrame IS RECORD 
    l3Ba : MyL3Ba;
    l3Cntrl : MyL3Cntrl;
    l3Code : MyL3Code;
    l3Tte : MyL3Tte;
    l3Mrt : MyL3Mrt;
    l3Lfn : MyL3Lfn;
    l3Hfn : MyL3Hfn;
    l3Rrq : MyL3Rrq;
    l3Fcs : MyL3Fcs;
END RECORD;

function MyL3AckFrame_Equal(val1, val2: in MyL3AckFrame) return Boolean;

function MyL3AckFrame_Init return MyL3AckFrame;

ERR_MYL3ACKFRAME_L3BA_L3SRCADDR_ELM:CONSTANT INTEGER := 1961; 
ERR_MYL3ACKFRAME_L3BA_L3DSTADDR_ELM:CONSTANT INTEGER := 1982; 
ERR_MYL3ACKFRAME_L3CNTRL_ELM:CONSTANT INTEGER := 2013; 
ERR_MYL3ACKFRAME_L3CODE_ELM:CONSTANT INTEGER := 2034; 
ERR_MYL3ACKFRAME_L3TTE_ELM:CONSTANT INTEGER := 2055; 
ERR_MYL3ACKFRAME_L3MRT_ELM:CONSTANT INTEGER := 2076; 
ERR_MYL3ACKFRAME_L3LFN_ELM:CONSTANT INTEGER := 2097; 
ERR_MYL3ACKFRAME_L3HFN_ELM:CONSTANT INTEGER := 2118; 
ERR_MYL3ACKFRAME_L3RRQ_ELM_ELM:CONSTANT INTEGER := 2139; 
ERR_MYL3ACKFRAME_L3RRQ:CONSTANT INTEGER := 2156; 
ERR_MYL3ACKFRAME_L3FCS_ELM:CONSTANT INTEGER := 2167; 
FUNCTION MyL3AckFrame_IsConstraintValid(val : in MyL3AckFrame) return adaasn1rtl.ASN1_RESULT;
SUBTYPE My16BitArrayInteger is adaasn1rtl.Asn1UInt range 0 .. 15;


function My16BitArrayInteger_Equal(val1, val2: in My16BitArrayInteger) return Boolean;

function My16BitArrayInteger_Init return My16BitArrayInteger;

ERR_MY16BITARRAYINTEGER:CONSTANT INTEGER := 61; -- 
FUNCTION My16BitArrayInteger_IsConstraintValid(val : in My16BitArrayInteger) return adaasn1rtl.ASN1_RESULT;
SUBTYPE My16BitArrayValueInteger is adaasn1rtl.Asn1UInt range 0 .. 65535;


function My16BitArrayValueInteger_Equal(val1, val2: in My16BitArrayValueInteger) return Boolean;

function My16BitArrayValueInteger_Init return My16BitArrayValueInteger;

ERR_MY16BITARRAYVALUEINTEGER:CONSTANT INTEGER := 68; -- 
FUNCTION My16BitArrayValueInteger_IsConstraintValid(val : in My16BitArrayValueInteger) return adaasn1rtl.ASN1_RESULT;
-- MyDataStack --------------------------------------------
SUBTYPE MyDataStack_index is integer range 1..2000;
TYPE MyDataStack_array IS ARRAY (MyDataStack_index) OF adaasn1rtl.Asn1Boolean;
SUBTYPE MyDataStack_length_index is integer range 40..2000;
TYPE MyDataStack IS  RECORD
    Length : MyDataStack_length_index;
    Data  : MyDataStack_array;
END RECORD;

function MyDataStack_Equal(val1, val2: in MyDataStack) return Boolean;

function MyDataStack_Init return MyDataStack;

ERR_MYDATASTACK_ELM:CONSTANT INTEGER := 435; 
ERR_MYDATASTACK:CONSTANT INTEGER := 442; 
FUNCTION MyDataStack_IsConstraintValid(val : in MyDataStack) return adaasn1rtl.ASN1_RESULT;
-- MyFcsStack --------------------------------------------
SUBTYPE MyFcsStack_index is integer range 1..2192;
TYPE MyFcsStack_array IS ARRAY (MyFcsStack_index) OF adaasn1rtl.Asn1Boolean;
SUBTYPE MyFcsStack_length_index is integer range 224..2192;
TYPE MyFcsStack IS  RECORD
    Length : MyFcsStack_length_index;
    Data  : MyFcsStack_array;
END RECORD;

function MyFcsStack_Equal(val1, val2: in MyFcsStack) return Boolean;

function MyFcsStack_Init return MyFcsStack;

ERR_MYFCSSTACK_ELM:CONSTANT INTEGER := 449; 
ERR_MYFCSSTACK:CONSTANT INTEGER := 456; 
FUNCTION MyFcsStack_IsConstraintValid(val : in MyFcsStack) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyFcsStackInteger is adaasn1rtl.Asn1UInt range 0 .. 2175;


function MyFcsStackInteger_Equal(val1, val2: in MyFcsStackInteger) return Boolean;

function MyFcsStackInteger_Init return MyFcsStackInteger;

ERR_MYFCSSTACKINTEGER:CONSTANT INTEGER := 463; -- 
FUNCTION MyFcsStackInteger_IsConstraintValid(val : in MyFcsStackInteger) return adaasn1rtl.ASN1_RESULT;
-- MyFcsPolynomial --------------------------------------------
SUBTYPE MyFcsPolynomial_index is integer range 1..17;
TYPE MyFcsPolynomial_array IS ARRAY (MyFcsPolynomial_index) OF adaasn1rtl.Asn1Boolean;
TYPE MyFcsPolynomial IS  RECORD
    Data  : MyFcsPolynomial_array;
END RECORD;

function MyFcsPolynomial_Equal(val1, val2: in MyFcsPolynomial) return Boolean;

function MyFcsPolynomial_Init return MyFcsPolynomial;

ERR_MYFCSPOLYNOMIAL_ELM:CONSTANT INTEGER := 470; 
FUNCTION MyFcsPolynomial_IsConstraintValid(val : in MyFcsPolynomial) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyFcsPolynomialInteger is adaasn1rtl.Asn1UInt range 0 .. 16;


function MyFcsPolynomialInteger_Equal(val1, val2: in MyFcsPolynomialInteger) return Boolean;

function MyFcsPolynomialInteger_Init return MyFcsPolynomialInteger;

ERR_MYFCSPOLYNOMIALINTEGER:CONSTANT INTEGER := 483; -- 
FUNCTION MyFcsPolynomialInteger_IsConstraintValid(val : in MyFcsPolynomialInteger) return adaasn1rtl.ASN1_RESULT;
-- MyL3StackNumbers --------------------------------------------
SUBTYPE MyL3StackNumbers_index is integer range 1..255;
TYPE MyL3StackNumbers_array IS ARRAY (MyL3StackNumbers_index) OF adaasn1rtl.Asn1Boolean;
SUBTYPE MyL3StackNumbers_length_index is integer range 0..255;
TYPE MyL3StackNumbers IS  RECORD
    Length : MyL3StackNumbers_length_index;
    Data  : MyL3StackNumbers_array;
END RECORD;

function MyL3StackNumbers_Equal(val1, val2: in MyL3StackNumbers) return Boolean;

function MyL3StackNumbers_Init return MyL3StackNumbers;

ERR_MYL3STACKNUMBERS_ELM:CONSTANT INTEGER := 1392; 
ERR_MYL3STACKNUMBERS:CONSTANT INTEGER := 1399; 
FUNCTION MyL3StackNumbers_IsConstraintValid(val : in MyL3StackNumbers) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3StackInteger is adaasn1rtl.Asn1UInt range 0 .. 254;


function MyL3StackInteger_Equal(val1, val2: in MyL3StackInteger) return Boolean;

function MyL3StackInteger_Init return MyL3StackInteger;

ERR_MYL3STACKINTEGER:CONSTANT INTEGER := 1406; -- 
FUNCTION MyL3StackInteger_IsConstraintValid(val : in MyL3StackInteger) return adaasn1rtl.ASN1_RESULT;
-- MyL3DataStack --------------------------------------------
SUBTYPE MyL3DataStack_index is integer range 1..1960;
TYPE MyL3DataStack_array IS ARRAY (MyL3DataStack_index) OF adaasn1rtl.Asn1Boolean;
SUBTYPE MyL3DataStack_length_index is integer range 0..1960;
TYPE MyL3DataStack IS  RECORD
    Length : MyL3DataStack_length_index;
    Data  : MyL3DataStack_array;
END RECORD;

function MyL3DataStack_Equal(val1, val2: in MyL3DataStack) return Boolean;

function MyL3DataStack_Init return MyL3DataStack;

ERR_MYL3DATASTACK_ELM:CONSTANT INTEGER := 1437; 
ERR_MYL3DATASTACK:CONSTANT INTEGER := 1444; 
FUNCTION MyL3DataStack_IsConstraintValid(val : in MyL3DataStack) return adaasn1rtl.ASN1_RESULT;
-- MyL3FcsStack --------------------------------------------
SUBTYPE MyL3FcsStack_index is integer range 1..2040;
TYPE MyL3FcsStack_array IS ARRAY (MyL3FcsStack_index) OF adaasn1rtl.Asn1Boolean;
SUBTYPE MyL3FcsStack_length_index is integer range 80..2040;
TYPE MyL3FcsStack IS  RECORD
    Length : MyL3FcsStack_length_index;
    Data  : MyL3FcsStack_array;
END RECORD;

function MyL3FcsStack_Equal(val1, val2: in MyL3FcsStack) return Boolean;

function MyL3FcsStack_Init return MyL3FcsStack;

ERR_MYL3FCSSTACK_ELM:CONSTANT INTEGER := 1451; 
ERR_MYL3FCSSTACK:CONSTANT INTEGER := 1458; 
FUNCTION MyL3FcsStack_IsConstraintValid(val : in MyL3FcsStack) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3FcsStackInteger is adaasn1rtl.Asn1UInt range 0 .. 2023;


function MyL3FcsStackInteger_Equal(val1, val2: in MyL3FcsStackInteger) return Boolean;

function MyL3FcsStackInteger_Init return MyL3FcsStackInteger;

ERR_MYL3FCSSTACKINTEGER:CONSTANT INTEGER := 1465; -- 
FUNCTION MyL3FcsStackInteger_IsConstraintValid(val : in MyL3FcsStackInteger) return adaasn1rtl.ASN1_RESULT;
-- MyL3FcsPolynomial --------------------------------------------
SUBTYPE MyL3FcsPolynomial_index is integer range 1..17;
TYPE MyL3FcsPolynomial_array IS ARRAY (MyL3FcsPolynomial_index) OF adaasn1rtl.Asn1Boolean;
TYPE MyL3FcsPolynomial IS  RECORD
    Data  : MyL3FcsPolynomial_array;
END RECORD;

function MyL3FcsPolynomial_Equal(val1, val2: in MyL3FcsPolynomial) return Boolean;

function MyL3FcsPolynomial_Init return MyL3FcsPolynomial;

ERR_MYL3FCSPOLYNOMIAL_ELM:CONSTANT INTEGER := 1472; 
FUNCTION MyL3FcsPolynomial_IsConstraintValid(val : in MyL3FcsPolynomial) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3DataInteger is adaasn1rtl.Asn1UInt range 0 .. 244;


function MyL3DataInteger_Equal(val1, val2: in MyL3DataInteger) return Boolean;

function MyL3DataInteger_Init return MyL3DataInteger;

ERR_MYL3DATAINTEGER:CONSTANT INTEGER := 1888; -- 
FUNCTION MyL3DataInteger_IsConstraintValid(val : in MyL3DataInteger) return adaasn1rtl.ASN1_RESULT;
-- MyL3AckDataStack --------------------------------------------
SUBTYPE MyL3AckDataStack_index is integer range 1..1952;
TYPE MyL3AckDataStack_array IS ARRAY (MyL3AckDataStack_index) OF adaasn1rtl.Asn1Boolean;
SUBTYPE MyL3AckDataStack_length_index is integer range 0..1952;
TYPE MyL3AckDataStack IS  RECORD
    Length : MyL3AckDataStack_length_index;
    Data  : MyL3AckDataStack_array;
END RECORD;

function MyL3AckDataStack_Equal(val1, val2: in MyL3AckDataStack) return Boolean;

function MyL3AckDataStack_Init return MyL3AckDataStack;

ERR_MYL3ACKDATASTACK_ELM:CONSTANT INTEGER := 1895; 
ERR_MYL3ACKDATASTACK:CONSTANT INTEGER := 1902; 
FUNCTION MyL3AckDataStack_IsConstraintValid(val : in MyL3AckDataStack) return adaasn1rtl.ASN1_RESULT;
-- MyL3AckFcsStack --------------------------------------------
SUBTYPE MyL3AckFcsStack_index is integer range 1..2040;
TYPE MyL3AckFcsStack_array IS ARRAY (MyL3AckFcsStack_index) OF adaasn1rtl.Asn1Boolean;
SUBTYPE MyL3AckFcsStack_length_index is integer range 88..2040;
TYPE MyL3AckFcsStack IS  RECORD
    Length : MyL3AckFcsStack_length_index;
    Data  : MyL3AckFcsStack_array;
END RECORD;

function MyL3AckFcsStack_Equal(val1, val2: in MyL3AckFcsStack) return Boolean;

function MyL3AckFcsStack_Init return MyL3AckFcsStack;

ERR_MYL3ACKFCSSTACK_ELM:CONSTANT INTEGER := 1909; 
ERR_MYL3ACKFCSSTACK:CONSTANT INTEGER := 1916; 
FUNCTION MyL3AckFcsStack_IsConstraintValid(val : in MyL3AckFcsStack) return adaasn1rtl.ASN1_RESULT;
-- MyL3AckMissingStack --------------------------------------------
SUBTYPE MyL3AckMissingStack_elem is adaasn1rtl.Asn1UInt range 0 .. 255;

SUBTYPE MyL3AckMissingStack_index is integer range 1..244;
TYPE MyL3AckMissingStack_array IS ARRAY (MyL3AckMissingStack_index) OF MyL3AckMissingStack_elem;
SUBTYPE MyL3AckMissingStack_length_index is integer range 0..244;
TYPE MyL3AckMissingStack IS  RECORD
    Length : MyL3AckMissingStack_length_index;
    Data  : MyL3AckMissingStack_array;
END RECORD;

function MyL3AckMissingStack_elem_Equal(val1, val2: in MyL3AckMissingStack_elem) return Boolean;

function MyL3AckMissingStack_Equal(val1, val2: in MyL3AckMissingStack) return Boolean;

function MyL3AckMissingStack_elem_Init return MyL3AckMissingStack_elem;
function MyL3AckMissingStack_Init return MyL3AckMissingStack;

ERR_MYL3ACKMISSINGSTACK_ELM:CONSTANT INTEGER := 1923; 
ERR_MYL3ACKMISSINGSTACK:CONSTANT INTEGER := 1930; 
FUNCTION MyL3AckMissingStack_IsConstraintValid(val : in MyL3AckMissingStack) return adaasn1rtl.ASN1_RESULT;
-- MyInputData --------------------------------------------

TYPE MyInputData_EXIST IS RECORD
    rawData:adaasn1rtl.BIT;
    l3Mrt:adaasn1rtl.BIT;
    l3AckMissingStack:adaasn1rtl.BIT;
END RECORD;
TYPE MyInputData IS RECORD 
    ba : MyBa;
    code : MyCode;
    rawData : MyRawData;
    l3Mrt : MyL3Mrt;
    l3AckMissingStack : MyL3AckMissingStack;
    
    Exist : MyInputData_EXIST;

END RECORD;

function MyInputData_Equal(val1, val2: in MyInputData) return Boolean;

function MyInputData_Init return MyInputData;

ERR_MYINPUTDATA_BA_SRCADDR_ELM:CONSTANT INTEGER := 2259; 
ERR_MYINPUTDATA_BA_DSTADDR_ELM:CONSTANT INTEGER := 2280; 
ERR_MYINPUTDATA_CODE_ELM:CONSTANT INTEGER := 2311; 
ERR_MYINPUTDATA_RAWDATA_ELM_ELM:CONSTANT INTEGER := 2332; 
ERR_MYINPUTDATA_RAWDATA:CONSTANT INTEGER := 2349; 
ERR_MYINPUTDATA_L3MRT_ELM:CONSTANT INTEGER := 2360; 
ERR_MYINPUTDATA_L3ACKMISSINGSTACK_ELM:CONSTANT INTEGER := 2381; 
ERR_MYINPUTDATA_L3ACKMISSINGSTACK:CONSTANT INTEGER := 2388; 
FUNCTION MyInputData_IsConstraintValid(val : in MyInputData) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3AckMissingStackInteger is adaasn1rtl.Asn1UInt range 0 .. 243;


function MyL3AckMissingStackInteger_Equal(val1, val2: in MyL3AckMissingStackInteger) return Boolean;

function MyL3AckMissingStackInteger_Init return MyL3AckMissingStackInteger;

ERR_MYL3ACKMISSINGSTACKINTEGER:CONSTANT INTEGER := 1937; -- 
FUNCTION MyL3AckMissingStackInteger_IsConstraintValid(val : in MyL3AckMissingStackInteger) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyL3RrqInteger is adaasn1rtl.Asn1UInt range 0 .. 243;


function MyL3RrqInteger_Equal(val1, val2: in MyL3RrqInteger) return Boolean;

function MyL3RrqInteger_Init return MyL3RrqInteger;

ERR_MYL3RRQINTEGER:CONSTANT INTEGER := 2252; -- 
FUNCTION MyL3RrqInteger_IsConstraintValid(val : in MyL3RrqInteger) return adaasn1rtl.ASN1_RESULT;
SUBTYPE MyRawDataInteger is adaasn1rtl.Asn1UInt range 0 .. 62475;


function MyRawDataInteger_Equal(val1, val2: in MyRawDataInteger) return Boolean;

function MyRawDataInteger_Init return MyRawDataInteger;

ERR_MYRAWDATAINTEGER:CONSTANT INTEGER := 2429; -- 
FUNCTION MyRawDataInteger_IsConstraintValid(val : in MyRawDataInteger) return adaasn1rtl.ASN1_RESULT;

 

private
   --# hide TASTE_Dataview;


END TASTE_Dataview;